{
  "cve": "CVE-2022-35948",
  "mitre": {
    "cpes": [],
    "created": "2022-08-13T00:00:00+00:00",
    "description": "undici is an HTTP/1.1 client, written from scratch for Node.js.`=< undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\\r\\n\\r\\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.3,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2022/35xxx/CVE-2022-35948.json",
    "references": [
      "https://github.com/nodejs/undici/commit/66165d604fd0aee70a93ed5c44ad4cc2df395f80",
      "https://github.com/nodejs/undici/releases/tag/v5.8.2",
      "https://github.com/nodejs/undici/security/advisories/GHSA-f772-66g8-q5h3"
    ],
    "title": "CRLF Injection in Nodejs ‘undici’ via Content-Type",
    "updated": "2024-08-03T09:51:59.082000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-74",
      "CWE-93"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:nodejs:undici:*:*:*:*:*:node.js:*:*"
    ],
    "created": "2022-08-15T11:21:38.353000+00:00",
    "description": "undici is an HTTP/1.1 client, written from scratch for Node.js.`=< undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\\r\\n\\r\\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.3,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2022/CVE-2022-35948.json",
    "references": [
      "https://github.com/nodejs/undici/commit/66165d604fd0aee70a93ed5c44ad4cc2df395f80",
      "https://github.com/nodejs/undici/releases/tag/v5.8.2",
      "https://github.com/nodejs/undici/security/advisories/GHSA-f772-66g8-q5h3"
    ],
    "title": null,
    "updated": "2023-03-28T17:08:29.790000+00:00",
    "vendors": [
      "nodejs",
      "nodejs$PRODUCT$undici"
    ],
    "weaknesses": [
      "CWE-74",
      "CWE-93",
      "NVD-CWE-Other"
    ]
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-08-19T22:15:00+00:00",
        "data": [
          {
            "details": {
              "added": [],
              "removed": [
                "cpe:/a:redhat:acm:2.4::el8"
              ]
            },
            "type": "cpes"
          },
          {
            "details": {
              "added": [],
              "removed": [
                "redhat",
                "redhat$PRODUCT$acm"
              ]
            },
            "type": "vendors"
          }
        ],
        "id": "cf264157-0f9e-4536-ae14-3add95daee91"
      },
      {
        "created": "2024-09-08T18:45:00+00:00",
        "data": [
          {
            "details": [
              "redhat",
              "redhat$PRODUCT$acm"
            ],
            "type": "first_time"
          },
          {
            "details": {
              "added": [
                "cpe:/a:redhat:acm:2.4::el8"
              ],
              "removed": []
            },
            "type": "cpes"
          },
          {
            "details": {
              "added": [
                "redhat",
                "redhat$PRODUCT$acm"
              ],
              "removed": []
            },
            "type": "vendors"
          }
        ],
        "id": "bddaaa8a-b0df-4587-ab6f-4d1336f95957"
      }
    ],
    "cpes": {
      "data": [
        "cpe:/a:redhat:acm:2.4::el8",
        "cpe:2.3:a:nodejs:undici:*:*:*:*:*:node.js:*:*"
      ],
      "providers": [
        "nvd",
        "redhat"
      ]
    },
    "created": {
      "data": "2022-08-09T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "undici is an HTTP/1.1 client, written from scratch for Node.js.`=< undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\\r\\n\\r\\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.3,
          "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://github.com/nodejs/undici/commit/66165d604fd0aee70a93ed5c44ad4cc2df395f80",
        "https://github.com/nodejs/undici/releases/tag/v5.8.2",
        "https://github.com/nodejs/undici/security/advisories/GHSA-f772-66g8-q5h3",
        "https://nvd.nist.gov/vuln/detail/CVE-2022-35948",
        "https://www.cve.org/CVERecord?id=CVE-2022-35948"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "CRLF Injection in Nodejs ‘undici’ via Content-Type",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-03T09:51:59.082000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "nodejs",
        "nodejs$PRODUCT$undici",
        "redhat",
        "redhat$PRODUCT$acm"
      ],
      "providers": [
        "nvd",
        "redhat"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-74",
        "CWE-93",
        "NVD-CWE-Other"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [
      "cpe:/a:redhat:acm:2.4::el8"
    ],
    "created": "2022-08-09T00:00:00+00:00",
    "description": "undici is an HTTP/1.1 client, written from scratch for Node.js.`=< undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\\r\\n\\r\\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.3,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2022/CVE-2022-35948.json",
    "references": [
      "https://github.com/nodejs/undici/security/advisories/GHSA-f772-66g8-q5h3",
      "https://nvd.nist.gov/vuln/detail/CVE-2022-35948",
      "https://www.cve.org/CVERecord?id=CVE-2022-35948"
    ],
    "title": "nodejs: undici vulnerable to CRLF via content headers",
    "updated": "2022-08-09T00:00:00+00:00",
    "vendors": [
      "redhat",
      "redhat$PRODUCT$acm"
    ],
    "weaknesses": [
      "CWE-93"
    ]
  }
}