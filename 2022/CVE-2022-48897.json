{
  "cve": "CVE-2022-48897",
  "mitre": {
    "cpes": [],
    "created": "2024-08-21T06:10:29.785000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64/mm: fix incorrect file_map_count for invalid pmd\n\nThe page table check trigger BUG_ON() unexpectedly when split hugepage:\n\n ------------[ cut here ]------------\n kernel BUG at mm/page_table_check.c:119!\n Internal error: Oops - BUG: 00000000f2000800 [#1] SMP\n Dumping ftrace buffer:\n    (ftrace buffer empty)\n Modules linked in:\n CPU: 7 PID: 210 Comm: transhuge-stres Not tainted 6.1.0-rc3+ #748\n Hardware name: linux,dummy-virt (DT)\n pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)\n pc : page_table_check_set.isra.0+0x398/0x468\n lr : page_table_check_set.isra.0+0x1c0/0x468\n[...]\n Call trace:\n  page_table_check_set.isra.0+0x398/0x468\n  __page_table_check_pte_set+0x160/0x1c0\n  __split_huge_pmd_locked+0x900/0x1648\n  __split_huge_pmd+0x28c/0x3b8\n  unmap_page_range+0x428/0x858\n  unmap_single_vma+0xf4/0x1c8\n  zap_page_range+0x2b0/0x410\n  madvise_vma_behavior+0xc44/0xe78\n  do_madvise+0x280/0x698\n  __arm64_sys_madvise+0x90/0xe8\n  invoke_syscall.constprop.0+0xdc/0x1d8\n  do_el0_svc+0xf4/0x3f8\n  el0_svc+0x58/0x120\n  el0t_64_sync_handler+0xb8/0xc0\n  el0t_64_sync+0x19c/0x1a0\n[...]\n\nOn arm64, pmd_leaf() will return true even if the pmd is invalid due to\npmd_present_invalid() check. So in pmdp_invalidate() the file_map_count\nwill not only decrease once but also increase once. Then in set_pte_at(),\nthe file_map_count increase again, and so trigger BUG_ON() unexpectedly.\n\nAdd !pmd_present_invalid() check in pmd_user_accessible_page() to fix the\nproblem.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2022/48xxx/CVE-2022-48897.json",
    "references": [
      "https://git.kernel.org/stable/c/21e5eca0ac9046da9918a919bc92b7b5a78d27e7",
      "https://git.kernel.org/stable/c/74c2f81054510d45b813548cb0a1c4ebf87cdd5f"
    ],
    "title": "arm64/mm: fix incorrect file_map_count for invalid pmd",
    "updated": "2024-08-21T06:10:29.785000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-08-21T07:15:05.693000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64/mm: fix incorrect file_map_count for invalid pmd\n\nThe page table check trigger BUG_ON() unexpectedly when split hugepage:\n\n ------------[ cut here ]------------\n kernel BUG at mm/page_table_check.c:119!\n Internal error: Oops - BUG: 00000000f2000800 [#1] SMP\n Dumping ftrace buffer:\n    (ftrace buffer empty)\n Modules linked in:\n CPU: 7 PID: 210 Comm: transhuge-stres Not tainted 6.1.0-rc3+ #748\n Hardware name: linux,dummy-virt (DT)\n pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)\n pc : page_table_check_set.isra.0+0x398/0x468\n lr : page_table_check_set.isra.0+0x1c0/0x468\n[...]\n Call trace:\n  page_table_check_set.isra.0+0x398/0x468\n  __page_table_check_pte_set+0x160/0x1c0\n  __split_huge_pmd_locked+0x900/0x1648\n  __split_huge_pmd+0x28c/0x3b8\n  unmap_page_range+0x428/0x858\n  unmap_single_vma+0xf4/0x1c8\n  zap_page_range+0x2b0/0x410\n  madvise_vma_behavior+0xc44/0xe78\n  do_madvise+0x280/0x698\n  __arm64_sys_madvise+0x90/0xe8\n  invoke_syscall.constprop.0+0xdc/0x1d8\n  do_el0_svc+0xf4/0x3f8\n  el0_svc+0x58/0x120\n  el0t_64_sync_handler+0xb8/0xc0\n  el0t_64_sync+0x19c/0x1a0\n[...]\n\nOn arm64, pmd_leaf() will return true even if the pmd is invalid due to\npmd_present_invalid() check. So in pmdp_invalidate() the file_map_count\nwill not only decrease once but also increase once. Then in set_pte_at(),\nthe file_map_count increase again, and so trigger BUG_ON() unexpectedly.\n\nAdd !pmd_present_invalid() check in pmd_user_accessible_page() to fix the\nproblem.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2022/CVE-2022-48897.json",
    "references": [
      "https://git.kernel.org/stable/c/21e5eca0ac9046da9918a919bc92b7b5a78d27e7",
      "https://git.kernel.org/stable/c/74c2f81054510d45b813548cb0a1c4ebf87cdd5f"
    ],
    "title": null,
    "updated": "2024-08-21T12:30:33.697000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-08-21T06:30:00+00:00",
        "data": [
          {
            "details": {
              "new": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64/mm: fix incorrect file_map_count for invalid pmd\n\nThe page table check trigger BUG_ON() unexpectedly when split hugepage:\n\n ------------[ cut here ]------------\n kernel BUG at mm/page_table_check.c:119!\n Internal error: Oops - BUG: 00000000f2000800 [#1] SMP\n Dumping ftrace buffer:\n    (ftrace buffer empty)\n Modules linked in:\n CPU: 7 PID: 210 Comm: transhuge-stres Not tainted 6.1.0-rc3+ #748\n Hardware name: linux,dummy-virt (DT)\n pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)\n pc : page_table_check_set.isra.0+0x398/0x468\n lr : page_table_check_set.isra.0+0x1c0/0x468\n[...]\n Call trace:\n  page_table_check_set.isra.0+0x398/0x468\n  __page_table_check_pte_set+0x160/0x1c0\n  __split_huge_pmd_locked+0x900/0x1648\n  __split_huge_pmd+0x28c/0x3b8\n  unmap_page_range+0x428/0x858\n  unmap_single_vma+0xf4/0x1c8\n  zap_page_range+0x2b0/0x410\n  madvise_vma_behavior+0xc44/0xe78\n  do_madvise+0x280/0x698\n  __arm64_sys_madvise+0x90/0xe8\n  invoke_syscall.constprop.0+0xdc/0x1d8\n  do_el0_svc+0xf4/0x3f8\n  el0_svc+0x58/0x120\n  el0t_64_sync_handler+0xb8/0xc0\n  el0t_64_sync+0x19c/0x1a0\n[...]\n\nOn arm64, pmd_leaf() will return true even if the pmd is invalid due to\npmd_present_invalid() check. So in pmdp_invalidate() the file_map_count\nwill not only decrease once but also increase once. Then in set_pte_at(),\nthe file_map_count increase again, and so trigger BUG_ON() unexpectedly.\n\nAdd !pmd_present_invalid() check in pmd_user_accessible_page() to fix the\nproblem.",
              "old": null
            },
            "type": "description"
          },
          {
            "details": {
              "new": "arm64/mm: fix incorrect file_map_count for invalid pmd",
              "old": null
            },
            "type": "title"
          },
          {
            "details": {
              "added": [
                "https://git.kernel.org/stable/c/21e5eca0ac9046da9918a919bc92b7b5a78d27e7",
                "https://git.kernel.org/stable/c/74c2f81054510d45b813548cb0a1c4ebf87cdd5f"
              ],
              "removed": []
            },
            "type": "references"
          }
        ],
        "id": "65f5afdf-83f8-4686-aeda-24fa9e956173"
      }
    ],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-08-21T06:10:29.785000+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\narm64/mm: fix incorrect file_map_count for invalid pmd\n\nThe page table check trigger BUG_ON() unexpectedly when split hugepage:\n\n ------------[ cut here ]------------\n kernel BUG at mm/page_table_check.c:119!\n Internal error: Oops - BUG: 00000000f2000800 [#1] SMP\n Dumping ftrace buffer:\n    (ftrace buffer empty)\n Modules linked in:\n CPU: 7 PID: 210 Comm: transhuge-stres Not tainted 6.1.0-rc3+ #748\n Hardware name: linux,dummy-virt (DT)\n pstate: 20000005 (nzCv daif -PAN -UAO -TCO -DIT -SSBS BTYPE=--)\n pc : page_table_check_set.isra.0+0x398/0x468\n lr : page_table_check_set.isra.0+0x1c0/0x468\n[...]\n Call trace:\n  page_table_check_set.isra.0+0x398/0x468\n  __page_table_check_pte_set+0x160/0x1c0\n  __split_huge_pmd_locked+0x900/0x1648\n  __split_huge_pmd+0x28c/0x3b8\n  unmap_page_range+0x428/0x858\n  unmap_single_vma+0xf4/0x1c8\n  zap_page_range+0x2b0/0x410\n  madvise_vma_behavior+0xc44/0xe78\n  do_madvise+0x280/0x698\n  __arm64_sys_madvise+0x90/0xe8\n  invoke_syscall.constprop.0+0xdc/0x1d8\n  do_el0_svc+0xf4/0x3f8\n  el0_svc+0x58/0x120\n  el0t_64_sync_handler+0xb8/0xc0\n  el0t_64_sync+0x19c/0x1a0\n[...]\n\nOn arm64, pmd_leaf() will return true even if the pmd is invalid due to\npmd_present_invalid() check. So in pmdp_invalidate() the file_map_count\nwill not only decrease once but also increase once. Then in set_pte_at(),\nthe file_map_count increase again, and so trigger BUG_ON() unexpectedly.\n\nAdd !pmd_present_invalid() check in pmd_user_accessible_page() to fix the\nproblem.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {},
        "provider": null
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/21e5eca0ac9046da9918a919bc92b7b5a78d27e7",
        "https://git.kernel.org/stable/c/74c2f81054510d45b813548cb0a1c4ebf87cdd5f"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "arm64/mm: fix incorrect file_map_count for invalid pmd",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-21T12:30:33.697000+00:00",
      "provider": "nvd"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [],
      "providers": []
    }
  }
}