{
  "cve": "CVE-2022-36070",
  "mitre": {
    "cpes": [],
    "created": "2022-09-07T18:30:14+00:00",
    "description": "Poetry is a dependency manager for Python. To handle dependencies that come from a Git repository, Poetry executes various commands, e.g. `git config`. These commands are being executed using the executable’s name and not its absolute path. This can lead to the execution of untrusted code due to the way Windows resolves executable names to paths. Unlike Linux-based operating systems, Windows searches for the executable in the current directory first and looks in the paths that are defined in the `PATH` environment variable afterward. This vulnerability can lead to Arbitrary Code Execution, which would lead to the takeover of the system. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems. Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe. The victim could also not protect themself by vetting any Git or Poetry config files that might be present in the directory, because the behavior is undocumented. Versions 1.1.9 and 1.2.0b1 contain patches for this issue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 7.3,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2022/36xxx/CVE-2022-36070.json",
    "references": [
      "https://github.com/python-poetry/poetry/releases/tag/1.1.9",
      "https://github.com/python-poetry/poetry/releases/tag/1.2.0b1",
      "https://github.com/python-poetry/poetry/security/advisories/GHSA-j4j9-7hg9-97g6"
    ],
    "title": "Poetry's Untrusted Search Path can lead to Local Code Execution on Windows",
    "updated": "2024-08-03T09:52:00.559000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-426"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:python-poetry:poetry:*:*:*:*:*:python:*:*",
      "cpe:2.3:a:python-poetry:poetry:1.2.0:alpha1:*:*:*:python:*:*",
      "cpe:2.3:a:python-poetry:poetry:1.2.0:alpha2:*:*:*:python:*:*",
      "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
    ],
    "created": "2022-09-07T19:15:08.630000+00:00",
    "description": "Poetry is a dependency manager for Python. To handle dependencies that come from a Git repository, Poetry executes various commands, e.g. `git config`. These commands are being executed using the executable’s name and not its absolute path. This can lead to the execution of untrusted code due to the way Windows resolves executable names to paths. Unlike Linux-based operating systems, Windows searches for the executable in the current directory first and looks in the paths that are defined in the `PATH` environment variable afterward. This vulnerability can lead to Arbitrary Code Execution, which would lead to the takeover of the system. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems. Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe. The victim could also not protect themself by vetting any Git or Poetry config files that might be present in the directory, because the behavior is undocumented. Versions 1.1.9 and 1.2.0b1 contain patches for this issue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 7.3,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2022/CVE-2022-36070.json",
    "references": [
      "https://github.com/python-poetry/poetry/releases/tag/1.1.9",
      "https://github.com/python-poetry/poetry/releases/tag/1.2.0b1",
      "https://github.com/python-poetry/poetry/security/advisories/GHSA-j4j9-7hg9-97g6"
    ],
    "title": null,
    "updated": "2022-09-13T17:48:27.487000+00:00",
    "vendors": [
      "microsoft",
      "microsoft$PRODUCT$windows",
      "python-poetry",
      "python-poetry$PRODUCT$poetry"
    ],
    "weaknesses": [
      "CWE-426"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:python-poetry:poetry:*:*:*:*:*:python:*:*",
        "cpe:2.3:a:python-poetry:poetry:1.2.0:alpha1:*:*:*:python:*:*",
        "cpe:2.3:a:python-poetry:poetry:1.2.0:alpha2:*:*:*:python:*:*",
        "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2022-09-07T18:30:14+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "Poetry is a dependency manager for Python. To handle dependencies that come from a Git repository, Poetry executes various commands, e.g. `git config`. These commands are being executed using the executable’s name and not its absolute path. This can lead to the execution of untrusted code due to the way Windows resolves executable names to paths. Unlike Linux-based operating systems, Windows searches for the executable in the current directory first and looks in the paths that are defined in the `PATH` environment variable afterward. This vulnerability can lead to Arbitrary Code Execution, which would lead to the takeover of the system. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems. Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe. The victim could also not protect themself by vetting any Git or Poetry config files that might be present in the directory, because the behavior is undocumented. Versions 1.1.9 and 1.2.0b1 contain patches for this issue.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 7.3,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://github.com/python-poetry/poetry/releases/tag/1.1.9",
        "https://github.com/python-poetry/poetry/releases/tag/1.2.0b1",
        "https://github.com/python-poetry/poetry/security/advisories/GHSA-j4j9-7hg9-97g6"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "Poetry's Untrusted Search Path can lead to Local Code Execution on Windows",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-03T09:52:00.559000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "microsoft",
        "microsoft$PRODUCT$windows",
        "python-poetry",
        "python-poetry$PRODUCT$poetry"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-426"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    }
  }
}