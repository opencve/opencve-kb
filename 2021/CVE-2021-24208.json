{
  "cve": "CVE-2021-24208",
  "mitre": {
    "cpes": [],
    "created": "2021-04-05T18:27:46+00:00",
    "description": "The editor of the WP Page Builder WordPress plugin before 1.2.4 allows lower-privileged users to insert unfiltered HTML, including JavaScript, into pages via the “Raw HTML” widget and the “Custom HTML” widgets (though the custom HTML widget requires sending a crafted request - it appears that this widget uses some form of client side validation but not server side validation), all of which are added via the “page_builder_data” parameter when performing the “wppb_page_save” AJAX action. It is also possible to insert malicious JavaScript via the “wppb_page_css” parameter (this can be done by closing out the style tag and opening a script tag) when performing the “wppb_page_save” AJAX action.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/24xxx/CVE-2021-24208.json",
    "references": [
      "https://wpscan.com/vulnerability/c20e243d-b0de-4ae5-9a0d-b9d02c9b8141",
      "https://www.themeum.com/wp-page-builder-updated-v1-2-4/"
    ],
    "title": "WP Page Builder < 1.2.4 - Multiple Stored Cross-Site scripting (XSS)",
    "updated": "2024-08-03T19:21:18.776000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-79"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:themeum:wp_page_builder:*:*:*:*:*:wordpress:*:*"
    ],
    "created": "2021-04-05T19:15:17.343000+00:00",
    "description": "The editor of the WP Page Builder WordPress plugin before 1.2.4 allows lower-privileged users to insert unfiltered HTML, including JavaScript, into pages via the “Raw HTML” widget and the “Custom HTML” widgets (though the custom HTML widget requires sending a crafted request - it appears that this widget uses some form of client side validation but not server side validation), all of which are added via the “page_builder_data” parameter when performing the “wppb_page_save” AJAX action. It is also possible to insert malicious JavaScript via the “wppb_page_css” parameter (this can be done by closing out the style tag and opening a script tag) when performing the “wppb_page_save” AJAX action.",
    "metrics": {
      "cvssV2_0": {
        "score": 3.5,
        "vector": "AV:N/AC:M/Au:S/C:N/I:P/A:N"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.4,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-24208.json",
    "references": [
      "https://wpscan.com/vulnerability/c20e243d-b0de-4ae5-9a0d-b9d02c9b8141",
      "https://www.themeum.com/wp-page-builder-updated-v1-2-4/"
    ],
    "title": null,
    "updated": "2021-04-12T13:10:44.390000+00:00",
    "vendors": [
      "themeum",
      "themeum$PRODUCT$wp_page_builder"
    ],
    "weaknesses": [
      "CWE-79"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:themeum:wp_page_builder:*:*:*:*:*:wordpress:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2021-04-05T18:27:46+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "The editor of the WP Page Builder WordPress plugin before 1.2.4 allows lower-privileged users to insert unfiltered HTML, including JavaScript, into pages via the “Raw HTML” widget and the “Custom HTML” widgets (though the custom HTML widget requires sending a crafted request - it appears that this widget uses some form of client side validation but not server side validation), all of which are added via the “page_builder_data” parameter when performing the “wppb_page_save” AJAX action. It is also possible to insert malicious JavaScript via the “wppb_page_css” parameter (this can be done by closing out the style tag and opening a script tag) when performing the “wppb_page_save” AJAX action.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 3.5,
          "vector": "AV:N/AC:M/Au:S/C:N/I:P/A:N"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.4,
          "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
        },
        "provider": "nvd"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://wpscan.com/vulnerability/c20e243d-b0de-4ae5-9a0d-b9d02c9b8141",
        "https://www.themeum.com/wp-page-builder-updated-v1-2-4/"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "WP Page Builder < 1.2.4 - Multiple Stored Cross-Site scripting (XSS)",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-03T19:21:18.776000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "themeum",
        "themeum$PRODUCT$wp_page_builder"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-79"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    }
  }
}