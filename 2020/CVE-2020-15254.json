{
  "cve": "CVE-2020-15254",
  "mitre": {
    "cpes": [],
    "created": "2020-10-16T17:05:24+00:00",
    "description": "Crossbeam is a set of tools for concurrent programming. In crossbeam-channel before version 0.4.4, the bounded channel incorrectly assumes that `Vec::from_iter` has allocated capacity that same as the number of iterator elements. `Vec::from_iter` does not actually guarantee that and may allocate extra memory. The destructor of the `bounded` channel reconstructs `Vec` from the raw pointer based on the incorrect assumes described above. This is unsound and causing deallocation with the incorrect capacity when `Vec::from_iter` has allocated different sizes with the number of iterator elements. This has been fixed in crossbeam-channel 0.4.4.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 8.1,
        "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2020/15xxx/CVE-2020-15254.json",
    "references": [
      "https://github.com/RustSec/advisory-db/pull/425",
      "https://github.com/crossbeam-rs/crossbeam/issues/539",
      "https://github.com/crossbeam-rs/crossbeam/pull/533",
      "https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-v5m7-53cv-f3hx"
    ],
    "title": "Undefined Behavior in bounded Crossbeam channel",
    "updated": "2024-08-04T13:08:23.227000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-119"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:crossbeam_project:crossbeam:*:*:*:*:*:*:*:*"
    ],
    "created": "2020-10-16T17:15:12.057000+00:00",
    "description": "Crossbeam is a set of tools for concurrent programming. In crossbeam-channel before version 0.4.4, the bounded channel incorrectly assumes that `Vec::from_iter` has allocated capacity that same as the number of iterator elements. `Vec::from_iter` does not actually guarantee that and may allocate extra memory. The destructor of the `bounded` channel reconstructs `Vec` from the raw pointer based on the incorrect assumes described above. This is unsound and causing deallocation with the incorrect capacity when `Vec::from_iter` has allocated different sizes with the number of iterator elements. This has been fixed in crossbeam-channel 0.4.4.",
    "metrics": {
      "cvssV2_0": {
        "score": 7.5,
        "vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2020/CVE-2020-15254.json",
    "references": [
      "https://github.com/RustSec/advisory-db/pull/425",
      "https://github.com/crossbeam-rs/crossbeam/issues/539",
      "https://github.com/crossbeam-rs/crossbeam/pull/533",
      "https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-v5m7-53cv-f3hx"
    ],
    "title": null,
    "updated": "2022-08-05T19:30:49.067000+00:00",
    "vendors": [
      "crossbeam_project",
      "crossbeam_project$PRODUCT$crossbeam"
    ],
    "weaknesses": [
      "CWE-119",
      "CWE-401"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:crossbeam_project:crossbeam:*:*:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2020-10-16T17:05:24+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "Crossbeam is a set of tools for concurrent programming. In crossbeam-channel before version 0.4.4, the bounded channel incorrectly assumes that `Vec::from_iter` has allocated capacity that same as the number of iterator elements. `Vec::from_iter` does not actually guarantee that and may allocate extra memory. The destructor of the `bounded` channel reconstructs `Vec` from the raw pointer based on the incorrect assumes described above. This is unsound and causing deallocation with the incorrect capacity when `Vec::from_iter` has allocated different sizes with the number of iterator elements. This has been fixed in crossbeam-channel 0.4.4.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 7.5,
          "vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 8.1,
          "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Important",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://github.com/RustSec/advisory-db/pull/425",
        "https://github.com/crossbeam-rs/crossbeam/issues/539",
        "https://github.com/crossbeam-rs/crossbeam/pull/533",
        "https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-v5m7-53cv-f3hx",
        "https://nvd.nist.gov/vuln/detail/CVE-2020-15254",
        "https://www.cve.org/CVERecord?id=CVE-2020-15254"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "Undefined Behavior in bounded Crossbeam channel",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-04T13:08:23.227000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "crossbeam_project",
        "crossbeam_project$PRODUCT$crossbeam"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-119",
        "CWE-401"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2020-10-20T00:00:00+00:00",
    "description": "Crossbeam is a set of tools for concurrent programming. In crossbeam-channel before version 0.4.4, the bounded channel incorrectly assumes that `Vec::from_iter` has allocated capacity that same as the number of iterator elements. `Vec::from_iter` does not actually guarantee that and may allocate extra memory. The destructor of the `bounded` channel reconstructs `Vec` from the raw pointer based on the incorrect assumes described above. This is unsound and causing deallocation with the incorrect capacity when `Vec::from_iter` has allocated different sizes with the number of iterator elements. This has been fixed in crossbeam-channel 0.4.4.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "threat_severity": "Important"
    },
    "redhat_repo_path": "2020/CVE-2020-15254.json",
    "references": [
      "https://nvd.nist.gov/vuln/detail/CVE-2020-15254",
      "https://www.cve.org/CVERecord?id=CVE-2020-15254"
    ],
    "title": "Mozilla: Undefined behavior in bounded channel of crossbeam rust crate",
    "updated": "2020-10-20T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-119"
    ]
  }
}