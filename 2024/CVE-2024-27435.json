{
  "cve": "CVE-2024-27435",
  "mitre": {
    "cpes": [],
    "created": "2024-05-17T12:12:36.439000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnvme: fix reconnection fail due to reserved tag allocation\n\nWe found a issue on production environment while using NVMe over RDMA,\nadmin_q reconnect failed forever while remote target and network is ok.\nAfter dig into it, we found it may caused by a ABBA deadlock due to tag\nallocation. In my case, the tag was hold by a keep alive request\nwaiting inside admin_q, as we quiesced admin_q while reset ctrl, so the\nrequest maked as idle and will not process before reset success. As\nfabric_q shares tagset with admin_q, while reconnect remote target, we\nneed a tag for connect command, but the only one reserved tag was held\nby keep alive command which waiting inside admin_q. As a result, we\nfailed to reconnect admin_q forever. In order to fix this issue, I\nthink we should keep two reserved tags for admin queue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/27xxx/CVE-2024-27435.json",
    "references": [
      "https://git.kernel.org/stable/c/149afee5c7418ec5db9d7387b9c9a5c1eb7ea2a8",
      "https://git.kernel.org/stable/c/262da920896e2f2ab0e3947d9dbee0aa09045818",
      "https://git.kernel.org/stable/c/6851778504cdb49431809b4ba061903d5f592c96",
      "https://git.kernel.org/stable/c/de105068fead55ed5c07ade75e9c8e7f86a00d1d",
      "https://git.kernel.org/stable/c/ff2f90f88d78559802466ad1c84ac5bda4416b3a"
    ],
    "title": "nvme: fix reconnection fail due to reserved tag allocation",
    "updated": "2024-08-02T00:34:52.327000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-05-17T13:15:58.073000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnvme: fix reconnection fail due to reserved tag allocation\n\nWe found a issue on production environment while using NVMe over RDMA,\nadmin_q reconnect failed forever while remote target and network is ok.\nAfter dig into it, we found it may caused by a ABBA deadlock due to tag\nallocation. In my case, the tag was hold by a keep alive request\nwaiting inside admin_q, as we quiesced admin_q while reset ctrl, so the\nrequest maked as idle and will not process before reset success. As\nfabric_q shares tagset with admin_q, while reconnect remote target, we\nneed a tag for connect command, but the only one reserved tag was held\nby keep alive command which waiting inside admin_q. As a result, we\nfailed to reconnect admin_q forever. In order to fix this issue, I\nthink we should keep two reserved tags for admin queue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-27435.json",
    "references": [
      "https://git.kernel.org/stable/c/149afee5c7418ec5db9d7387b9c9a5c1eb7ea2a8",
      "https://git.kernel.org/stable/c/262da920896e2f2ab0e3947d9dbee0aa09045818",
      "https://git.kernel.org/stable/c/6851778504cdb49431809b4ba061903d5f592c96",
      "https://git.kernel.org/stable/c/de105068fead55ed5c07ade75e9c8e7f86a00d1d",
      "https://git.kernel.org/stable/c/ff2f90f88d78559802466ad1c84ac5bda4416b3a"
    ],
    "title": null,
    "updated": "2024-05-17T18:35:35.070000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:/a:redhat:enterprise_linux:9",
        "cpe:/o:redhat:enterprise_linux:9"
      ],
      "providers": [
        "redhat"
      ]
    },
    "created": {
      "data": "2024-05-17T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nnvme: fix reconnection fail due to reserved tag allocation\n\nWe found a issue on production environment while using NVMe over RDMA,\nadmin_q reconnect failed forever while remote target and network is ok.\nAfter dig into it, we found it may caused by a ABBA deadlock due to tag\nallocation. In my case, the tag was hold by a keep alive request\nwaiting inside admin_q, as we quiesced admin_q while reset ctrl, so the\nrequest maked as idle and will not process before reset success. As\nfabric_q shares tagset with admin_q, while reconnect remote target, we\nneed a tag for connect command, but the only one reserved tag was held\nby keep alive command which waiting inside admin_q. As a result, we\nfailed to reconnect admin_q forever. In order to fix this issue, I\nthink we should keep two reserved tags for admin queue.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.5,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/149afee5c7418ec5db9d7387b9c9a5c1eb7ea2a8",
        "https://git.kernel.org/stable/c/262da920896e2f2ab0e3947d9dbee0aa09045818",
        "https://git.kernel.org/stable/c/6851778504cdb49431809b4ba061903d5f592c96",
        "https://git.kernel.org/stable/c/de105068fead55ed5c07ade75e9c8e7f86a00d1d",
        "https://git.kernel.org/stable/c/ff2f90f88d78559802466ad1c84ac5bda4416b3a",
        "https://lore.kernel.org/linux-cve-announce/2024051710-CVE-2024-27435-c465@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-27435",
        "https://www.cve.org/CVERecord?id=CVE-2024-27435"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "nvme: fix reconnection fail due to reserved tag allocation",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T00:34:52.327000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "redhat",
        "redhat$PRODUCT$enterprise_linux"
      ],
      "providers": [
        "redhat"
      ]
    },
    "weaknesses": {
      "data": [],
      "providers": []
    }
  },
  "redhat": {
    "cpes": [
      "cpe:/a:redhat:enterprise_linux:9",
      "cpe:/o:redhat:enterprise_linux:9"
    ],
    "created": "2024-05-17T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nnvme: fix reconnection fail due to reserved tag allocation\nWe found a issue on production environment while using NVMe over RDMA,\nadmin_q reconnect failed forever while remote target and network is ok.\nAfter dig into it, we found it may caused by a ABBA deadlock due to tag\nallocation. In my case, the tag was hold by a keep alive request\nwaiting inside admin_q, as we quiesced admin_q while reset ctrl, so the\nrequest maked as idle and will not process before reset success. As\nfabric_q shares tagset with admin_q, while reconnect remote target, we\nneed a tag for connect command, but the only one reserved tag was held\nby keep alive command which waiting inside admin_q. As a result, we\nfailed to reconnect admin_q forever. In order to fix this issue, I\nthink we should keep two reserved tags for admin queue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2024/CVE-2024-27435.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024051710-CVE-2024-27435-c465@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-27435",
      "https://www.cve.org/CVERecord?id=CVE-2024-27435"
    ],
    "title": "kernel: nvme: fix reconnection fail due to reserved tag allocation",
    "updated": "2024-05-17T00:00:00+00:00",
    "vendors": [
      "redhat",
      "redhat$PRODUCT$enterprise_linux"
    ],
    "weaknesses": []
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-05-17T12:12:36.439000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnvme: fix reconnection fail due to reserved tag allocation\n\nWe found a issue on production environment while using NVMe over RDMA,\nadmin_q reconnect failed forever while remote target and network is ok.\nAfter dig into it, we found it may caused by a ABBA deadlock due to tag\nallocation. In my case, the tag was hold by a keep alive request\nwaiting inside admin_q, as we quiesced admin_q while reset ctrl, so the\nrequest maked as idle and will not process before reset success. As\nfabric_q shares tagset with admin_q, while reconnect remote target, we\nneed a tag for connect command, but the only one reserved tag was held\nby keep alive command which waiting inside admin_q. As a result, we\nfailed to reconnect admin_q forever. In order to fix this issue, I\nthink we should keep two reserved tags for admin queue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/149afee5c7418ec5db9d7387b9c9a5c1eb7ea2a8",
      "https://git.kernel.org/stable/c/262da920896e2f2ab0e3947d9dbee0aa09045818",
      "https://git.kernel.org/stable/c/6851778504cdb49431809b4ba061903d5f592c96",
      "https://git.kernel.org/stable/c/de105068fead55ed5c07ade75e9c8e7f86a00d1d",
      "https://git.kernel.org/stable/c/ff2f90f88d78559802466ad1c84ac5bda4416b3a"
    ],
    "title": "nvme: fix reconnection fail due to reserved tag allocation",
    "updated": "2024-08-02T00:34:52.327000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2024/27xxx/CVE-2024-27435.json",
    "weaknesses": []
  }
}