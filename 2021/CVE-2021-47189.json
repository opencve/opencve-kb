{
  "cve": "CVE-2021-47189",
  "mitre": {
    "cpes": [],
    "created": "2024-04-10T18:56:28.194000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: fix memory ordering between normal and ordered work functions\n\nOrdered work functions aren't guaranteed to be handled by the same thread\nwhich executed the normal work functions. The only way execution between\nnormal/ordered functions is synchronized is via the WORK_DONE_BIT,\nunfortunately the used bitops don't guarantee any ordering whatsoever.\n\nThis manifested as seemingly inexplicable crashes on ARM64, where\nasync_chunk::inode is seen as non-null in async_cow_submit which causes\nsubmit_compressed_extents to be called and crash occurs because\nasync_chunk::inode suddenly became NULL. The call trace was similar to:\n\n    pc : submit_compressed_extents+0x38/0x3d0\n    lr : async_cow_submit+0x50/0xd0\n    sp : ffff800015d4bc20\n\n    <registers omitted for brevity>\n\n    Call trace:\n     submit_compressed_extents+0x38/0x3d0\n     async_cow_submit+0x50/0xd0\n     run_ordered_work+0xc8/0x280\n     btrfs_work_helper+0x98/0x250\n     process_one_work+0x1f0/0x4ac\n     worker_thread+0x188/0x504\n     kthread+0x110/0x114\n     ret_from_fork+0x10/0x18\n\nFix this by adding respective barrier calls which ensure that all\naccesses preceding setting of WORK_DONE_BIT are strictly ordered before\nsetting the flag. At the same time add a read barrier after reading of\nWORK_DONE_BIT in run_ordered_work which ensures all subsequent loads\nwould be strictly ordered after reading the bit. This in turn ensures\nare all accesses before WORK_DONE_BIT are going to be strictly ordered\nbefore any access that can occur in ordered_func.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/47xxx/CVE-2021-47189.json",
    "references": [
      "https://git.kernel.org/stable/c/45da9c1767ac31857df572f0a909fbe88fd5a7e9",
      "https://git.kernel.org/stable/c/47e6f9f69153247109042010f3a77579e9dc61ff",
      "https://git.kernel.org/stable/c/637d652d351fd4f263ef302dc52f3971d314e500",
      "https://git.kernel.org/stable/c/670f6b3867c8f0f11e5097f353b164cecfec6179",
      "https://git.kernel.org/stable/c/6adbc07ebcaf8bead08b21687d49e0fc94400987",
      "https://git.kernel.org/stable/c/804a9d239ae9cbe88e861a7cd62319cc6ec7b136",
      "https://git.kernel.org/stable/c/bd660a20fea3ec60a49709ef5360f145ec0fe779",
      "https://git.kernel.org/stable/c/ed058d735a70f4b063323f1a7bb33cda0f987513"
    ],
    "title": "btrfs: fix memory ordering between normal and ordered work functions",
    "updated": "2024-08-04T05:32:07.308000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-04-10T19:15:47.570000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: fix memory ordering between normal and ordered work functions\n\nOrdered work functions aren't guaranteed to be handled by the same thread\nwhich executed the normal work functions. The only way execution between\nnormal/ordered functions is synchronized is via the WORK_DONE_BIT,\nunfortunately the used bitops don't guarantee any ordering whatsoever.\n\nThis manifested as seemingly inexplicable crashes on ARM64, where\nasync_chunk::inode is seen as non-null in async_cow_submit which causes\nsubmit_compressed_extents to be called and crash occurs because\nasync_chunk::inode suddenly became NULL. The call trace was similar to:\n\n    pc : submit_compressed_extents+0x38/0x3d0\n    lr : async_cow_submit+0x50/0xd0\n    sp : ffff800015d4bc20\n\n    <registers omitted for brevity>\n\n    Call trace:\n     submit_compressed_extents+0x38/0x3d0\n     async_cow_submit+0x50/0xd0\n     run_ordered_work+0xc8/0x280\n     btrfs_work_helper+0x98/0x250\n     process_one_work+0x1f0/0x4ac\n     worker_thread+0x188/0x504\n     kthread+0x110/0x114\n     ret_from_fork+0x10/0x18\n\nFix this by adding respective barrier calls which ensure that all\naccesses preceding setting of WORK_DONE_BIT are strictly ordered before\nsetting the flag. At the same time add a read barrier after reading of\nWORK_DONE_BIT in run_ordered_work which ensures all subsequent loads\nwould be strictly ordered after reading the bit. This in turn ensures\nare all accesses before WORK_DONE_BIT are going to be strictly ordered\nbefore any access that can occur in ordered_func.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-47189.json",
    "references": [
      "https://git.kernel.org/stable/c/45da9c1767ac31857df572f0a909fbe88fd5a7e9",
      "https://git.kernel.org/stable/c/47e6f9f69153247109042010f3a77579e9dc61ff",
      "https://git.kernel.org/stable/c/637d652d351fd4f263ef302dc52f3971d314e500",
      "https://git.kernel.org/stable/c/670f6b3867c8f0f11e5097f353b164cecfec6179",
      "https://git.kernel.org/stable/c/6adbc07ebcaf8bead08b21687d49e0fc94400987",
      "https://git.kernel.org/stable/c/804a9d239ae9cbe88e861a7cd62319cc6ec7b136",
      "https://git.kernel.org/stable/c/bd660a20fea3ec60a49709ef5360f145ec0fe779",
      "https://git.kernel.org/stable/c/ed058d735a70f4b063323f1a7bb33cda0f987513"
    ],
    "title": null,
    "updated": "2024-04-10T19:49:51.183000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-04-10T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: fix memory ordering between normal and ordered work functions\n\nOrdered work functions aren't guaranteed to be handled by the same thread\nwhich executed the normal work functions. The only way execution between\nnormal/ordered functions is synchronized is via the WORK_DONE_BIT,\nunfortunately the used bitops don't guarantee any ordering whatsoever.\n\nThis manifested as seemingly inexplicable crashes on ARM64, where\nasync_chunk::inode is seen as non-null in async_cow_submit which causes\nsubmit_compressed_extents to be called and crash occurs because\nasync_chunk::inode suddenly became NULL. The call trace was similar to:\n\n    pc : submit_compressed_extents+0x38/0x3d0\n    lr : async_cow_submit+0x50/0xd0\n    sp : ffff800015d4bc20\n\n    <registers omitted for brevity>\n\n    Call trace:\n     submit_compressed_extents+0x38/0x3d0\n     async_cow_submit+0x50/0xd0\n     run_ordered_work+0xc8/0x280\n     btrfs_work_helper+0x98/0x250\n     process_one_work+0x1f0/0x4ac\n     worker_thread+0x188/0x504\n     kthread+0x110/0x114\n     ret_from_fork+0x10/0x18\n\nFix this by adding respective barrier calls which ensure that all\naccesses preceding setting of WORK_DONE_BIT are strictly ordered before\nsetting the flag. At the same time add a read barrier after reading of\nWORK_DONE_BIT in run_ordered_work which ensures all subsequent loads\nwould be strictly ordered after reading the bit. This in turn ensures\nare all accesses before WORK_DONE_BIT are going to be strictly ordered\nbefore any access that can occur in ordered_func.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.5,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/45da9c1767ac31857df572f0a909fbe88fd5a7e9",
        "https://git.kernel.org/stable/c/47e6f9f69153247109042010f3a77579e9dc61ff",
        "https://git.kernel.org/stable/c/637d652d351fd4f263ef302dc52f3971d314e500",
        "https://git.kernel.org/stable/c/670f6b3867c8f0f11e5097f353b164cecfec6179",
        "https://git.kernel.org/stable/c/6adbc07ebcaf8bead08b21687d49e0fc94400987",
        "https://git.kernel.org/stable/c/804a9d239ae9cbe88e861a7cd62319cc6ec7b136",
        "https://git.kernel.org/stable/c/bd660a20fea3ec60a49709ef5360f145ec0fe779",
        "https://git.kernel.org/stable/c/ed058d735a70f4b063323f1a7bb33cda0f987513",
        "https://lore.kernel.org/linux-cve-announce/2024041034-CVE-2021-47189-a3f4@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2021-47189",
        "https://www.cve.org/CVERecord?id=CVE-2021-47189"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "btrfs: fix memory ordering between normal and ordered work functions",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-04T05:32:07.308000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-821"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-04-10T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nbtrfs: fix memory ordering between normal and ordered work functions\nOrdered work functions aren't guaranteed to be handled by the same thread\nwhich executed the normal work functions. The only way execution between\nnormal/ordered functions is synchronized is via the WORK_DONE_BIT,\nunfortunately the used bitops don't guarantee any ordering whatsoever.\nThis manifested as seemingly inexplicable crashes on ARM64, where\nasync_chunk::inode is seen as non-null in async_cow_submit which causes\nsubmit_compressed_extents to be called and crash occurs because\nasync_chunk::inode suddenly became NULL. The call trace was similar to:\npc : submit_compressed_extents+0x38/0x3d0\nlr : async_cow_submit+0x50/0xd0\nsp : ffff800015d4bc20\n<registers omitted for brevity>\nCall trace:\nsubmit_compressed_extents+0x38/0x3d0\nasync_cow_submit+0x50/0xd0\nrun_ordered_work+0xc8/0x280\nbtrfs_work_helper+0x98/0x250\nprocess_one_work+0x1f0/0x4ac\nworker_thread+0x188/0x504\nkthread+0x110/0x114\nret_from_fork+0x10/0x18\nFix this by adding respective barrier calls which ensure that all\naccesses preceding setting of WORK_DONE_BIT are strictly ordered before\nsetting the flag. At the same time add a read barrier after reading of\nWORK_DONE_BIT in run_ordered_work which ensures all subsequent loads\nwould be strictly ordered after reading the bit. This in turn ensures\nare all accesses before WORK_DONE_BIT are going to be strictly ordered\nbefore any access that can occur in ordered_func.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2021/CVE-2021-47189.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024041034-CVE-2021-47189-a3f4@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2021-47189",
      "https://www.cve.org/CVERecord?id=CVE-2021-47189"
    ],
    "title": "kernel: btrfs: fix memory ordering between normal and ordered work functions",
    "updated": "2024-04-10T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-821"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-04-10T18:56:28.194000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: fix memory ordering between normal and ordered work functions\n\nOrdered work functions aren't guaranteed to be handled by the same thread\nwhich executed the normal work functions. The only way execution between\nnormal/ordered functions is synchronized is via the WORK_DONE_BIT,\nunfortunately the used bitops don't guarantee any ordering whatsoever.\n\nThis manifested as seemingly inexplicable crashes on ARM64, where\nasync_chunk::inode is seen as non-null in async_cow_submit which causes\nsubmit_compressed_extents to be called and crash occurs because\nasync_chunk::inode suddenly became NULL. The call trace was similar to:\n\n    pc : submit_compressed_extents+0x38/0x3d0\n    lr : async_cow_submit+0x50/0xd0\n    sp : ffff800015d4bc20\n\n    <registers omitted for brevity>\n\n    Call trace:\n     submit_compressed_extents+0x38/0x3d0\n     async_cow_submit+0x50/0xd0\n     run_ordered_work+0xc8/0x280\n     btrfs_work_helper+0x98/0x250\n     process_one_work+0x1f0/0x4ac\n     worker_thread+0x188/0x504\n     kthread+0x110/0x114\n     ret_from_fork+0x10/0x18\n\nFix this by adding respective barrier calls which ensure that all\naccesses preceding setting of WORK_DONE_BIT are strictly ordered before\nsetting the flag. At the same time add a read barrier after reading of\nWORK_DONE_BIT in run_ordered_work which ensures all subsequent loads\nwould be strictly ordered after reading the bit. This in turn ensures\nare all accesses before WORK_DONE_BIT are going to be strictly ordered\nbefore any access that can occur in ordered_func.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/45da9c1767ac31857df572f0a909fbe88fd5a7e9",
      "https://git.kernel.org/stable/c/47e6f9f69153247109042010f3a77579e9dc61ff",
      "https://git.kernel.org/stable/c/637d652d351fd4f263ef302dc52f3971d314e500",
      "https://git.kernel.org/stable/c/670f6b3867c8f0f11e5097f353b164cecfec6179",
      "https://git.kernel.org/stable/c/6adbc07ebcaf8bead08b21687d49e0fc94400987",
      "https://git.kernel.org/stable/c/804a9d239ae9cbe88e861a7cd62319cc6ec7b136",
      "https://git.kernel.org/stable/c/bd660a20fea3ec60a49709ef5360f145ec0fe779",
      "https://git.kernel.org/stable/c/ed058d735a70f4b063323f1a7bb33cda0f987513"
    ],
    "title": "btrfs: fix memory ordering between normal and ordered work functions",
    "updated": "2024-08-04T05:32:07.308000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2021/47xxx/CVE-2021-47189.json",
    "weaknesses": []
  }
}