{
  "cve": "CVE-2024-42233",
  "mitre": {
    "cpes": [],
    "created": "2024-08-07T15:14:23.858000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfilemap: replace pte_offset_map() with pte_offset_map_nolock()\n\nThe vmf->ptl in filemap_fault_recheck_pte_none() is still set from\nhandle_pte_fault().  But at the same time, we did a pte_unmap(vmf->pte). \nAfter a pte_unmap(vmf->pte) unmap and rcu_read_unlock(), the page table\nmay be racily changed and vmf->ptl maybe fails to protect the actual page\ntable.  Fix this by replacing pte_offset_map() with\npte_offset_map_nolock().\n\nAs David said, the PTL pointer might be stale so if we continue to use\nit infilemap_fault_recheck_pte_none(), it might trigger UAF.  Also, if\nthe PTL fails, the issue fixed by commit 58f327f2ce80 (\"filemap: avoid\nunnecessary major faults in filemap_fault()\") might reappear.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/42xxx/CVE-2024-42233.json",
    "references": [
      "https://git.kernel.org/stable/c/24be02a42181f0707be0498045c4c4b13273b16d",
      "https://git.kernel.org/stable/c/6a6c2aec1a89506595801b4cf7e8eef035f33748"
    ],
    "title": "filemap: replace pte_offset_map() with pte_offset_map_nolock()",
    "updated": "2024-08-07T15:14:23.858000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*"
    ],
    "created": "2024-08-07T16:15:46.313000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfilemap: replace pte_offset_map() with pte_offset_map_nolock()\n\nThe vmf->ptl in filemap_fault_recheck_pte_none() is still set from\nhandle_pte_fault().  But at the same time, we did a pte_unmap(vmf->pte). \nAfter a pte_unmap(vmf->pte) unmap and rcu_read_unlock(), the page table\nmay be racily changed and vmf->ptl maybe fails to protect the actual page\ntable.  Fix this by replacing pte_offset_map() with\npte_offset_map_nolock().\n\nAs David said, the PTL pointer might be stale so if we continue to use\nit infilemap_fault_recheck_pte_none(), it might trigger UAF.  Also, if\nthe PTL fails, the issue fixed by commit 58f327f2ce80 (\"filemap: avoid\nunnecessary major faults in filemap_fault()\") might reappear.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 3.3,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-42233.json",
    "references": [
      "https://git.kernel.org/stable/c/24be02a42181f0707be0498045c4c4b13273b16d",
      "https://git.kernel.org/stable/c/6a6c2aec1a89506595801b4cf7e8eef035f33748"
    ],
    "title": null,
    "updated": "2024-08-08T14:56:18.620000+00:00",
    "vendors": [
      "linux",
      "linux$PRODUCT$linux_kernel"
    ],
    "weaknesses": [
      "NVD-CWE-noinfo"
    ]
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-08-07T15:30:00+00:00",
        "data": [
          {
            "details": {
              "new": "In the Linux kernel, the following vulnerability has been resolved:\n\nfilemap: replace pte_offset_map() with pte_offset_map_nolock()\n\nThe vmf->ptl in filemap_fault_recheck_pte_none() is still set from\nhandle_pte_fault().  But at the same time, we did a pte_unmap(vmf->pte). \nAfter a pte_unmap(vmf->pte) unmap and rcu_read_unlock(), the page table\nmay be racily changed and vmf->ptl maybe fails to protect the actual page\ntable.  Fix this by replacing pte_offset_map() with\npte_offset_map_nolock().\n\nAs David said, the PTL pointer might be stale so if we continue to use\nit infilemap_fault_recheck_pte_none(), it might trigger UAF.  Also, if\nthe PTL fails, the issue fixed by commit 58f327f2ce80 (\"filemap: avoid\nunnecessary major faults in filemap_fault()\") might reappear.",
              "old": null
            },
            "type": "description"
          },
          {
            "details": {
              "new": "filemap: replace pte_offset_map() with pte_offset_map_nolock()",
              "old": null
            },
            "type": "title"
          },
          {
            "details": {
              "added": [
                "https://git.kernel.org/stable/c/24be02a42181f0707be0498045c4c4b13273b16d",
                "https://git.kernel.org/stable/c/6a6c2aec1a89506595801b4cf7e8eef035f33748"
              ],
              "removed": []
            },
            "type": "references"
          }
        ],
        "id": "282af9cf-070e-4117-9c4c-b5ac623c342c"
      },
      {
        "created": "2024-08-08T15:15:00+00:00",
        "data": [
          {
            "details": [
              "linux",
              "linux$PRODUCT$linux_kernel"
            ],
            "type": "first_time"
          },
          {
            "details": {
              "added": [
                "NVD-CWE-noinfo"
              ],
              "removed": []
            },
            "type": "weaknesses"
          },
          {
            "details": {
              "added": [
                "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*"
              ],
              "removed": []
            },
            "type": "cpes"
          },
          {
            "details": {
              "added": [
                "linux",
                "linux$PRODUCT$linux_kernel"
              ],
              "removed": []
            },
            "type": "vendors"
          },
          {
            "details": {
              "added": {
                "cvssV3_1": {
                  "score": 3.3,
                  "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
                }
              },
              "removed": {},
              "updated": {}
            },
            "type": "metrics"
          }
        ],
        "id": "92b672b6-7fcd-4033-951c-4e538ec9b4b1"
      },
      {
        "created": "2024-08-08T21:30:00+00:00",
        "data": [
          {
            "details": {
              "added": [
                "https://lore.kernel.org/linux-cve-announce/2024080739-CVE-2024-42233-7fc5@gregkh/T",
                "https://nvd.nist.gov/vuln/detail/CVE-2024-42233",
                "https://www.cve.org/CVERecord?id=CVE-2024-42233"
              ],
              "removed": []
            },
            "type": "references"
          },
          {
            "details": {
              "added": {},
              "removed": {},
              "updated": {
                "threat_severity": {
                  "new": "Moderate",
                  "old": null
                }
              }
            },
            "type": "metrics"
          }
        ],
        "id": "bac46834-cbd0-4efc-8ca0-2aebca0ccfdb"
      },
      {
        "created": "2024-08-16T18:45:00+00:00",
        "data": [
          {
            "details": {
              "added": [
                "CWE-99"
              ],
              "removed": []
            },
            "type": "weaknesses"
          }
        ],
        "id": "8cebcf27-cb0f-43e4-9ef0-65730f983562"
      }
    ],
    "cpes": {
      "data": [
        "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2024-08-07T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nfilemap: replace pte_offset_map() with pte_offset_map_nolock()\n\nThe vmf->ptl in filemap_fault_recheck_pte_none() is still set from\nhandle_pte_fault().  But at the same time, we did a pte_unmap(vmf->pte). \nAfter a pte_unmap(vmf->pte) unmap and rcu_read_unlock(), the page table\nmay be racily changed and vmf->ptl maybe fails to protect the actual page\ntable.  Fix this by replacing pte_offset_map() with\npte_offset_map_nolock().\n\nAs David said, the PTL pointer might be stale so if we continue to use\nit infilemap_fault_recheck_pte_none(), it might trigger UAF.  Also, if\nthe PTL fails, the issue fixed by commit 58f327f2ce80 (\"filemap: avoid\nunnecessary major faults in filemap_fault()\") might reappear.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 3.3,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N"
        },
        "provider": "nvd"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/24be02a42181f0707be0498045c4c4b13273b16d",
        "https://git.kernel.org/stable/c/6a6c2aec1a89506595801b4cf7e8eef035f33748",
        "https://lore.kernel.org/linux-cve-announce/2024080739-CVE-2024-42233-7fc5@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-42233",
        "https://www.cve.org/CVERecord?id=CVE-2024-42233"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "filemap: replace pte_offset_map() with pte_offset_map_nolock()",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-08T14:56:18.620000+00:00",
      "provider": "nvd"
    },
    "vendors": {
      "data": [
        "linux",
        "linux$PRODUCT$linux_kernel"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-99",
        "NVD-CWE-noinfo"
      ],
      "providers": [
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-08-07T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nfilemap: replace pte_offset_map() with pte_offset_map_nolock()\nThe vmf->ptl in filemap_fault_recheck_pte_none() is still set from\nhandle_pte_fault().  But at the same time, we did a pte_unmap(vmf->pte). \nAfter a pte_unmap(vmf->pte) unmap and rcu_read_unlock(), the page table\nmay be racily changed and vmf->ptl maybe fails to protect the actual page\ntable.  Fix this by replacing pte_offset_map() with\npte_offset_map_nolock().\nAs David said, the PTL pointer might be stale so if we continue to use\nit infilemap_fault_recheck_pte_none(), it might trigger UAF.  Also, if\nthe PTL fails, the issue fixed by commit 58f327f2ce80 (\"filemap: avoid\nunnecessary major faults in filemap_fault()\") might reappear.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2024/CVE-2024-42233.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024080739-CVE-2024-42233-7fc5@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-42233",
      "https://www.cve.org/CVERecord?id=CVE-2024-42233"
    ],
    "title": "kernel: filemap: replace pte_offset_map() with pte_offset_map_nolock()",
    "updated": "2024-08-07T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-99"
    ]
  }
}