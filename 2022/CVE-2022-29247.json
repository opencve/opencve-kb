{
  "cve": "CVE-2022-29247",
  "mitre": {
    "cpes": [],
    "created": "2022-06-13T21:05:10+00:00",
    "description": "Electron is a framework for writing cross-platform desktop applications using JavaScript (JS), HTML, and CSS. A vulnerability in versions prior to 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 allows a renderer with JS execution to obtain access to a new renderer process with `nodeIntegrationInSubFrames` enabled which in turn allows effective access to `ipcRenderer`. The `nodeIntegrationInSubFrames` option does not implicitly grant Node.js access. Rather, it depends on the existing sandbox setting. If an application is sandboxed, then `nodeIntegrationInSubFrames` just gives access to the sandboxed renderer APIs, which include `ipcRenderer`. If the application then additionally exposes IPC messages without IPC `senderFrame` validation that perform privileged actions or return confidential data this access to `ipcRenderer` can in turn compromise your application / user even with the sandbox enabled. Electron versions 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 contain a fix for this issue. As a workaround, ensure that all IPC message handlers appropriately validate `senderFrame`.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 2.2,
        "vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2022/29xxx/CVE-2022-29247.json",
    "references": [
      "https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7"
    ],
    "title": "Exposure of Resource to Wrong Sphere in Electron",
    "updated": "2024-08-03T06:17:54.477000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-668"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:electronjs:electron:*:*:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta1:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta2:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta3:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta4:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta5:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta6:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta7:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta8:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:16.0.0:beta9:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta1:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta2:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta3:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta4:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta5:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta6:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta7:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta8:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:17.0.0:beta9:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:18.0.0:beta1:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:18.0.0:beta2:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:18.0.0:beta3:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:18.0.0:beta4:*:*:*:*:*:*",
      "cpe:2.3:a:electronjs:electron:18.0.0:beta5:*:*:*:*:*:*"
    ],
    "created": "2022-06-13T21:15:07.763000+00:00",
    "description": "Electron is a framework for writing cross-platform desktop applications using JavaScript (JS), HTML, and CSS. A vulnerability in versions prior to 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 allows a renderer with JS execution to obtain access to a new renderer process with `nodeIntegrationInSubFrames` enabled which in turn allows effective access to `ipcRenderer`. The `nodeIntegrationInSubFrames` option does not implicitly grant Node.js access. Rather, it depends on the existing sandbox setting. If an application is sandboxed, then `nodeIntegrationInSubFrames` just gives access to the sandboxed renderer APIs, which include `ipcRenderer`. If the application then additionally exposes IPC messages without IPC `senderFrame` validation that perform privileged actions or return confidential data this access to `ipcRenderer` can in turn compromise your application / user even with the sandbox enabled. Electron versions 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 contain a fix for this issue. As a workaround, ensure that all IPC message handlers appropriately validate `senderFrame`.",
    "metrics": {
      "cvssV2_0": {
        "score": 6.8,
        "vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2022/CVE-2022-29247.json",
    "references": [
      "https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7"
    ],
    "title": null,
    "updated": "2022-06-27T16:55:17.260000+00:00",
    "vendors": [
      "electronjs",
      "electronjs$PRODUCT$electron"
    ],
    "weaknesses": [
      "CWE-668"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:electronjs:electron:*:*:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta1:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta2:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta3:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta4:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta5:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta6:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta7:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta8:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:16.0.0:beta9:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta1:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta2:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta3:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta4:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta5:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta6:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta7:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta8:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:17.0.0:beta9:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:18.0.0:beta1:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:18.0.0:beta2:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:18.0.0:beta3:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:18.0.0:beta4:*:*:*:*:*:*",
        "cpe:2.3:a:electronjs:electron:18.0.0:beta5:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2022-06-13T21:05:10+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "Electron is a framework for writing cross-platform desktop applications using JavaScript (JS), HTML, and CSS. A vulnerability in versions prior to 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 allows a renderer with JS execution to obtain access to a new renderer process with `nodeIntegrationInSubFrames` enabled which in turn allows effective access to `ipcRenderer`. The `nodeIntegrationInSubFrames` option does not implicitly grant Node.js access. Rather, it depends on the existing sandbox setting. If an application is sandboxed, then `nodeIntegrationInSubFrames` just gives access to the sandboxed renderer APIs, which include `ipcRenderer`. If the application then additionally exposes IPC messages without IPC `senderFrame` validation that perform privileged actions or return confidential data this access to `ipcRenderer` can in turn compromise your application / user even with the sandbox enabled. Electron versions 18.0.0-beta.6, 17.2.0, 16.2.6, and 15.5.5 contain a fix for this issue. As a workaround, ensure that all IPC message handlers appropriately validate `senderFrame`.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 6.8,
          "vector": "AV:N/AC:M/Au:N/C:P/I:P/A:P"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 2.2,
          "vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "Exposure of Resource to Wrong Sphere in Electron",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-03T06:17:54.477000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "electronjs",
        "electronjs$PRODUCT$electron"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-668"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    }
  }
}