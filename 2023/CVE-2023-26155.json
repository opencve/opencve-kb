{
  "cve": "CVE-2023-26155",
  "mitre": {
    "cpes": [],
    "created": "2023-10-14T05:00:00.965000+00:00",
    "description": "All versions of the package node-qpdf are vulnerable to Command Injection such that the package-exported method encrypt() fails to sanitize its parameter input, which later flows into a sensitive command execution API. As a result, attackers may inject malicious commands once they can specify the input pdf file path.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 7.3,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2023/26xxx/CVE-2023-26155.json",
    "references": [
      "https://github.com/nrhirani/node-qpdf/issues/23",
      "https://security.snyk.io/vuln/SNYK-JS-NODEQPDF-5747918"
    ],
    "title": null,
    "updated": "2024-09-17T13:35:42.463000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-78"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:nrhirani:node-qpdf:*:*:*:*:*:*:*:*"
    ],
    "created": "2023-10-14T05:15:55.183000+00:00",
    "description": "All versions of the package node-qpdf are vulnerable to Command Injection such that the package-exported method encrypt() fails to sanitize its parameter input, which later flows into a sensitive command execution API. As a result, attackers may inject malicious commands once they can specify the input pdf file path.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2023/CVE-2023-26155.json",
    "references": [
      "https://github.com/nrhirani/node-qpdf/issues/23",
      "https://security.snyk.io/vuln/SNYK-JS-NODEQPDF-5747918"
    ],
    "title": null,
    "updated": "2023-11-07T04:09:29.567000+00:00",
    "vendors": [
      "nrhirani",
      "nrhirani$PRODUCT$node-qpdf"
    ],
    "weaknesses": [
      "CWE-77",
      "CWE-78"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:nrhirani:node-qpdf:*:*:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2023-10-14T05:00:00.965000+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "All versions of the package node-qpdf are vulnerable to Command Injection such that the package-exported method encrypt() fails to sanitize its parameter input, which later flows into a sensitive command execution API. As a result, attackers may inject malicious commands once they can specify the input pdf file path.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 7.3,
          "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://github.com/nrhirani/node-qpdf/issues/23",
        "https://security.snyk.io/vuln/SNYK-JS-NODEQPDF-5747918"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": null,
      "provider": null
    },
    "updated": {
      "data": "2024-09-17T13:35:42.463000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "nrhirani",
        "nrhirani$PRODUCT$node-qpdf"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-77",
        "CWE-78"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    }
  }
}