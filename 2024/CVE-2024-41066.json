{
  "cve": "CVE-2024-41066",
  "mitre": {
    "cpes": [],
    "created": "2024-07-29T14:57:27.832000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nibmvnic: Add tx check to prevent skb leak\n\nBelow is a summary of how the driver stores a reference to an skb during\ntransmit:\n    tx_buff[free_map[consumer_index]]->skb = new_skb;\n    free_map[consumer_index] = IBMVNIC_INVALID_MAP;\n    consumer_index ++;\nWhere variable data looks like this:\n    free_map == [4, IBMVNIC_INVALID_MAP, IBMVNIC_INVALID_MAP, 0, 3]\n                                               \tconsumer_index^\n    tx_buff == [skb=null, skb=<ptr>, skb=<ptr>, skb=null, skb=null]\n\nThe driver has checks to ensure that free_map[consumer_index] pointed to\na valid index but there was no check to ensure that this index pointed\nto an unused/null skb address. So, if, by some chance, our free_map and\ntx_buff lists become out of sync then we were previously risking an\nskb memory leak. This could then cause tcp congestion control to stop\nsending packets, eventually leading to ETIMEDOUT.\n\nTherefore, add a conditional to ensure that the skb address is null. If\nnot then warn the user (because this is still a bug that should be\npatched) and free the old pointer to prevent memleak/tcp problems.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/41xxx/CVE-2024-41066.json",
    "references": [
      "https://git.kernel.org/stable/c/0983d288caf984de0202c66641577b739caad561",
      "https://git.kernel.org/stable/c/16ad1557cae582e79bb82dddd612d9bdfaa11d4c",
      "https://git.kernel.org/stable/c/267c61c4afed0ff9a2e83462abad3f41d8ca1f06",
      "https://git.kernel.org/stable/c/e7b75def33eae61ddaad6cb616c517dc3882eb2a"
    ],
    "title": "ibmvnic: Add tx check to prevent skb leak",
    "updated": "2024-08-02T04:46:52.379000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-07-29T15:15:14.480000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nibmvnic: Add tx check to prevent skb leak\n\nBelow is a summary of how the driver stores a reference to an skb during\ntransmit:\n    tx_buff[free_map[consumer_index]]->skb = new_skb;\n    free_map[consumer_index] = IBMVNIC_INVALID_MAP;\n    consumer_index ++;\nWhere variable data looks like this:\n    free_map == [4, IBMVNIC_INVALID_MAP, IBMVNIC_INVALID_MAP, 0, 3]\n                                               \tconsumer_index^\n    tx_buff == [skb=null, skb=<ptr>, skb=<ptr>, skb=null, skb=null]\n\nThe driver has checks to ensure that free_map[consumer_index] pointed to\na valid index but there was no check to ensure that this index pointed\nto an unused/null skb address. So, if, by some chance, our free_map and\ntx_buff lists become out of sync then we were previously risking an\nskb memory leak. This could then cause tcp congestion control to stop\nsending packets, eventually leading to ETIMEDOUT.\n\nTherefore, add a conditional to ensure that the skb address is null. If\nnot then warn the user (because this is still a bug that should be\npatched) and free the old pointer to prevent memleak/tcp problems.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-41066.json",
    "references": [
      "https://git.kernel.org/stable/c/0983d288caf984de0202c66641577b739caad561",
      "https://git.kernel.org/stable/c/16ad1557cae582e79bb82dddd612d9bdfaa11d4c",
      "https://git.kernel.org/stable/c/267c61c4afed0ff9a2e83462abad3f41d8ca1f06",
      "https://git.kernel.org/stable/c/e7b75def33eae61ddaad6cb616c517dc3882eb2a"
    ],
    "title": null,
    "updated": "2024-07-29T16:21:52.517000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-08-19T22:30:00+00:00",
        "data": [
          {
            "details": {
              "added": [
                "CWE-200"
              ],
              "removed": []
            },
            "type": "weaknesses"
          },
          {
            "details": {
              "added": {},
              "removed": {},
              "updated": {
                "cvssV3_1": {
                  "new": {
                    "score": 6.4,
                    "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H"
                  },
                  "old": {
                    "score": 7.0,
                    "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H"
                  }
                },
                "threat_severity": {
                  "new": "Low",
                  "old": "Moderate"
                }
              }
            },
            "type": "metrics"
          }
        ],
        "id": "9b637751-e505-4469-8be6-acf080179d39"
      }
    ],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-07-29T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nibmvnic: Add tx check to prevent skb leak\n\nBelow is a summary of how the driver stores a reference to an skb during\ntransmit:\n    tx_buff[free_map[consumer_index]]->skb = new_skb;\n    free_map[consumer_index] = IBMVNIC_INVALID_MAP;\n    consumer_index ++;\nWhere variable data looks like this:\n    free_map == [4, IBMVNIC_INVALID_MAP, IBMVNIC_INVALID_MAP, 0, 3]\n                                               \tconsumer_index^\n    tx_buff == [skb=null, skb=<ptr>, skb=<ptr>, skb=null, skb=null]\n\nThe driver has checks to ensure that free_map[consumer_index] pointed to\na valid index but there was no check to ensure that this index pointed\nto an unused/null skb address. So, if, by some chance, our free_map and\ntx_buff lists become out of sync then we were previously risking an\nskb memory leak. This could then cause tcp congestion control to stop\nsending packets, eventually leading to ETIMEDOUT.\n\nTherefore, add a conditional to ensure that the skb address is null. If\nnot then warn the user (because this is still a bug that should be\npatched) and free the old pointer to prevent memleak/tcp problems.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 6.4,
          "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Low",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/0983d288caf984de0202c66641577b739caad561",
        "https://git.kernel.org/stable/c/16ad1557cae582e79bb82dddd612d9bdfaa11d4c",
        "https://git.kernel.org/stable/c/267c61c4afed0ff9a2e83462abad3f41d8ca1f06",
        "https://git.kernel.org/stable/c/e7b75def33eae61ddaad6cb616c517dc3882eb2a",
        "https://lore.kernel.org/linux-cve-announce/2024072907-CVE-2024-41066-0a52@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-41066",
        "https://www.cve.org/CVERecord?id=CVE-2024-41066"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "ibmvnic: Add tx check to prevent skb leak",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T04:46:52.379000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-200"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-07-29T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nibmvnic: Add tx check to prevent skb leak\nBelow is a summary of how the driver stores a reference to an skb during\ntransmit:\ntx_buff[free_map[consumer_index]]->skb = new_skb;\nfree_map[consumer_index] = IBMVNIC_INVALID_MAP;\nconsumer_index ++;\nWhere variable data looks like this:\nfree_map == [4, IBMVNIC_INVALID_MAP, IBMVNIC_INVALID_MAP, 0, 3]\nconsumer_index^\ntx_buff == [skb=null, skb=<ptr>, skb=<ptr>, skb=null, skb=null]\nThe driver has checks to ensure that free_map[consumer_index] pointed to\na valid index but there was no check to ensure that this index pointed\nto an unused/null skb address. So, if, by some chance, our free_map and\ntx_buff lists become out of sync then we were previously risking an\nskb memory leak. This could then cause tcp congestion control to stop\nsending packets, eventually leading to ETIMEDOUT.\nTherefore, add a conditional to ensure that the skb address is null. If\nnot then warn the user (because this is still a bug that should be\npatched) and free the old pointer to prevent memleak/tcp problems.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 6.4,
        "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H"
      },
      "threat_severity": "Low"
    },
    "redhat_repo_path": "2024/CVE-2024-41066.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024072907-CVE-2024-41066-0a52@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-41066",
      "https://www.cve.org/CVERecord?id=CVE-2024-41066"
    ],
    "title": "kernel: ibmvnic: Add tx check to prevent skb leak",
    "updated": "2024-07-29T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-200"
    ]
  }
}