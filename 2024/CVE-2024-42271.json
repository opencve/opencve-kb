{
  "cve": "CVE-2024-42271",
  "mitre": {
    "cpes": [],
    "created": "2024-08-17T08:54:26.048000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/iucv: fix use after free in iucv_sock_close()\n\niucv_sever_path() is called from process context and from bh context.\niucv->path is used as indicator whether somebody else is taking care of\nsevering the path (or it is already removed / never existed).\nThis needs to be done with atomic compare and swap, otherwise there is a\nsmall window where iucv_sock_close() will try to work with a path that has\nalready been severed and freed by iucv_callback_connrej() called by\niucv_tasklet_fn().\n\nExample:\n[452744.123844] Call Trace:\n[452744.123845] ([<0000001e87f03880>] 0x1e87f03880)\n[452744.123966]  [<00000000d593001e>] iucv_path_sever+0x96/0x138\n[452744.124330]  [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv]\n[452744.124336]  [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv]\n[452744.124341]  [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv]\n[452744.124345]  [<00000000d574794e>] __sock_release+0x5e/0xe8\n[452744.124815]  [<00000000d5747a0c>] sock_close+0x34/0x48\n[452744.124820]  [<00000000d5421642>] __fput+0xba/0x268\n[452744.124826]  [<00000000d51b382c>] task_work_run+0xbc/0xf0\n[452744.124832]  [<00000000d5145710>] do_notify_resume+0x88/0x90\n[452744.124841]  [<00000000d5978096>] system_call+0xe2/0x2c8\n[452744.125319] Last Breaking-Event-Address:\n[452744.125321]  [<00000000d5930018>] iucv_path_sever+0x90/0x138\n[452744.125324]\n[452744.125325] Kernel panic - not syncing: Fatal exception in interrupt\n\nNote that bh_lock_sock() is not serializing the tasklet context against\nprocess context, because the check for sock_owned_by_user() and\ncorresponding handling is missing.\n\nIdeas for a future clean-up patch:\nA) Correct usage of bh_lock_sock() in tasklet context, as described in\nRe-enqueue, if needed. This may require adding return values to the\ntasklet functions and thus changes to all users of iucv.\n\nB) Change iucv tasklet into worker and use only lock_sock() in af_iucv.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/42xxx/CVE-2024-42271.json",
    "references": [
      "https://git.kernel.org/stable/c/01437282fd3904810603f3dc98d2cac6b8b6fc84",
      "https://git.kernel.org/stable/c/37652fbef9809411cea55ea5fa1a170e299efcd0",
      "https://git.kernel.org/stable/c/69620522c48ce8215e5eb55ffbab8cafee8f407d",
      "https://git.kernel.org/stable/c/84f40b46787ecb67c7ad08a5bb1376141fa10c01",
      "https://git.kernel.org/stable/c/8b424c9e44111c5a76f41c6b741f8d4c4179d876",
      "https://git.kernel.org/stable/c/ac758e1f663fe9bc64f6b47212a2aa18697524f5",
      "https://git.kernel.org/stable/c/c65f72eec60a34ace031426e04e9aff8e5f04895",
      "https://git.kernel.org/stable/c/f558120cd709682b739207b48cf7479fd9568431"
    ],
    "title": "net/iucv: fix use after free in iucv_sock_close()",
    "updated": "2024-09-15T17:52:36.238000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
      "cpe:2.3:o:linux:linux_kernel:6.11:rc1:*:*:*:*:*:*"
    ],
    "created": "2024-08-17T09:15:08.307000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/iucv: fix use after free in iucv_sock_close()\n\niucv_sever_path() is called from process context and from bh context.\niucv->path is used as indicator whether somebody else is taking care of\nsevering the path (or it is already removed / never existed).\nThis needs to be done with atomic compare and swap, otherwise there is a\nsmall window where iucv_sock_close() will try to work with a path that has\nalready been severed and freed by iucv_callback_connrej() called by\niucv_tasklet_fn().\n\nExample:\n[452744.123844] Call Trace:\n[452744.123845] ([<0000001e87f03880>] 0x1e87f03880)\n[452744.123966]  [<00000000d593001e>] iucv_path_sever+0x96/0x138\n[452744.124330]  [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv]\n[452744.124336]  [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv]\n[452744.124341]  [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv]\n[452744.124345]  [<00000000d574794e>] __sock_release+0x5e/0xe8\n[452744.124815]  [<00000000d5747a0c>] sock_close+0x34/0x48\n[452744.124820]  [<00000000d5421642>] __fput+0xba/0x268\n[452744.124826]  [<00000000d51b382c>] task_work_run+0xbc/0xf0\n[452744.124832]  [<00000000d5145710>] do_notify_resume+0x88/0x90\n[452744.124841]  [<00000000d5978096>] system_call+0xe2/0x2c8\n[452744.125319] Last Breaking-Event-Address:\n[452744.125321]  [<00000000d5930018>] iucv_path_sever+0x90/0x138\n[452744.125324]\n[452744.125325] Kernel panic - not syncing: Fatal exception in interrupt\n\nNote that bh_lock_sock() is not serializing the tasklet context against\nprocess context, because the check for sock_owned_by_user() and\ncorresponding handling is missing.\n\nIdeas for a future clean-up patch:\nA) Correct usage of bh_lock_sock() in tasklet context, as described in\nRe-enqueue, if needed. This may require adding return values to the\ntasklet functions and thus changes to all users of iucv.\n\nB) Change iucv tasklet into worker and use only lock_sock() in af_iucv.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 7.8,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-42271.json",
    "references": [
      "https://git.kernel.org/stable/c/01437282fd3904810603f3dc98d2cac6b8b6fc84",
      "https://git.kernel.org/stable/c/37652fbef9809411cea55ea5fa1a170e299efcd0",
      "https://git.kernel.org/stable/c/69620522c48ce8215e5eb55ffbab8cafee8f407d",
      "https://git.kernel.org/stable/c/84f40b46787ecb67c7ad08a5bb1376141fa10c01",
      "https://git.kernel.org/stable/c/8b424c9e44111c5a76f41c6b741f8d4c4179d876",
      "https://git.kernel.org/stable/c/ac758e1f663fe9bc64f6b47212a2aa18697524f5",
      "https://git.kernel.org/stable/c/c65f72eec60a34ace031426e04e9aff8e5f04895",
      "https://git.kernel.org/stable/c/f558120cd709682b739207b48cf7479fd9568431"
    ],
    "title": null,
    "updated": "2024-08-19T20:03:31.840000+00:00",
    "vendors": [
      "linux",
      "linux$PRODUCT$linux_kernel"
    ],
    "weaknesses": [
      "CWE-416"
    ]
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-08-17T09:00:00+00:00",
        "data": [
          {
            "details": {
              "new": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/iucv: fix use after free in iucv_sock_close()\n\niucv_sever_path() is called from process context and from bh context.\niucv->path is used as indicator whether somebody else is taking care of\nsevering the path (or it is already removed / never existed).\nThis needs to be done with atomic compare and swap, otherwise there is a\nsmall window where iucv_sock_close() will try to work with a path that has\nalready been severed and freed by iucv_callback_connrej() called by\niucv_tasklet_fn().\n\nExample:\n[452744.123844] Call Trace:\n[452744.123845] ([<0000001e87f03880>] 0x1e87f03880)\n[452744.123966]  [<00000000d593001e>] iucv_path_sever+0x96/0x138\n[452744.124330]  [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv]\n[452744.124336]  [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv]\n[452744.124341]  [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv]\n[452744.124345]  [<00000000d574794e>] __sock_release+0x5e/0xe8\n[452744.124815]  [<00000000d5747a0c>] sock_close+0x34/0x48\n[452744.124820]  [<00000000d5421642>] __fput+0xba/0x268\n[452744.124826]  [<00000000d51b382c>] task_work_run+0xbc/0xf0\n[452744.124832]  [<00000000d5145710>] do_notify_resume+0x88/0x90\n[452744.124841]  [<00000000d5978096>] system_call+0xe2/0x2c8\n[452744.125319] Last Breaking-Event-Address:\n[452744.125321]  [<00000000d5930018>] iucv_path_sever+0x90/0x138\n[452744.125324]\n[452744.125325] Kernel panic - not syncing: Fatal exception in interrupt\n\nNote that bh_lock_sock() is not serializing the tasklet context against\nprocess context, because the check for sock_owned_by_user() and\ncorresponding handling is missing.\n\nIdeas for a future clean-up patch:\nA) Correct usage of bh_lock_sock() in tasklet context, as described in\nRe-enqueue, if needed. This may require adding return values to the\ntasklet functions and thus changes to all users of iucv.\n\nB) Change iucv tasklet into worker and use only lock_sock() in af_iucv.",
              "old": null
            },
            "type": "description"
          },
          {
            "details": {
              "new": "net/iucv: fix use after free in iucv_sock_close()",
              "old": null
            },
            "type": "title"
          },
          {
            "details": {
              "added": [
                "https://git.kernel.org/stable/c/01437282fd3904810603f3dc98d2cac6b8b6fc84",
                "https://git.kernel.org/stable/c/69620522c48ce8215e5eb55ffbab8cafee8f407d",
                "https://git.kernel.org/stable/c/8b424c9e44111c5a76f41c6b741f8d4c4179d876",
                "https://git.kernel.org/stable/c/f558120cd709682b739207b48cf7479fd9568431"
              ],
              "removed": []
            },
            "type": "references"
          }
        ],
        "id": "52ba3e08-ac5e-4c21-9f51-586f1144af47"
      },
      {
        "created": "2024-08-19T04:45:00+00:00",
        "data": [
          {
            "details": {
              "added": [
                "https://git.kernel.org/stable/c/37652fbef9809411cea55ea5fa1a170e299efcd0",
                "https://git.kernel.org/stable/c/84f40b46787ecb67c7ad08a5bb1376141fa10c01",
                "https://git.kernel.org/stable/c/ac758e1f663fe9bc64f6b47212a2aa18697524f5",
                "https://git.kernel.org/stable/c/c65f72eec60a34ace031426e04e9aff8e5f04895"
              ],
              "removed": []
            },
            "type": "references"
          }
        ],
        "id": "59e86957-ee87-4b3b-8845-0cd0ae6c437f"
      },
      {
        "created": "2024-08-19T20:30:00+00:00",
        "data": [
          {
            "details": [
              "linux",
              "linux$PRODUCT$linux_kernel"
            ],
            "type": "first_time"
          },
          {
            "details": {
              "added": [
                "CWE-416"
              ],
              "removed": []
            },
            "type": "weaknesses"
          },
          {
            "details": {
              "added": [
                "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
                "cpe:2.3:o:linux:linux_kernel:6.11:rc1:*:*:*:*:*:*"
              ],
              "removed": []
            },
            "type": "cpes"
          },
          {
            "details": {
              "added": [
                "linux",
                "linux$PRODUCT$linux_kernel"
              ],
              "removed": []
            },
            "type": "vendors"
          },
          {
            "details": {
              "added": {
                "cvssV3_1": {
                  "score": 7.8,
                  "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
                }
              },
              "removed": {},
              "updated": {}
            },
            "type": "metrics"
          }
        ],
        "id": "42bbc483-3c01-490e-b350-ac9f9678eb32"
      },
      {
        "created": "2024-08-20T21:30:00+00:00",
        "data": [
          {
            "details": {
              "added": [
                "https://lore.kernel.org/linux-cve-announce/2024081739-CVE-2024-42271-c501@gregkh/T",
                "https://nvd.nist.gov/vuln/detail/CVE-2024-42271",
                "https://www.cve.org/CVERecord?id=CVE-2024-42271"
              ],
              "removed": []
            },
            "type": "references"
          },
          {
            "details": {
              "added": {},
              "removed": {},
              "updated": {
                "threat_severity": {
                  "new": "Moderate",
                  "old": null
                }
              }
            },
            "type": "metrics"
          }
        ],
        "id": "cbc76e01-7802-4d37-a54a-df6fbe97326b"
      },
      {
        "created": "2024-09-11T13:30:00+00:00",
        "data": [
          {
            "details": {
              "added": {
                "ssvc": {
                  "options": {
                    "Automatable": "no",
                    "Exploitation": "none",
                    "Technical Impact": "partial"
                  },
                  "version": "2.0.3"
                }
              },
              "removed": {},
              "updated": {}
            },
            "type": "metrics"
          }
        ],
        "id": "ed1e4015-f6f2-41ee-8fe4-853774868ea3"
      }
    ],
    "cpes": {
      "data": [
        "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
        "cpe:2.3:o:linux:linux_kernel:6.11:rc1:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2024-08-17T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/iucv: fix use after free in iucv_sock_close()\n\niucv_sever_path() is called from process context and from bh context.\niucv->path is used as indicator whether somebody else is taking care of\nsevering the path (or it is already removed / never existed).\nThis needs to be done with atomic compare and swap, otherwise there is a\nsmall window where iucv_sock_close() will try to work with a path that has\nalready been severed and freed by iucv_callback_connrej() called by\niucv_tasklet_fn().\n\nExample:\n[452744.123844] Call Trace:\n[452744.123845] ([<0000001e87f03880>] 0x1e87f03880)\n[452744.123966]  [<00000000d593001e>] iucv_path_sever+0x96/0x138\n[452744.124330]  [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv]\n[452744.124336]  [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv]\n[452744.124341]  [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv]\n[452744.124345]  [<00000000d574794e>] __sock_release+0x5e/0xe8\n[452744.124815]  [<00000000d5747a0c>] sock_close+0x34/0x48\n[452744.124820]  [<00000000d5421642>] __fput+0xba/0x268\n[452744.124826]  [<00000000d51b382c>] task_work_run+0xbc/0xf0\n[452744.124832]  [<00000000d5145710>] do_notify_resume+0x88/0x90\n[452744.124841]  [<00000000d5978096>] system_call+0xe2/0x2c8\n[452744.125319] Last Breaking-Event-Address:\n[452744.125321]  [<00000000d5930018>] iucv_path_sever+0x90/0x138\n[452744.125324]\n[452744.125325] Kernel panic - not syncing: Fatal exception in interrupt\n\nNote that bh_lock_sock() is not serializing the tasklet context against\nprocess context, because the check for sock_owned_by_user() and\ncorresponding handling is missing.\n\nIdeas for a future clean-up patch:\nA) Correct usage of bh_lock_sock() in tasklet context, as described in\nRe-enqueue, if needed. This may require adding return values to the\ntasklet functions and thus changes to all users of iucv.\n\nB) Change iucv tasklet into worker and use only lock_sock() in af_iucv.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 7.8,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H"
        },
        "provider": "nvd"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {
          "options": {
            "Automatable": "no",
            "Exploitation": "none",
            "Technical Impact": "partial"
          },
          "version": "2.0.3"
        },
        "provider": "vulnrichment"
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/01437282fd3904810603f3dc98d2cac6b8b6fc84",
        "https://git.kernel.org/stable/c/37652fbef9809411cea55ea5fa1a170e299efcd0",
        "https://git.kernel.org/stable/c/69620522c48ce8215e5eb55ffbab8cafee8f407d",
        "https://git.kernel.org/stable/c/84f40b46787ecb67c7ad08a5bb1376141fa10c01",
        "https://git.kernel.org/stable/c/8b424c9e44111c5a76f41c6b741f8d4c4179d876",
        "https://git.kernel.org/stable/c/ac758e1f663fe9bc64f6b47212a2aa18697524f5",
        "https://git.kernel.org/stable/c/c65f72eec60a34ace031426e04e9aff8e5f04895",
        "https://git.kernel.org/stable/c/f558120cd709682b739207b48cf7479fd9568431",
        "https://lore.kernel.org/linux-cve-announce/2024081739-CVE-2024-42271-c501@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-42271",
        "https://www.cve.org/CVERecord?id=CVE-2024-42271"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "net/iucv: fix use after free in iucv_sock_close()",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-09-15T17:52:36.238000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "linux",
        "linux$PRODUCT$linux_kernel"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-416"
      ],
      "providers": [
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-08-17T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nnet/iucv: fix use after free in iucv_sock_close()\niucv_sever_path() is called from process context and from bh context.\niucv->path is used as indicator whether somebody else is taking care of\nsevering the path (or it is already removed / never existed).\nThis needs to be done with atomic compare and swap, otherwise there is a\nsmall window where iucv_sock_close() will try to work with a path that has\nalready been severed and freed by iucv_callback_connrej() called by\niucv_tasklet_fn().\nExample:\n[452744.123844] Call Trace:\n[452744.123845] ([<0000001e87f03880>] 0x1e87f03880)\n[452744.123966]  [<00000000d593001e>] iucv_path_sever+0x96/0x138\n[452744.124330]  [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv]\n[452744.124336]  [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv]\n[452744.124341]  [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv]\n[452744.124345]  [<00000000d574794e>] __sock_release+0x5e/0xe8\n[452744.124815]  [<00000000d5747a0c>] sock_close+0x34/0x48\n[452744.124820]  [<00000000d5421642>] __fput+0xba/0x268\n[452744.124826]  [<00000000d51b382c>] task_work_run+0xbc/0xf0\n[452744.124832]  [<00000000d5145710>] do_notify_resume+0x88/0x90\n[452744.124841]  [<00000000d5978096>] system_call+0xe2/0x2c8\n[452744.125319] Last Breaking-Event-Address:\n[452744.125321]  [<00000000d5930018>] iucv_path_sever+0x90/0x138\n[452744.125324]\n[452744.125325] Kernel panic - not syncing: Fatal exception in interrupt\nNote that bh_lock_sock() is not serializing the tasklet context against\nprocess context, because the check for sock_owned_by_user() and\ncorresponding handling is missing.\nIdeas for a future clean-up patch:\nA) Correct usage of bh_lock_sock() in tasklet context, as described in\nRe-enqueue, if needed. This may require adding return values to the\ntasklet functions and thus changes to all users of iucv.\nB) Change iucv tasklet into worker and use only lock_sock() in af_iucv.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 6.3,
        "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2024/CVE-2024-42271.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024081739-CVE-2024-42271-c501@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-42271",
      "https://www.cve.org/CVERecord?id=CVE-2024-42271"
    ],
    "title": "kernel: net/iucv: fix use after free in iucv_sock_close()",
    "updated": "2024-08-17T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-416"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-08-17T08:54:26.048000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/iucv: fix use after free in iucv_sock_close()\n\niucv_sever_path() is called from process context and from bh context.\niucv->path is used as indicator whether somebody else is taking care of\nsevering the path (or it is already removed / never existed).\nThis needs to be done with atomic compare and swap, otherwise there is a\nsmall window where iucv_sock_close() will try to work with a path that has\nalready been severed and freed by iucv_callback_connrej() called by\niucv_tasklet_fn().\n\nExample:\n[452744.123844] Call Trace:\n[452744.123845] ([<0000001e87f03880>] 0x1e87f03880)\n[452744.123966]  [<00000000d593001e>] iucv_path_sever+0x96/0x138\n[452744.124330]  [<000003ff801ddbca>] iucv_sever_path+0xc2/0xd0 [af_iucv]\n[452744.124336]  [<000003ff801e01b6>] iucv_sock_close+0xa6/0x310 [af_iucv]\n[452744.124341]  [<000003ff801e08cc>] iucv_sock_release+0x3c/0xd0 [af_iucv]\n[452744.124345]  [<00000000d574794e>] __sock_release+0x5e/0xe8\n[452744.124815]  [<00000000d5747a0c>] sock_close+0x34/0x48\n[452744.124820]  [<00000000d5421642>] __fput+0xba/0x268\n[452744.124826]  [<00000000d51b382c>] task_work_run+0xbc/0xf0\n[452744.124832]  [<00000000d5145710>] do_notify_resume+0x88/0x90\n[452744.124841]  [<00000000d5978096>] system_call+0xe2/0x2c8\n[452744.125319] Last Breaking-Event-Address:\n[452744.125321]  [<00000000d5930018>] iucv_path_sever+0x90/0x138\n[452744.125324]\n[452744.125325] Kernel panic - not syncing: Fatal exception in interrupt\n\nNote that bh_lock_sock() is not serializing the tasklet context against\nprocess context, because the check for sock_owned_by_user() and\ncorresponding handling is missing.\n\nIdeas for a future clean-up patch:\nA) Correct usage of bh_lock_sock() in tasklet context, as described in\nRe-enqueue, if needed. This may require adding return values to the\ntasklet functions and thus changes to all users of iucv.\n\nB) Change iucv tasklet into worker and use only lock_sock() in af_iucv.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {
        "options": {
          "Automatable": "no",
          "Exploitation": "none",
          "Technical Impact": "partial"
        },
        "version": "2.0.3"
      }
    },
    "references": [],
    "title": "net/iucv: fix use after free in iucv_sock_close()",
    "updated": "2024-09-11T12:42:23.896000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2024/42xxx/CVE-2024-42271.json",
    "weaknesses": []
  }
}