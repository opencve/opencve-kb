{
  "cve": "CVE-2021-46999",
  "mitre": {
    "cpes": [],
    "created": "2024-02-28T08:13:22.256000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nsctp: do asoc update earlier in sctp_sf_do_dupcook_a\n\nThere's a panic that occurs in a few of envs, the call trace is as below:\n\n  [] general protection fault, ... 0x29acd70f1000a: 0000 [#1] SMP PTI\n  [] RIP: 0010:sctp_ulpevent_notify_peer_addr_change+0x4b/0x1fa [sctp]\n  []  sctp_assoc_control_transport+0x1b9/0x210 [sctp]\n  []  sctp_do_8_2_transport_strike.isra.16+0x15c/0x220 [sctp]\n  []  sctp_cmd_interpreter.isra.21+0x1231/0x1a10 [sctp]\n  []  sctp_do_sm+0xc3/0x2a0 [sctp]\n  []  sctp_generate_timeout_event+0x81/0xf0 [sctp]\n\nThis is caused by a transport use-after-free issue. When processing a\nduplicate COOKIE-ECHO chunk in sctp_sf_do_dupcook_a(), both COOKIE-ACK\nand SHUTDOWN chunks are allocated with the transort from the new asoc.\nHowever, later in the sideeffect machine, the old asoc is used to send\nthem out and old asoc's shutdown_last_sent_to is set to the transport\nthat SHUTDOWN chunk attached to in sctp_cmd_setup_t2(), which actually\nbelongs to the new asoc. After the new_asoc is freed and the old asoc\nT2 timeout, the old asoc's shutdown_last_sent_to that is already freed\nwould be accessed in sctp_sf_t2_timer_expire().\n\nThanks Alexander and Jere for helping dig into this issue.\n\nTo fix it, this patch is to do the asoc update first, then allocate\nthe COOKIE-ACK and SHUTDOWN chunks with the 'updated' old asoc. This\nwould make more sense, as a chunk from an asoc shouldn't be sent out\nwith another asoc. We had fixed quite a few issues caused by this.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/46xxx/CVE-2021-46999.json",
    "references": [
      "https://git.kernel.org/stable/c/0bfd913c2121b3d553bfd52810fe6061d542d625",
      "https://git.kernel.org/stable/c/35b4f24415c854cd718ccdf38dbea6297f010aae",
      "https://git.kernel.org/stable/c/61b877bad9bb0d82b7d8841be50872557090a704",
      "https://git.kernel.org/stable/c/b1b31948c0af44628e43353828453461bb74098f",
      "https://git.kernel.org/stable/c/d624f2991b977821375fbd56c91b0c91d456a697",
      "https://git.kernel.org/stable/c/f01988ecf3654f805282dce2d3bb9afe68d2691e"
    ],
    "title": "sctp: do asoc update earlier in sctp_sf_do_dupcook_a",
    "updated": "2024-08-04T05:24:37.916000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-02-28T09:15:38.130000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nsctp: do asoc update earlier in sctp_sf_do_dupcook_a\n\nThere's a panic that occurs in a few of envs, the call trace is as below:\n\n  [] general protection fault, ... 0x29acd70f1000a: 0000 [#1] SMP PTI\n  [] RIP: 0010:sctp_ulpevent_notify_peer_addr_change+0x4b/0x1fa [sctp]\n  []  sctp_assoc_control_transport+0x1b9/0x210 [sctp]\n  []  sctp_do_8_2_transport_strike.isra.16+0x15c/0x220 [sctp]\n  []  sctp_cmd_interpreter.isra.21+0x1231/0x1a10 [sctp]\n  []  sctp_do_sm+0xc3/0x2a0 [sctp]\n  []  sctp_generate_timeout_event+0x81/0xf0 [sctp]\n\nThis is caused by a transport use-after-free issue. When processing a\nduplicate COOKIE-ECHO chunk in sctp_sf_do_dupcook_a(), both COOKIE-ACK\nand SHUTDOWN chunks are allocated with the transort from the new asoc.\nHowever, later in the sideeffect machine, the old asoc is used to send\nthem out and old asoc's shutdown_last_sent_to is set to the transport\nthat SHUTDOWN chunk attached to in sctp_cmd_setup_t2(), which actually\nbelongs to the new asoc. After the new_asoc is freed and the old asoc\nT2 timeout, the old asoc's shutdown_last_sent_to that is already freed\nwould be accessed in sctp_sf_t2_timer_expire().\n\nThanks Alexander and Jere for helping dig into this issue.\n\nTo fix it, this patch is to do the asoc update first, then allocate\nthe COOKIE-ACK and SHUTDOWN chunks with the 'updated' old asoc. This\nwould make more sense, as a chunk from an asoc shouldn't be sent out\nwith another asoc. We had fixed quite a few issues caused by this.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-46999.json",
    "references": [
      "https://git.kernel.org/stable/c/0bfd913c2121b3d553bfd52810fe6061d542d625",
      "https://git.kernel.org/stable/c/35b4f24415c854cd718ccdf38dbea6297f010aae",
      "https://git.kernel.org/stable/c/61b877bad9bb0d82b7d8841be50872557090a704",
      "https://git.kernel.org/stable/c/b1b31948c0af44628e43353828453461bb74098f",
      "https://git.kernel.org/stable/c/d624f2991b977821375fbd56c91b0c91d456a697",
      "https://git.kernel.org/stable/c/f01988ecf3654f805282dce2d3bb9afe68d2691e"
    ],
    "title": null,
    "updated": "2024-02-28T14:06:45.783000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-02-28T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nsctp: do asoc update earlier in sctp_sf_do_dupcook_a\n\nThere's a panic that occurs in a few of envs, the call trace is as below:\n\n  [] general protection fault, ... 0x29acd70f1000a: 0000 [#1] SMP PTI\n  [] RIP: 0010:sctp_ulpevent_notify_peer_addr_change+0x4b/0x1fa [sctp]\n  []  sctp_assoc_control_transport+0x1b9/0x210 [sctp]\n  []  sctp_do_8_2_transport_strike.isra.16+0x15c/0x220 [sctp]\n  []  sctp_cmd_interpreter.isra.21+0x1231/0x1a10 [sctp]\n  []  sctp_do_sm+0xc3/0x2a0 [sctp]\n  []  sctp_generate_timeout_event+0x81/0xf0 [sctp]\n\nThis is caused by a transport use-after-free issue. When processing a\nduplicate COOKIE-ECHO chunk in sctp_sf_do_dupcook_a(), both COOKIE-ACK\nand SHUTDOWN chunks are allocated with the transort from the new asoc.\nHowever, later in the sideeffect machine, the old asoc is used to send\nthem out and old asoc's shutdown_last_sent_to is set to the transport\nthat SHUTDOWN chunk attached to in sctp_cmd_setup_t2(), which actually\nbelongs to the new asoc. After the new_asoc is freed and the old asoc\nT2 timeout, the old asoc's shutdown_last_sent_to that is already freed\nwould be accessed in sctp_sf_t2_timer_expire().\n\nThanks Alexander and Jere for helping dig into this issue.\n\nTo fix it, this patch is to do the asoc update first, then allocate\nthe COOKIE-ACK and SHUTDOWN chunks with the 'updated' old asoc. This\nwould make more sense, as a chunk from an asoc shouldn't be sent out\nwith another asoc. We had fixed quite a few issues caused by this.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.5,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/0bfd913c2121b3d553bfd52810fe6061d542d625",
        "https://git.kernel.org/stable/c/35b4f24415c854cd718ccdf38dbea6297f010aae",
        "https://git.kernel.org/stable/c/61b877bad9bb0d82b7d8841be50872557090a704",
        "https://git.kernel.org/stable/c/b1b31948c0af44628e43353828453461bb74098f",
        "https://git.kernel.org/stable/c/d624f2991b977821375fbd56c91b0c91d456a697",
        "https://git.kernel.org/stable/c/f01988ecf3654f805282dce2d3bb9afe68d2691e",
        "https://lore.kernel.org/linux-cve-announce/2024022828-CVE-2021-46999-d408@gregkh/T/#u",
        "https://nvd.nist.gov/vuln/detail/CVE-2021-46999",
        "https://www.cve.org/CVERecord?id=CVE-2021-46999"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "sctp: do asoc update earlier in sctp_sf_do_dupcook_a",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-04T05:24:37.916000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-416"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-02-28T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nsctp: do asoc update earlier in sctp_sf_do_dupcook_a\nThere's a panic that occurs in a few of envs, the call trace is as below:\n[] general protection fault, ... 0x29acd70f1000a: 0000 [#1] SMP PTI\n[] RIP: 0010:sctp_ulpevent_notify_peer_addr_change+0x4b/0x1fa [sctp]\n[]  sctp_assoc_control_transport+0x1b9/0x210 [sctp]\n[]  sctp_do_8_2_transport_strike.isra.16+0x15c/0x220 [sctp]\n[]  sctp_cmd_interpreter.isra.21+0x1231/0x1a10 [sctp]\n[]  sctp_do_sm+0xc3/0x2a0 [sctp]\n[]  sctp_generate_timeout_event+0x81/0xf0 [sctp]\nThis is caused by a transport use-after-free issue. When processing a\nduplicate COOKIE-ECHO chunk in sctp_sf_do_dupcook_a(), both COOKIE-ACK\nand SHUTDOWN chunks are allocated with the transort from the new asoc.\nHowever, later in the sideeffect machine, the old asoc is used to send\nthem out and old asoc's shutdown_last_sent_to is set to the transport\nthat SHUTDOWN chunk attached to in sctp_cmd_setup_t2(), which actually\nbelongs to the new asoc. After the new_asoc is freed and the old asoc\nT2 timeout, the old asoc's shutdown_last_sent_to that is already freed\nwould be accessed in sctp_sf_t2_timer_expire().\nThanks Alexander and Jere for helping dig into this issue.\nTo fix it, this patch is to do the asoc update first, then allocate\nthe COOKIE-ACK and SHUTDOWN chunks with the 'updated' old asoc. This\nwould make more sense, as a chunk from an asoc shouldn't be sent out\nwith another asoc. We had fixed quite a few issues caused by this.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2021/CVE-2021-46999.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024022828-CVE-2021-46999-d408@gregkh/T/#u",
      "https://nvd.nist.gov/vuln/detail/CVE-2021-46999",
      "https://www.cve.org/CVERecord?id=CVE-2021-46999"
    ],
    "title": "kernel: sctp: do asoc update earlier in sctp_sf_do_dupcook_a",
    "updated": "2024-02-28T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-416"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-02-28T08:13:22.256000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nsctp: do asoc update earlier in sctp_sf_do_dupcook_a\n\nThere's a panic that occurs in a few of envs, the call trace is as below:\n\n  [] general protection fault, ... 0x29acd70f1000a: 0000 [#1] SMP PTI\n  [] RIP: 0010:sctp_ulpevent_notify_peer_addr_change+0x4b/0x1fa [sctp]\n  []  sctp_assoc_control_transport+0x1b9/0x210 [sctp]\n  []  sctp_do_8_2_transport_strike.isra.16+0x15c/0x220 [sctp]\n  []  sctp_cmd_interpreter.isra.21+0x1231/0x1a10 [sctp]\n  []  sctp_do_sm+0xc3/0x2a0 [sctp]\n  []  sctp_generate_timeout_event+0x81/0xf0 [sctp]\n\nThis is caused by a transport use-after-free issue. When processing a\nduplicate COOKIE-ECHO chunk in sctp_sf_do_dupcook_a(), both COOKIE-ACK\nand SHUTDOWN chunks are allocated with the transort from the new asoc.\nHowever, later in the sideeffect machine, the old asoc is used to send\nthem out and old asoc's shutdown_last_sent_to is set to the transport\nthat SHUTDOWN chunk attached to in sctp_cmd_setup_t2(), which actually\nbelongs to the new asoc. After the new_asoc is freed and the old asoc\nT2 timeout, the old asoc's shutdown_last_sent_to that is already freed\nwould be accessed in sctp_sf_t2_timer_expire().\n\nThanks Alexander and Jere for helping dig into this issue.\n\nTo fix it, this patch is to do the asoc update first, then allocate\nthe COOKIE-ACK and SHUTDOWN chunks with the 'updated' old asoc. This\nwould make more sense, as a chunk from an asoc shouldn't be sent out\nwith another asoc. We had fixed quite a few issues caused by this.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/0bfd913c2121b3d553bfd52810fe6061d542d625",
      "https://git.kernel.org/stable/c/35b4f24415c854cd718ccdf38dbea6297f010aae",
      "https://git.kernel.org/stable/c/61b877bad9bb0d82b7d8841be50872557090a704",
      "https://git.kernel.org/stable/c/b1b31948c0af44628e43353828453461bb74098f",
      "https://git.kernel.org/stable/c/d624f2991b977821375fbd56c91b0c91d456a697",
      "https://git.kernel.org/stable/c/f01988ecf3654f805282dce2d3bb9afe68d2691e"
    ],
    "title": "sctp: do asoc update earlier in sctp_sf_do_dupcook_a",
    "updated": "2024-08-04T05:24:37.916000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2021/46xxx/CVE-2021-46999.json",
    "weaknesses": []
  }
}