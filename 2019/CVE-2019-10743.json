{
  "cve": "CVE-2019-10743",
  "mitre": {
    "cpes": [],
    "created": "2019-10-28T22:09:22+00:00",
    "description": "All versions of archiver allow attacker to perform a Zip Slip attack via the \"unarchive\" functions. It is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2019/10xxx/CVE-2019-10743.json",
    "references": [
      "https://github.com/mholt/archiver/pull/169",
      "https://snyk.io/research/zip-slip-vulnerability",
      "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARC-174728%2C"
    ],
    "title": null,
    "updated": "2024-08-04T22:32:01.212000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:archiver_project:archiver:*:*:*:*:*:*:*:*"
    ],
    "created": "2019-10-29T19:15:16.610000+00:00",
    "description": "All versions of archiver allow attacker to perform a Zip Slip attack via the \"unarchive\" functions. It is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.",
    "metrics": {
      "cvssV2_0": {
        "score": 5.8,
        "vector": "AV:N/AC:M/Au:N/C:N/I:P/A:P"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2019/CVE-2019-10743.json",
    "references": [
      "https://github.com/mholt/archiver/pull/169",
      "https://snyk.io/research/zip-slip-vulnerability",
      "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARC-174728",
      "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARC-174728%2C"
    ],
    "title": null,
    "updated": "2024-02-02T02:13:35.357000+00:00",
    "vendors": [
      "archiver_project",
      "archiver_project$PRODUCT$archiver"
    ],
    "weaknesses": [
      "CWE-22"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:archiver_project:archiver:*:*:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2019-05-12T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "All versions of archiver allow attacker to perform a Zip Slip attack via the \"unarchive\" functions. It is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 5.8,
          "vector": "AV:N/AC:M/Au:N/C:N/I:P/A:P"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.5,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N"
        },
        "provider": "nvd"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://github.com/mholt/archiver/pull/169",
        "https://nvd.nist.gov/vuln/detail/CVE-2019-10743",
        "https://snyk.io/research/zip-slip-vulnerability",
        "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARC-174728",
        "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARC-174728%2C",
        "https://www.cve.org/CVERecord?id=CVE-2019-10743"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "mholt/archiver: aribtrary file write via unsanitized destination filepaths",
      "provider": "nvd"
    },
    "updated": {
      "data": "2024-08-04T22:32:01.212000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "archiver_project",
        "archiver_project$PRODUCT$archiver"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-22"
      ],
      "providers": [
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2019-05-12T00:00:00+00:00",
    "description": "All versions of archiver allow attacker to perform a Zip Slip attack via the \"unarchive\" functions. It is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2019/CVE-2019-10743.json",
    "references": [
      "https://nvd.nist.gov/vuln/detail/CVE-2019-10743",
      "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMMHOLTARCHIVERCMDARC-174728",
      "https://www.cve.org/CVERecord?id=CVE-2019-10743"
    ],
    "title": "mholt/archiver: aribtrary file write via unsanitized destination filepaths",
    "updated": "2019-05-12T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-22"
    ]
  }
}