{
  "cve": "CVE-2024-36943",
  "mitre": {
    "cpes": [],
    "created": "2024-05-30T15:35:42.119000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan\n\nmake_uffd_wp_pte() was previously doing:\n\n  pte = ptep_get(ptep);\n  ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);\n\nBut if another thread accessed or dirtied the pte between the first 2\ncalls, this could lead to loss of that information.  Since\nptep_modify_prot_start() gets and clears atomically, the following is the\ncorrect pattern and prevents any possible race.  Any access after the\nfirst call would see an invalid pte and cause a fault:\n\n  pte = ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/36xxx/CVE-2024-36943.json",
    "references": [
      "https://git.kernel.org/stable/c/74b3d66f91d9f539f99faad74d796fa9a389a015",
      "https://git.kernel.org/stable/c/c70dce4982ce1718bf978a35f8e26160b82081f4"
    ],
    "title": "fs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan",
    "updated": "2024-08-02T03:43:50.375000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-05-30T16:15:17.307000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan\n\nmake_uffd_wp_pte() was previously doing:\n\n  pte = ptep_get(ptep);\n  ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);\n\nBut if another thread accessed or dirtied the pte between the first 2\ncalls, this could lead to loss of that information.  Since\nptep_modify_prot_start() gets and clears atomically, the following is the\ncorrect pattern and prevents any possible race.  Any access after the\nfirst call would see an invalid pte and cause a fault:\n\n  pte = ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-36943.json",
    "references": [
      "https://git.kernel.org/stable/c/74b3d66f91d9f539f99faad74d796fa9a389a015",
      "https://git.kernel.org/stable/c/c70dce4982ce1718bf978a35f8e26160b82081f4"
    ],
    "title": null,
    "updated": "2024-05-30T18:18:58.870000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-05-30T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nfs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan\n\nmake_uffd_wp_pte() was previously doing:\n\n  pte = ptep_get(ptep);\n  ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);\n\nBut if another thread accessed or dirtied the pte between the first 2\ncalls, this could lead to loss of that information.  Since\nptep_modify_prot_start() gets and clears atomically, the following is the\ncorrect pattern and prevents any possible race.  Any access after the\nfirst call would see an invalid pte and cause a fault:\n\n  pte = ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.3,
          "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {
          "options": {
            "Automatable": "no",
            "Exploitation": "none",
            "Technical Impact": "partial"
          },
          "version": "2.0.3"
        },
        "provider": "vulnrichment"
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/74b3d66f91d9f539f99faad74d796fa9a389a015",
        "https://git.kernel.org/stable/c/c70dce4982ce1718bf978a35f8e26160b82081f4",
        "https://lore.kernel.org/linux-cve-announce/2024053038-CVE-2024-36943-de68@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-36943",
        "https://www.cve.org/CVERecord?id=CVE-2024-36943"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "fs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T03:43:50.375000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-367"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-05-30T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nfs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan\nmake_uffd_wp_pte() was previously doing:\npte = ptep_get(ptep);\nptep_modify_prot_start(ptep);\npte = pte_mkuffd_wp(pte);\nptep_modify_prot_commit(ptep, pte);\nBut if another thread accessed or dirtied the pte between the first 2\ncalls, this could lead to loss of that information.  Since\nptep_modify_prot_start() gets and clears atomically, the following is the\ncorrect pattern and prevents any possible race.  Any access after the\nfirst call would see an invalid pte and cause a fault:\npte = ptep_modify_prot_start(ptep);\npte = pte_mkuffd_wp(pte);\nptep_modify_prot_commit(ptep, pte);",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.3,
        "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2024/CVE-2024-36943.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024053038-CVE-2024-36943-de68@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-36943",
      "https://www.cve.org/CVERecord?id=CVE-2024-36943"
    ],
    "title": "kernel: fs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan",
    "updated": "2024-05-30T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-367"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-05-30T15:35:42.119000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nfs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan\n\nmake_uffd_wp_pte() was previously doing:\n\n  pte = ptep_get(ptep);\n  ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);\n\nBut if another thread accessed or dirtied the pte between the first 2\ncalls, this could lead to loss of that information.  Since\nptep_modify_prot_start() gets and clears atomically, the following is the\ncorrect pattern and prevents any possible race.  Any access after the\nfirst call would see an invalid pte and cause a fault:\n\n  pte = ptep_modify_prot_start(ptep);\n  pte = pte_mkuffd_wp(pte);\n  ptep_modify_prot_commit(ptep, pte);",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {
        "options": {
          "Automatable": "no",
          "Exploitation": "none",
          "Technical Impact": "partial"
        },
        "version": "2.0.3"
      }
    },
    "references": [],
    "title": "fs/proc/task_mmu: fix loss of young/dirty bits during pagemap scan",
    "updated": "2024-06-05T18:15:18.500000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2024/36xxx/CVE-2024-36943.json",
    "weaknesses": []
  }
}