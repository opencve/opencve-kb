{
  "cve": "CVE-2024-39506",
  "mitre": {
    "cpes": [],
    "created": "2024-07-12T12:20:38.298000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nliquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet\n\nIn lio_vf_rep_copy_packet() pg_info->page is compared to a NULL value,\nbut then it is unconditionally passed to skb_add_rx_frag() which looks\nstrange and could lead to null pointer dereference.\n\nlio_vf_rep_copy_packet() call trace looks like:\n\tocteon_droq_process_packets\n\t octeon_droq_fast_process_packets\n\t  octeon_droq_dispatch_pkt\n\t   octeon_create_recv_info\n\t    ...search in the dispatch_list...\n\t     ->disp_fn(rdisp->rinfo, ...)\n\t      lio_vf_rep_pkt_recv(struct octeon_recv_info *recv_info, ...)\nIn this path there is no code which sets pg_info->page to NULL.\nSo this check looks unneeded and doesn't solve potential problem.\nBut I guess the author had reason to add a check and I have no such card\nand can't do real test.\nIn addition, the code in the function liquidio_push_packet() in\nliquidio/lio_core.c does exactly the same.\n\nBased on this, I consider the most acceptable compromise solution to\nadjust this issue by moving skb_add_rx_frag() into conditional scope.\n\nFound by Linux Verification Center (linuxtesting.org) with SVACE.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/39xxx/CVE-2024-39506.json",
    "references": [
      "https://git.kernel.org/stable/c/87d6bdc006f0cbf297a3b2ad6e40ede4c3ee5dc2",
      "https://git.kernel.org/stable/c/a6f4d0ec170a46b5f453cacf55dff5989b42bbfa",
      "https://git.kernel.org/stable/c/a86490a3712cc513113440a606a0e77130abd47c",
      "https://git.kernel.org/stable/c/c44711b78608c98a3e6b49ce91678cd0917d5349",
      "https://git.kernel.org/stable/c/cbf18d8128a753cb632bef39470d19befd9c7347",
      "https://git.kernel.org/stable/c/dcc7440f32c7a26b067aff6e7d931ec593024a79",
      "https://git.kernel.org/stable/c/f1ab15a09492a5ae8ab1e2c35ba2cf9e150d25ee",
      "https://git.kernel.org/stable/c/fd2b613bc4c508e55c1221c6595bb889812a4fea"
    ],
    "title": "liquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet",
    "updated": "2024-08-02T04:26:15.306000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
      "cpe:2.3:o:linux:linux_kernel:6.10:rc1:*:*:*:*:*:*",
      "cpe:2.3:o:linux:linux_kernel:6.10:rc2:*:*:*:*:*:*",
      "cpe:2.3:o:linux:linux_kernel:6.10:rc3:*:*:*:*:*:*"
    ],
    "created": "2024-07-12T13:15:12.957000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nliquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet\n\nIn lio_vf_rep_copy_packet() pg_info->page is compared to a NULL value,\nbut then it is unconditionally passed to skb_add_rx_frag() which looks\nstrange and could lead to null pointer dereference.\n\nlio_vf_rep_copy_packet() call trace looks like:\n\tocteon_droq_process_packets\n\t octeon_droq_fast_process_packets\n\t  octeon_droq_dispatch_pkt\n\t   octeon_create_recv_info\n\t    ...search in the dispatch_list...\n\t     ->disp_fn(rdisp->rinfo, ...)\n\t      lio_vf_rep_pkt_recv(struct octeon_recv_info *recv_info, ...)\nIn this path there is no code which sets pg_info->page to NULL.\nSo this check looks unneeded and doesn't solve potential problem.\nBut I guess the author had reason to add a check and I have no such card\nand can't do real test.\nIn addition, the code in the function liquidio_push_packet() in\nliquidio/lio_core.c does exactly the same.\n\nBased on this, I consider the most acceptable compromise solution to\nadjust this issue by moving skb_add_rx_frag() into conditional scope.\n\nFound by Linux Verification Center (linuxtesting.org) with SVACE.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-39506.json",
    "references": [
      "https://git.kernel.org/stable/c/87d6bdc006f0cbf297a3b2ad6e40ede4c3ee5dc2",
      "https://git.kernel.org/stable/c/a6f4d0ec170a46b5f453cacf55dff5989b42bbfa",
      "https://git.kernel.org/stable/c/a86490a3712cc513113440a606a0e77130abd47c",
      "https://git.kernel.org/stable/c/c44711b78608c98a3e6b49ce91678cd0917d5349",
      "https://git.kernel.org/stable/c/cbf18d8128a753cb632bef39470d19befd9c7347",
      "https://git.kernel.org/stable/c/dcc7440f32c7a26b067aff6e7d931ec593024a79",
      "https://git.kernel.org/stable/c/f1ab15a09492a5ae8ab1e2c35ba2cf9e150d25ee",
      "https://git.kernel.org/stable/c/fd2b613bc4c508e55c1221c6595bb889812a4fea"
    ],
    "title": null,
    "updated": "2024-08-28T19:58:56.013000+00:00",
    "vendors": [
      "linux",
      "linux$PRODUCT$linux_kernel"
    ],
    "weaknesses": [
      "CWE-476"
    ]
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-08-12T19:00:00+00:00",
        "data": [
          {
            "details": {
              "added": [
                "CWE-476"
              ],
              "removed": []
            },
            "type": "weaknesses"
          }
        ],
        "id": "ca3ddb44-4979-4c4b-8237-e1925f2cfdb5"
      },
      {
        "created": "2024-08-28T20:15:00+00:00",
        "data": [
          {
            "details": [
              "linux",
              "linux$PRODUCT$linux_kernel"
            ],
            "type": "first_time"
          },
          {
            "details": {
              "added": [
                "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
                "cpe:2.3:o:linux:linux_kernel:6.10:rc1:*:*:*:*:*:*",
                "cpe:2.3:o:linux:linux_kernel:6.10:rc2:*:*:*:*:*:*",
                "cpe:2.3:o:linux:linux_kernel:6.10:rc3:*:*:*:*:*:*"
              ],
              "removed": []
            },
            "type": "cpes"
          },
          {
            "details": {
              "added": [
                "linux",
                "linux$PRODUCT$linux_kernel"
              ],
              "removed": []
            },
            "type": "vendors"
          }
        ],
        "id": "6f4d9c63-0d2a-4754-acd9-240cf231d4f0"
      }
    ],
    "cpes": {
      "data": [
        "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
        "cpe:2.3:o:linux:linux_kernel:6.10:rc1:*:*:*:*:*:*",
        "cpe:2.3:o:linux:linux_kernel:6.10:rc2:*:*:*:*:*:*",
        "cpe:2.3:o:linux:linux_kernel:6.10:rc3:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2024-07-12T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nliquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet\n\nIn lio_vf_rep_copy_packet() pg_info->page is compared to a NULL value,\nbut then it is unconditionally passed to skb_add_rx_frag() which looks\nstrange and could lead to null pointer dereference.\n\nlio_vf_rep_copy_packet() call trace looks like:\n\tocteon_droq_process_packets\n\t octeon_droq_fast_process_packets\n\t  octeon_droq_dispatch_pkt\n\t   octeon_create_recv_info\n\t    ...search in the dispatch_list...\n\t     ->disp_fn(rdisp->rinfo, ...)\n\t      lio_vf_rep_pkt_recv(struct octeon_recv_info *recv_info, ...)\nIn this path there is no code which sets pg_info->page to NULL.\nSo this check looks unneeded and doesn't solve potential problem.\nBut I guess the author had reason to add a check and I have no such card\nand can't do real test.\nIn addition, the code in the function liquidio_push_packet() in\nliquidio/lio_core.c does exactly the same.\n\nBased on this, I consider the most acceptable compromise solution to\nadjust this issue by moving skb_add_rx_frag() into conditional scope.\n\nFound by Linux Verification Center (linuxtesting.org) with SVACE.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.5,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "nvd"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/87d6bdc006f0cbf297a3b2ad6e40ede4c3ee5dc2",
        "https://git.kernel.org/stable/c/a6f4d0ec170a46b5f453cacf55dff5989b42bbfa",
        "https://git.kernel.org/stable/c/a86490a3712cc513113440a606a0e77130abd47c",
        "https://git.kernel.org/stable/c/c44711b78608c98a3e6b49ce91678cd0917d5349",
        "https://git.kernel.org/stable/c/cbf18d8128a753cb632bef39470d19befd9c7347",
        "https://git.kernel.org/stable/c/dcc7440f32c7a26b067aff6e7d931ec593024a79",
        "https://git.kernel.org/stable/c/f1ab15a09492a5ae8ab1e2c35ba2cf9e150d25ee",
        "https://git.kernel.org/stable/c/fd2b613bc4c508e55c1221c6595bb889812a4fea",
        "https://lore.kernel.org/linux-cve-announce/2024071205-CVE-2024-39506-b0cc@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-39506",
        "https://www.cve.org/CVERecord?id=CVE-2024-39506"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "liquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-28T19:58:56.013000+00:00",
      "provider": "nvd"
    },
    "vendors": {
      "data": [
        "linux",
        "linux$PRODUCT$linux_kernel"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-476"
      ],
      "providers": [
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-07-12T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nliquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet\nIn lio_vf_rep_copy_packet() pg_info->page is compared to a NULL value,\nbut then it is unconditionally passed to skb_add_rx_frag() which looks\nstrange and could lead to null pointer dereference.\nlio_vf_rep_copy_packet() call trace looks like:\nocteon_droq_process_packets\nocteon_droq_fast_process_packets\nocteon_droq_dispatch_pkt\nocteon_create_recv_info\n...search in the dispatch_list...\n->disp_fn(rdisp->rinfo, ...)\nlio_vf_rep_pkt_recv(struct octeon_recv_info *recv_info, ...)\nIn this path there is no code which sets pg_info->page to NULL.\nSo this check looks unneeded and doesn't solve potential problem.\nBut I guess the author had reason to add a check and I have no such card\nand can't do real test.\nIn addition, the code in the function liquidio_push_packet() in\nliquidio/lio_core.c does exactly the same.\nBased on this, I consider the most acceptable compromise solution to\nadjust this issue by moving skb_add_rx_frag() into conditional scope.\nFound by Linux Verification Center (linuxtesting.org) with SVACE.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2024/CVE-2024-39506.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024071205-CVE-2024-39506-b0cc@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-39506",
      "https://www.cve.org/CVERecord?id=CVE-2024-39506"
    ],
    "title": "kernel: liquidio: Adjust a NULL pointer handling path in lio_vf_rep_copy_packet",
    "updated": "2024-07-12T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-476"
    ]
  }
}