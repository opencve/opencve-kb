{
  "cve": "CVE-2021-47483",
  "mitre": {
    "cpes": [],
    "created": "2024-05-22T08:19:34.852000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nregmap: Fix possible double-free in regcache_rbtree_exit()\n\nIn regcache_rbtree_insert_to_block(), when 'present' realloc failed,\nthe 'blk' which is supposed to assign to 'rbnode->block' will be freed,\nso 'rbnode->block' points a freed memory, in the error handling path of\nregcache_rbtree_init(), 'rbnode->block' will be freed again in\nregcache_rbtree_exit(), KASAN will report double-free as follows:\n\nBUG: KASAN: double-free or invalid-free in kfree+0xce/0x390\nCall Trace:\n slab_free_freelist_hook+0x10d/0x240\n kfree+0xce/0x390\n regcache_rbtree_exit+0x15d/0x1a0\n regcache_rbtree_init+0x224/0x2c0\n regcache_init+0x88d/0x1310\n __regmap_init+0x3151/0x4a80\n __devm_regmap_init+0x7d/0x100\n madera_spi_probe+0x10f/0x333 [madera_spi]\n spi_probe+0x183/0x210\n really_probe+0x285/0xc30\n\nTo fix this, moving up the assignment of rbnode->block to immediately after\nthe reallocation has succeeded so that the data structure stays valid even\nif the second reallocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/47xxx/CVE-2021-47483.json",
    "references": [
      "https://git.kernel.org/stable/c/1cead23c1c0bc766dacb900a3b0269f651ad596f",
      "https://git.kernel.org/stable/c/36e911a16b377bde0ad91a8c679069d0d310b1a6",
      "https://git.kernel.org/stable/c/3dae1a4eced3ee733d7222e69b8a55caf2d61091",
      "https://git.kernel.org/stable/c/50cc1462a668dc62949a1127388bc3af785ce047",
      "https://git.kernel.org/stable/c/55e6d8037805b3400096d621091dfbf713f97e83",
      "https://git.kernel.org/stable/c/758ced2c3878ff789801e6fee808e185c5cf08d6",
      "https://git.kernel.org/stable/c/e72dce9afbdbfa70d9b44f5908a50ff6c4858999",
      "https://git.kernel.org/stable/c/fc081477b47dfc3a6cb50a96087fc29674013fc2"
    ],
    "title": "regmap: Fix possible double-free in regcache_rbtree_exit()",
    "updated": "2024-08-04T05:39:59.752000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-05-22T09:15:10.227000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nregmap: Fix possible double-free in regcache_rbtree_exit()\n\nIn regcache_rbtree_insert_to_block(), when 'present' realloc failed,\nthe 'blk' which is supposed to assign to 'rbnode->block' will be freed,\nso 'rbnode->block' points a freed memory, in the error handling path of\nregcache_rbtree_init(), 'rbnode->block' will be freed again in\nregcache_rbtree_exit(), KASAN will report double-free as follows:\n\nBUG: KASAN: double-free or invalid-free in kfree+0xce/0x390\nCall Trace:\n slab_free_freelist_hook+0x10d/0x240\n kfree+0xce/0x390\n regcache_rbtree_exit+0x15d/0x1a0\n regcache_rbtree_init+0x224/0x2c0\n regcache_init+0x88d/0x1310\n __regmap_init+0x3151/0x4a80\n __devm_regmap_init+0x7d/0x100\n madera_spi_probe+0x10f/0x333 [madera_spi]\n spi_probe+0x183/0x210\n really_probe+0x285/0xc30\n\nTo fix this, moving up the assignment of rbnode->block to immediately after\nthe reallocation has succeeded so that the data structure stays valid even\nif the second reallocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-47483.json",
    "references": [
      "https://git.kernel.org/stable/c/1cead23c1c0bc766dacb900a3b0269f651ad596f",
      "https://git.kernel.org/stable/c/36e911a16b377bde0ad91a8c679069d0d310b1a6",
      "https://git.kernel.org/stable/c/3dae1a4eced3ee733d7222e69b8a55caf2d61091",
      "https://git.kernel.org/stable/c/50cc1462a668dc62949a1127388bc3af785ce047",
      "https://git.kernel.org/stable/c/55e6d8037805b3400096d621091dfbf713f97e83",
      "https://git.kernel.org/stable/c/758ced2c3878ff789801e6fee808e185c5cf08d6",
      "https://git.kernel.org/stable/c/e72dce9afbdbfa70d9b44f5908a50ff6c4858999",
      "https://git.kernel.org/stable/c/fc081477b47dfc3a6cb50a96087fc29674013fc2"
    ],
    "title": null,
    "updated": "2024-05-22T12:46:53.887000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-09-11T13:30:00+00:00",
        "data": [
          {
            "details": {
              "added": {
                "ssvc": {
                  "options": {
                    "Automatable": "no",
                    "Exploitation": "none",
                    "Technical Impact": "partial"
                  },
                  "version": "2.0.3"
                }
              },
              "removed": {},
              "updated": {}
            },
            "type": "metrics"
          }
        ],
        "id": "0537011a-b190-4333-9300-c0e86dc6b718"
      }
    ],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-05-22T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nregmap: Fix possible double-free in regcache_rbtree_exit()\n\nIn regcache_rbtree_insert_to_block(), when 'present' realloc failed,\nthe 'blk' which is supposed to assign to 'rbnode->block' will be freed,\nso 'rbnode->block' points a freed memory, in the error handling path of\nregcache_rbtree_init(), 'rbnode->block' will be freed again in\nregcache_rbtree_exit(), KASAN will report double-free as follows:\n\nBUG: KASAN: double-free or invalid-free in kfree+0xce/0x390\nCall Trace:\n slab_free_freelist_hook+0x10d/0x240\n kfree+0xce/0x390\n regcache_rbtree_exit+0x15d/0x1a0\n regcache_rbtree_init+0x224/0x2c0\n regcache_init+0x88d/0x1310\n __regmap_init+0x3151/0x4a80\n __devm_regmap_init+0x7d/0x100\n madera_spi_probe+0x10f/0x333 [madera_spi]\n spi_probe+0x183/0x210\n really_probe+0x285/0xc30\n\nTo fix this, moving up the assignment of rbnode->block to immediately after\nthe reallocation has succeeded so that the data structure stays valid even\nif the second reallocation fails.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 4.4,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {
          "options": {
            "Automatable": "no",
            "Exploitation": "none",
            "Technical Impact": "partial"
          },
          "version": "2.0.3"
        },
        "provider": "vulnrichment"
      },
      "threat_severity": {
        "data": "Low",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/1cead23c1c0bc766dacb900a3b0269f651ad596f",
        "https://git.kernel.org/stable/c/36e911a16b377bde0ad91a8c679069d0d310b1a6",
        "https://git.kernel.org/stable/c/3dae1a4eced3ee733d7222e69b8a55caf2d61091",
        "https://git.kernel.org/stable/c/50cc1462a668dc62949a1127388bc3af785ce047",
        "https://git.kernel.org/stable/c/55e6d8037805b3400096d621091dfbf713f97e83",
        "https://git.kernel.org/stable/c/758ced2c3878ff789801e6fee808e185c5cf08d6",
        "https://git.kernel.org/stable/c/e72dce9afbdbfa70d9b44f5908a50ff6c4858999",
        "https://git.kernel.org/stable/c/fc081477b47dfc3a6cb50a96087fc29674013fc2",
        "https://lore.kernel.org/linux-cve-announce/2024052238-CVE-2021-47483-8306@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2021-47483",
        "https://www.cve.org/CVERecord?id=CVE-2021-47483"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "regmap: Fix possible double-free in regcache_rbtree_exit()",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-09-11T12:42:13.248000+00:00",
      "provider": "vulnrichment"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-415"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-05-22T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nregmap: Fix possible double-free in regcache_rbtree_exit()\nIn regcache_rbtree_insert_to_block(), when 'present' realloc failed,\nthe 'blk' which is supposed to assign to 'rbnode->block' will be freed,\nso 'rbnode->block' points a freed memory, in the error handling path of\nregcache_rbtree_init(), 'rbnode->block' will be freed again in\nregcache_rbtree_exit(), KASAN will report double-free as follows:\nBUG: KASAN: double-free or invalid-free in kfree+0xce/0x390\nCall Trace:\nslab_free_freelist_hook+0x10d/0x240\nkfree+0xce/0x390\nregcache_rbtree_exit+0x15d/0x1a0\nregcache_rbtree_init+0x224/0x2c0\nregcache_init+0x88d/0x1310\n__regmap_init+0x3151/0x4a80\n__devm_regmap_init+0x7d/0x100\nmadera_spi_probe+0x10f/0x333 [madera_spi]\nspi_probe+0x183/0x210\nreally_probe+0x285/0xc30\nTo fix this, moving up the assignment of rbnode->block to immediately after\nthe reallocation has succeeded so that the data structure stays valid even\nif the second reallocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 4.4,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Low"
    },
    "redhat_repo_path": "2021/CVE-2021-47483.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024052238-CVE-2021-47483-8306@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2021-47483",
      "https://www.cve.org/CVERecord?id=CVE-2021-47483"
    ],
    "title": "kernel: regmap: Fix possible double-free in regcache_rbtree_exit()",
    "updated": "2024-05-22T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-415"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-05-22T08:19:34.852000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nregmap: Fix possible double-free in regcache_rbtree_exit()\n\nIn regcache_rbtree_insert_to_block(), when 'present' realloc failed,\nthe 'blk' which is supposed to assign to 'rbnode->block' will be freed,\nso 'rbnode->block' points a freed memory, in the error handling path of\nregcache_rbtree_init(), 'rbnode->block' will be freed again in\nregcache_rbtree_exit(), KASAN will report double-free as follows:\n\nBUG: KASAN: double-free or invalid-free in kfree+0xce/0x390\nCall Trace:\n slab_free_freelist_hook+0x10d/0x240\n kfree+0xce/0x390\n regcache_rbtree_exit+0x15d/0x1a0\n regcache_rbtree_init+0x224/0x2c0\n regcache_init+0x88d/0x1310\n __regmap_init+0x3151/0x4a80\n __devm_regmap_init+0x7d/0x100\n madera_spi_probe+0x10f/0x333 [madera_spi]\n spi_probe+0x183/0x210\n really_probe+0x285/0xc30\n\nTo fix this, moving up the assignment of rbnode->block to immediately after\nthe reallocation has succeeded so that the data structure stays valid even\nif the second reallocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {
        "options": {
          "Automatable": "no",
          "Exploitation": "none",
          "Technical Impact": "partial"
        },
        "version": "2.0.3"
      }
    },
    "references": [],
    "title": "regmap: Fix possible double-free in regcache_rbtree_exit()",
    "updated": "2024-09-11T12:42:13.248000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2021/47xxx/CVE-2021-47483.json",
    "weaknesses": []
  }
}