{
  "cve": "CVE-2024-26627",
  "mitre": {
    "cpes": [],
    "created": "2024-03-06T06:45:34.339000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nscsi: core: Move scsi_host_busy() out of host lock for waking up EH handler\n\nInside scsi_eh_wakeup(), scsi_host_busy() is called & checked with host\nlock every time for deciding if error handler kthread needs to be waken up.\n\nThis can be too heavy in case of recovery, such as:\n\n - N hardware queues\n\n - queue depth is M for each hardware queue\n\n - each scsi_host_busy() iterates over (N * M) tag/requests\n\nIf recovery is triggered in case that all requests are in-flight, each\nscsi_eh_wakeup() is strictly serialized, when scsi_eh_wakeup() is called\nfor the last in-flight request, scsi_host_busy() has been run for (N * M -\n1) times, and request has been iterated for (N*M - 1) * (N * M) times.\n\nIf both N and M are big enough, hard lockup can be triggered on acquiring\nhost lock, and it is observed on mpi3mr(128 hw queues, queue depth 8169).\n\nFix the issue by calling scsi_host_busy() outside the host lock. We don't\nneed the host lock for getting busy count because host the lock never\ncovers that.\n\n[mkp: Drop unnecessary 'busy' variables pointed out by Bart]",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/26xxx/CVE-2024-26627.json",
    "references": [
      "https://git.kernel.org/stable/c/07e3ca0f17f579491b5f54e9ed05173d6c1d6fcb",
      "https://git.kernel.org/stable/c/4373534a9850627a2695317944898eb1283a2db0",
      "https://git.kernel.org/stable/c/65ead8468c21c2676d4d06f50b46beffdea69df1",
      "https://git.kernel.org/stable/c/d37c1c81419fdef66ebd0747cf76fb8b7d979059",
      "https://git.kernel.org/stable/c/db6338f45971b4285ea368432a84033690eaf53c",
      "https://git.kernel.org/stable/c/f5944853f7a961fedc1227dc8f60393f8936d37c",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html"
    ],
    "title": "scsi: core: Move scsi_host_busy() out of host lock for waking up EH handler",
    "updated": "2024-08-02T00:07:19.707000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-03-06T07:15:12.973000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nscsi: core: Move scsi_host_busy() out of host lock for waking up EH handler\n\nInside scsi_eh_wakeup(), scsi_host_busy() is called & checked with host\nlock every time for deciding if error handler kthread needs to be waken up.\n\nThis can be too heavy in case of recovery, such as:\n\n - N hardware queues\n\n - queue depth is M for each hardware queue\n\n - each scsi_host_busy() iterates over (N * M) tag/requests\n\nIf recovery is triggered in case that all requests are in-flight, each\nscsi_eh_wakeup() is strictly serialized, when scsi_eh_wakeup() is called\nfor the last in-flight request, scsi_host_busy() has been run for (N * M -\n1) times, and request has been iterated for (N*M - 1) * (N * M) times.\n\nIf both N and M are big enough, hard lockup can be triggered on acquiring\nhost lock, and it is observed on mpi3mr(128 hw queues, queue depth 8169).\n\nFix the issue by calling scsi_host_busy() outside the host lock. We don't\nneed the host lock for getting busy count because host the lock never\ncovers that.\n\n[mkp: Drop unnecessary 'busy' variables pointed out by Bart]",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-26627.json",
    "references": [
      "https://git.kernel.org/stable/c/07e3ca0f17f579491b5f54e9ed05173d6c1d6fcb",
      "https://git.kernel.org/stable/c/4373534a9850627a2695317944898eb1283a2db0",
      "https://git.kernel.org/stable/c/65ead8468c21c2676d4d06f50b46beffdea69df1",
      "https://git.kernel.org/stable/c/d37c1c81419fdef66ebd0747cf76fb8b7d979059",
      "https://git.kernel.org/stable/c/db6338f45971b4285ea368432a84033690eaf53c",
      "https://git.kernel.org/stable/c/f5944853f7a961fedc1227dc8f60393f8936d37c",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html"
    ],
    "title": null,
    "updated": "2024-06-25T22:15:19.457000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-03-06T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nscsi: core: Move scsi_host_busy() out of host lock for waking up EH handler\n\nInside scsi_eh_wakeup(), scsi_host_busy() is called & checked with host\nlock every time for deciding if error handler kthread needs to be waken up.\n\nThis can be too heavy in case of recovery, such as:\n\n - N hardware queues\n\n - queue depth is M for each hardware queue\n\n - each scsi_host_busy() iterates over (N * M) tag/requests\n\nIf recovery is triggered in case that all requests are in-flight, each\nscsi_eh_wakeup() is strictly serialized, when scsi_eh_wakeup() is called\nfor the last in-flight request, scsi_host_busy() has been run for (N * M -\n1) times, and request has been iterated for (N*M - 1) * (N * M) times.\n\nIf both N and M are big enough, hard lockup can be triggered on acquiring\nhost lock, and it is observed on mpi3mr(128 hw queues, queue depth 8169).\n\nFix the issue by calling scsi_host_busy() outside the host lock. We don't\nneed the host lock for getting busy count because host the lock never\ncovers that.\n\n[mkp: Drop unnecessary 'busy' variables pointed out by Bart]",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.5,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {
          "options": {
            "Automatable": "no",
            "Exploitation": "none",
            "Technical Impact": "partial"
          },
          "version": "2.0.3"
        },
        "provider": "vulnrichment"
      },
      "threat_severity": {
        "data": "Low",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/07e3ca0f17f579491b5f54e9ed05173d6c1d6fcb",
        "https://git.kernel.org/stable/c/4373534a9850627a2695317944898eb1283a2db0",
        "https://git.kernel.org/stable/c/65ead8468c21c2676d4d06f50b46beffdea69df1",
        "https://git.kernel.org/stable/c/d37c1c81419fdef66ebd0747cf76fb8b7d979059",
        "https://git.kernel.org/stable/c/db6338f45971b4285ea368432a84033690eaf53c",
        "https://git.kernel.org/stable/c/f5944853f7a961fedc1227dc8f60393f8936d37c",
        "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html",
        "https://lore.kernel.org/linux-cve-announce/2024030648-CVE-2024-26627-e3a2@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-26627",
        "https://www.cve.org/CVERecord?id=CVE-2024-26627"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "scsi: core: Move scsi_host_busy() out of host lock for waking up EH handler",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T00:07:19.707000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-413"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-03-06T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nscsi: core: Move scsi_host_busy() out of host lock for waking up EH handler\nInside scsi_eh_wakeup(), scsi_host_busy() is called & checked with host\nlock every time for deciding if error handler kthread needs to be waken up.\nThis can be too heavy in case of recovery, such as:\n- N hardware queues\n- queue depth is M for each hardware queue\n- each scsi_host_busy() iterates over (N * M) tag/requests\nIf recovery is triggered in case that all requests are in-flight, each\nscsi_eh_wakeup() is strictly serialized, when scsi_eh_wakeup() is called\nfor the last in-flight request, scsi_host_busy() has been run for (N * M -\n1) times, and request has been iterated for (N*M - 1) * (N * M) times.\nIf both N and M are big enough, hard lockup can be triggered on acquiring\nhost lock, and it is observed on mpi3mr(128 hw queues, queue depth 8169).\nFix the issue by calling scsi_host_busy() outside the host lock. We don't\nneed the host lock for getting busy count because host the lock never\ncovers that.\n[mkp: Drop unnecessary 'busy' variables pointed out by Bart]",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Low"
    },
    "redhat_repo_path": "2024/CVE-2024-26627.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024030648-CVE-2024-26627-e3a2@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-26627",
      "https://www.cve.org/CVERecord?id=CVE-2024-26627"
    ],
    "title": "kernel: scsi: core: Move scsi_host_busy() out of host lock for waking up EH handler",
    "updated": "2024-03-06T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-413"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-03-06T06:45:34.339000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nscsi: core: Move scsi_host_busy() out of host lock for waking up EH handler\n\nInside scsi_eh_wakeup(), scsi_host_busy() is called & checked with host\nlock every time for deciding if error handler kthread needs to be waken up.\n\nThis can be too heavy in case of recovery, such as:\n\n - N hardware queues\n\n - queue depth is M for each hardware queue\n\n - each scsi_host_busy() iterates over (N * M) tag/requests\n\nIf recovery is triggered in case that all requests are in-flight, each\nscsi_eh_wakeup() is strictly serialized, when scsi_eh_wakeup() is called\nfor the last in-flight request, scsi_host_busy() has been run for (N * M -\n1) times, and request has been iterated for (N*M - 1) * (N * M) times.\n\nIf both N and M are big enough, hard lockup can be triggered on acquiring\nhost lock, and it is observed on mpi3mr(128 hw queues, queue depth 8169).\n\nFix the issue by calling scsi_host_busy() outside the host lock. We don't\nneed the host lock for getting busy count because host the lock never\ncovers that.\n\n[mkp: Drop unnecessary 'busy' variables pointed out by Bart]",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {
        "options": {
          "Automatable": "no",
          "Exploitation": "none",
          "Technical Impact": "partial"
        },
        "version": "2.0.3"
      }
    },
    "references": [],
    "title": "scsi: core: Move scsi_host_busy() out of host lock for waking up EH handler",
    "updated": "2024-07-23T15:54:31.370000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2024/26xxx/CVE-2024-26627.json",
    "weaknesses": []
  }
}