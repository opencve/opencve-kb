{
  "cve": "CVE-2017-11424",
  "mitre": {
    "cpes": [],
    "created": "2017-08-24T16:00:00+00:00",
    "description": "In PyJWT 1.5.0 and below the `invalid_strings` check in `HMACAlgorithm.prepare_key` does not account for all PEM encoded public keys. Specifically, the PKCS1 PEM encoded format would be allowed because it is prefaced with the string `-----BEGIN RSA PUBLIC KEY-----` which is not accounted for. This enables symmetric/asymmetric key confusion attacks against users using the PKCS1 PEM encoded public keys, which would allow an attacker to craft JWTs from scratch.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2017/11xxx/CVE-2017-11424.json",
    "references": [
      "http://www.debian.org/security/2017/dsa-3979",
      "https://github.com/jpadilla/pyjwt/pull/277"
    ],
    "title": null,
    "updated": "2024-08-05T18:12:39.550000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:pyjwt_project:pyjwt:*:*:*:*:*:*:*:*",
      "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*",
      "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*"
    ],
    "created": "2017-08-24T16:29:00.197000+00:00",
    "description": "In PyJWT 1.5.0 and below the `invalid_strings` check in `HMACAlgorithm.prepare_key` does not account for all PEM encoded public keys. Specifically, the PKCS1 PEM encoded format would be allowed because it is prefaced with the string `-----BEGIN RSA PUBLIC KEY-----` which is not accounted for. This enables symmetric/asymmetric key confusion attacks against users using the PKCS1 PEM encoded public keys, which would allow an attacker to craft JWTs from scratch.",
    "metrics": {
      "cvssV2_0": {
        "score": 5.0,
        "vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N"
      },
      "cvssV3_0": {
        "score": 7.5,
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
      },
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2017/CVE-2017-11424.json",
    "references": [
      "http://www.debian.org/security/2017/dsa-3979",
      "https://github.com/jpadilla/pyjwt/pull/277"
    ],
    "title": null,
    "updated": "2019-10-03T00:03:26.223000+00:00",
    "vendors": [
      "debian",
      "debian$PRODUCT$debian_linux",
      "pyjwt_project",
      "pyjwt_project$PRODUCT$pyjwt"
    ],
    "weaknesses": [
      "NVD-CWE-noinfo"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:pyjwt_project:pyjwt:*:*:*:*:*:*:*:*",
        "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*",
        "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2017-06-22T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In PyJWT 1.5.0 and below the `invalid_strings` check in `HMACAlgorithm.prepare_key` does not account for all PEM encoded public keys. Specifically, the PKCS1 PEM encoded format would be allowed because it is prefaced with the string `-----BEGIN RSA PUBLIC KEY-----` which is not accounted for. This enables symmetric/asymmetric key confusion attacks against users using the PKCS1 PEM encoded public keys, which would allow an attacker to craft JWTs from scratch.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 5.0,
          "vector": "AV:N/AC:L/Au:N/C:N/I:P/A:N"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {
          "score": 7.5,
          "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"
        },
        "provider": "nvd"
      },
      "cvssV3_1": {
        "data": {},
        "provider": null
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "http://www.debian.org/security/2017/dsa-3979",
        "https://github.com/jpadilla/pyjwt/pull/277",
        "https://nvd.nist.gov/vuln/detail/CVE-2017-11424",
        "https://www.cve.org/CVERecord?id=CVE-2017-11424"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "python-jwt: Incorrect handling of PEM-encoded public keys",
      "provider": "nvd"
    },
    "updated": {
      "data": "2024-08-05T18:12:39.550000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "debian",
        "debian$PRODUCT$debian_linux",
        "pyjwt_project",
        "pyjwt_project$PRODUCT$pyjwt"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "NVD-CWE-noinfo"
      ],
      "providers": [
        "nvd"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2017-06-22T00:00:00+00:00",
    "description": "In PyJWT 1.5.0 and below the `invalid_strings` check in `HMACAlgorithm.prepare_key` does not account for all PEM encoded public keys. Specifically, the PKCS1 PEM encoded format would be allowed because it is prefaced with the string `-----BEGIN RSA PUBLIC KEY-----` which is not accounted for. This enables symmetric/asymmetric key confusion attacks against users using the PKCS1 PEM encoded public keys, which would allow an attacker to craft JWTs from scratch.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {
        "score": 5.3,
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"
      },
      "cvssV3_1": {},
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2017/CVE-2017-11424.json",
    "references": [
      "https://nvd.nist.gov/vuln/detail/CVE-2017-11424",
      "https://www.cve.org/CVERecord?id=CVE-2017-11424"
    ],
    "title": "python-jwt: Incorrect handling of PEM-encoded public keys",
    "updated": "2017-06-22T00:00:00+00:00",
    "vendors": [],
    "weaknesses": []
  }
}