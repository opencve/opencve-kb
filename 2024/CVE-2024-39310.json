{
  "cve": "CVE-2024-39310",
  "mitre": {
    "cpes": [],
    "created": "2024-07-01T21:19:35.867000+00:00",
    "description": "The Basil recipe theme for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `post_title` parameter in versions up to, and including, 2.0.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. Because the of the default WordPress validation, it is not possible to insert the payload directly but if the Cooked plugin is installed, it is possible to create a recipe post type (cp_recipe) and inject the payload in the title field. Version 2.0.5 contains a patch for the issue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.4,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/39xxx/CVE-2024-39310.json",
    "references": [
      "https://github.com/XjSv/Basil/commit/e2b1dbf1637d1ec2663f9aa1a563b02dc76a8146",
      "https://github.com/XjSv/Basil/security/advisories/GHSA-cr7v-8v2h-49vx"
    ],
    "title": "WordPress Basil Theme Authenticated (Contributor+) Persistent Cross-Site Scripting Vulnerability ",
    "updated": "2024-08-02T04:19:20.713000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-79"
    ]
  },
  "nvd": {
    "cpes": [],
    "created": "2024-07-01T22:15:03.483000+00:00",
    "description": "The Basil recipe theme for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `post_title` parameter in versions up to, and including, 2.0.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. Because the of the default WordPress validation, it is not possible to insert the payload directly but if the Cooked plugin is installed, it is possible to create a recipe post type (cp_recipe) and inject the payload in the title field. Version 2.0.5 contains a patch for the issue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.4,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-39310.json",
    "references": [
      "https://github.com/XjSv/Basil/commit/e2b1dbf1637d1ec2663f9aa1a563b02dc76a8146",
      "https://github.com/XjSv/Basil/security/advisories/GHSA-cr7v-8v2h-49vx"
    ],
    "title": null,
    "updated": "2024-07-02T12:09:16.907000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-79"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:xjsv:basil:*:*:*:*:*:*:*:*"
      ],
      "providers": [
        "vulnrichment"
      ]
    },
    "created": {
      "data": "2024-07-01T21:19:35.867000+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "The Basil recipe theme for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `post_title` parameter in versions up to, and including, 2.0.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. Because the of the default WordPress validation, it is not possible to insert the payload directly but if the Cooked plugin is installed, it is possible to create a recipe post type (cp_recipe) and inject the payload in the title field. Version 2.0.5 contains a patch for the issue.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.4,
          "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {
          "options": {
            "Automatable": "no",
            "Exploitation": "poc",
            "Technical Impact": "partial"
          },
          "version": "2.0.3"
        },
        "provider": "vulnrichment"
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://github.com/XjSv/Basil/commit/e2b1dbf1637d1ec2663f9aa1a563b02dc76a8146",
        "https://github.com/XjSv/Basil/security/advisories/GHSA-cr7v-8v2h-49vx"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "WordPress Basil Theme Authenticated (Contributor+) Persistent Cross-Site Scripting Vulnerability ",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T04:19:20.713000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "xjsv",
        "xjsv$PRODUCT$basil"
      ],
      "providers": [
        "vulnrichment"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-79"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    }
  },
  "vulnrichment": {
    "cpes": [
      "cpe:2.3:a:xjsv:basil:*:*:*:*:*:*:*:*"
    ],
    "created": "2024-07-01T21:19:35.867000+00:00",
    "description": "The Basil recipe theme for WordPress is vulnerable to Persistent Cross-Site Scripting (XSS) via the `post_title` parameter in versions up to, and including, 2.0.4 due to insufficient input sanitization and output escaping. This vulnerability allows authenticated attackers with contributor-level access and above to inject arbitrary web scripts in pages that will execute whenever a user accesses a compromised page. Because the of the default WordPress validation, it is not possible to insert the payload directly but if the Cooked plugin is installed, it is possible to create a recipe post type (cp_recipe) and inject the payload in the title field. Version 2.0.5 contains a patch for the issue.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {
        "options": {
          "Automatable": "no",
          "Exploitation": "poc",
          "Technical Impact": "partial"
        },
        "version": "2.0.3"
      }
    },
    "references": [],
    "title": "WordPress Basil Theme Authenticated (Contributor+) Persistent Cross-Site Scripting Vulnerability ",
    "updated": "2024-07-03T19:46:12.627000+00:00",
    "vendors": [
      "xjsv",
      "xjsv$PRODUCT$basil"
    ],
    "vulnrichment_repo_path": "2024/39xxx/CVE-2024-39310.json",
    "weaknesses": []
  }
}