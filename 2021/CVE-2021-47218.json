{
  "cve": "CVE-2021-47218",
  "mitre": {
    "cpes": [],
    "created": "2024-04-10T19:01:57.060000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nselinux: fix NULL-pointer dereference when hashtab allocation fails\n\nWhen the hash table slot array allocation fails in hashtab_init(),\nh->size is left initialized with a non-zero value, but the h->htable\npointer is NULL. This may then cause a NULL pointer dereference, since\nthe policydb code relies on the assumption that even after a failed\nhashtab_init(), hashtab_map() and hashtab_destroy() can be safely called\non it. Yet, these detect an empty hashtab only by looking at the size.\n\nFix this by making sure that hashtab_init() always leaves behind a valid\nempty hashtab when the allocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/47xxx/CVE-2021-47218.json",
    "references": [
      "https://git.kernel.org/stable/c/83c8ab8503adf56bf68dafc7a382f4946c87da79",
      "https://git.kernel.org/stable/c/b17dd53cac769dd13031b0ca34f90cc65e523fab",
      "https://git.kernel.org/stable/c/dc27f3c5d10c58069672215787a96b4fae01818b"
    ],
    "title": "selinux: fix NULL-pointer dereference when hashtab allocation fails",
    "updated": "2024-08-04T05:32:07.363000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-04-10T19:15:48.860000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nselinux: fix NULL-pointer dereference when hashtab allocation fails\n\nWhen the hash table slot array allocation fails in hashtab_init(),\nh->size is left initialized with a non-zero value, but the h->htable\npointer is NULL. This may then cause a NULL pointer dereference, since\nthe policydb code relies on the assumption that even after a failed\nhashtab_init(), hashtab_map() and hashtab_destroy() can be safely called\non it. Yet, these detect an empty hashtab only by looking at the size.\n\nFix this by making sure that hashtab_init() always leaves behind a valid\nempty hashtab when the allocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-47218.json",
    "references": [
      "https://git.kernel.org/stable/c/83c8ab8503adf56bf68dafc7a382f4946c87da79",
      "https://git.kernel.org/stable/c/b17dd53cac769dd13031b0ca34f90cc65e523fab",
      "https://git.kernel.org/stable/c/dc27f3c5d10c58069672215787a96b4fae01818b"
    ],
    "title": null,
    "updated": "2024-04-10T19:49:51.183000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-04-10T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nselinux: fix NULL-pointer dereference when hashtab allocation fails\n\nWhen the hash table slot array allocation fails in hashtab_init(),\nh->size is left initialized with a non-zero value, but the h->htable\npointer is NULL. This may then cause a NULL pointer dereference, since\nthe policydb code relies on the assumption that even after a failed\nhashtab_init(), hashtab_map() and hashtab_destroy() can be safely called\non it. Yet, these detect an empty hashtab only by looking at the size.\n\nFix this by making sure that hashtab_init() always leaves behind a valid\nempty hashtab when the allocation fails.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 4.4,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/83c8ab8503adf56bf68dafc7a382f4946c87da79",
        "https://git.kernel.org/stable/c/b17dd53cac769dd13031b0ca34f90cc65e523fab",
        "https://git.kernel.org/stable/c/dc27f3c5d10c58069672215787a96b4fae01818b",
        "https://lore.kernel.org/linux-cve-announce/2024041006-CVE-2021-47218-cdc8@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2021-47218",
        "https://www.cve.org/CVERecord?id=CVE-2021-47218"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "selinux: fix NULL-pointer dereference when hashtab allocation fails",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-04T05:32:07.363000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-476"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-04-10T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nselinux: fix NULL-pointer dereference when hashtab allocation fails\nWhen the hash table slot array allocation fails in hashtab_init(),\nh->size is left initialized with a non-zero value, but the h->htable\npointer is NULL. This may then cause a NULL pointer dereference, since\nthe policydb code relies on the assumption that even after a failed\nhashtab_init(), hashtab_map() and hashtab_destroy() can be safely called\non it. Yet, these detect an empty hashtab only by looking at the size.\nFix this by making sure that hashtab_init() always leaves behind a valid\nempty hashtab when the allocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 4.4,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2021/CVE-2021-47218.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024041006-CVE-2021-47218-cdc8@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2021-47218",
      "https://www.cve.org/CVERecord?id=CVE-2021-47218"
    ],
    "title": "kernel: selinux: fix NULL-pointer dereference when hashtab allocation fails",
    "updated": "2024-04-10T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-476"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-04-10T19:01:57.060000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nselinux: fix NULL-pointer dereference when hashtab allocation fails\n\nWhen the hash table slot array allocation fails in hashtab_init(),\nh->size is left initialized with a non-zero value, but the h->htable\npointer is NULL. This may then cause a NULL pointer dereference, since\nthe policydb code relies on the assumption that even after a failed\nhashtab_init(), hashtab_map() and hashtab_destroy() can be safely called\non it. Yet, these detect an empty hashtab only by looking at the size.\n\nFix this by making sure that hashtab_init() always leaves behind a valid\nempty hashtab when the allocation fails.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/83c8ab8503adf56bf68dafc7a382f4946c87da79",
      "https://git.kernel.org/stable/c/b17dd53cac769dd13031b0ca34f90cc65e523fab",
      "https://git.kernel.org/stable/c/dc27f3c5d10c58069672215787a96b4fae01818b"
    ],
    "title": "selinux: fix NULL-pointer dereference when hashtab allocation fails",
    "updated": "2024-08-04T05:32:07.363000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2021/47xxx/CVE-2021-47218.json",
    "weaknesses": []
  }
}