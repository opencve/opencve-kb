{
  "cve": "CVE-2024-36016",
  "mitre": {
    "cpes": [],
    "created": "2024-05-29T18:46:34.778000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ntty: n_gsm: fix possible out-of-bounds in gsm0_receive()\n\nAssuming the following:\n- side A configures the n_gsm in basic option mode\n- side B sends the header of a basic option mode frame with data length 1\n- side A switches to advanced option mode\n- side B sends 2 data bytes which exceeds gsm->len\n  Reason: gsm->len is not used in advanced option mode.\n- side A switches to basic option mode\n- side B keeps sending until gsm0_receive() writes past gsm->buf\n  Reason: Neither gsm->state nor gsm->len have been reset after\n  reconfiguration.\n\nFix this by changing gsm->count to gsm->len comparison from equal to less\nthan. Also add upper limit checks against the constant MAX_MRU in\ngsm0_receive() and gsm1_receive() to harden against memory corruption of\ngsm->len and gsm->mru.\n\nAll other checks remain as we still need to limit the data according to the\nuser configuration and actual payload size.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/36xxx/CVE-2024-36016.json",
    "references": [
      "https://git.kernel.org/stable/c/0fb736c9931e02dbc7d9a75044c8e1c039e50f04",
      "https://git.kernel.org/stable/c/46f52c89a7e7d2691b97a9728e4591d071ca8abc",
      "https://git.kernel.org/stable/c/47388e807f85948eefc403a8a5fdc5b406a65d5a",
      "https://git.kernel.org/stable/c/4c267110fc110390704cc065edb9817fdd10ff54",
      "https://git.kernel.org/stable/c/774d83b008eccb1c48c14dc5486e7aa255731350",
      "https://git.kernel.org/stable/c/9513d4148950b05bc99fa7314dc883cc0e1605e5",
      "https://git.kernel.org/stable/c/b229bc6c6ea9fe459fc3fa94fd0a27a2f32aca56",
      "https://git.kernel.org/stable/c/b890d45aaf02b564e6cae2d2a590f9649330857d",
      "https://git.kernel.org/stable/c/f126ce7305fe88f49cdabc6db4168b9318898ea3"
    ],
    "title": "tty: n_gsm: fix possible out-of-bounds in gsm0_receive()",
    "updated": "2024-08-02T03:30:12.609000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-05-29T19:15:48.297000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ntty: n_gsm: fix possible out-of-bounds in gsm0_receive()\n\nAssuming the following:\n- side A configures the n_gsm in basic option mode\n- side B sends the header of a basic option mode frame with data length 1\n- side A switches to advanced option mode\n- side B sends 2 data bytes which exceeds gsm->len\n  Reason: gsm->len is not used in advanced option mode.\n- side A switches to basic option mode\n- side B keeps sending until gsm0_receive() writes past gsm->buf\n  Reason: Neither gsm->state nor gsm->len have been reset after\n  reconfiguration.\n\nFix this by changing gsm->count to gsm->len comparison from equal to less\nthan. Also add upper limit checks against the constant MAX_MRU in\ngsm0_receive() and gsm1_receive() to harden against memory corruption of\ngsm->len and gsm->mru.\n\nAll other checks remain as we still need to limit the data according to the\nuser configuration and actual payload size.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 7.7,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-36016.json",
    "references": [
      "https://git.kernel.org/stable/c/0fb736c9931e02dbc7d9a75044c8e1c039e50f04",
      "https://git.kernel.org/stable/c/46f52c89a7e7d2691b97a9728e4591d071ca8abc",
      "https://git.kernel.org/stable/c/47388e807f85948eefc403a8a5fdc5b406a65d5a",
      "https://git.kernel.org/stable/c/4c267110fc110390704cc065edb9817fdd10ff54",
      "https://git.kernel.org/stable/c/774d83b008eccb1c48c14dc5486e7aa255731350",
      "https://git.kernel.org/stable/c/9513d4148950b05bc99fa7314dc883cc0e1605e5",
      "https://git.kernel.org/stable/c/b229bc6c6ea9fe459fc3fa94fd0a27a2f32aca56",
      "https://git.kernel.org/stable/c/b890d45aaf02b564e6cae2d2a590f9649330857d",
      "https://git.kernel.org/stable/c/f126ce7305fe88f49cdabc6db4168b9318898ea3"
    ],
    "title": null,
    "updated": "2024-07-15T07:15:04.697000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-125"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:/a:redhat:rhel_eus:9.2",
        "cpe:/a:redhat:rhel_eus:9.2::nfv"
      ],
      "providers": [
        "redhat"
      ]
    },
    "created": {
      "data": "2024-05-29T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\ntty: n_gsm: fix possible out-of-bounds in gsm0_receive()\n\nAssuming the following:\n- side A configures the n_gsm in basic option mode\n- side B sends the header of a basic option mode frame with data length 1\n- side A switches to advanced option mode\n- side B sends 2 data bytes which exceeds gsm->len\n  Reason: gsm->len is not used in advanced option mode.\n- side A switches to basic option mode\n- side B keeps sending until gsm0_receive() writes past gsm->buf\n  Reason: Neither gsm->state nor gsm->len have been reset after\n  reconfiguration.\n\nFix this by changing gsm->count to gsm->len comparison from equal to less\nthan. Also add upper limit checks against the constant MAX_MRU in\ngsm0_receive() and gsm1_receive() to harden against memory corruption of\ngsm->len and gsm->mru.\n\nAll other checks remain as we still need to limit the data according to the\nuser configuration and actual payload size.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 7.7,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H"
        },
        "provider": "nvd"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/0fb736c9931e02dbc7d9a75044c8e1c039e50f04",
        "https://git.kernel.org/stable/c/46f52c89a7e7d2691b97a9728e4591d071ca8abc",
        "https://git.kernel.org/stable/c/47388e807f85948eefc403a8a5fdc5b406a65d5a",
        "https://git.kernel.org/stable/c/4c267110fc110390704cc065edb9817fdd10ff54",
        "https://git.kernel.org/stable/c/774d83b008eccb1c48c14dc5486e7aa255731350",
        "https://git.kernel.org/stable/c/9513d4148950b05bc99fa7314dc883cc0e1605e5",
        "https://git.kernel.org/stable/c/b229bc6c6ea9fe459fc3fa94fd0a27a2f32aca56",
        "https://git.kernel.org/stable/c/b890d45aaf02b564e6cae2d2a590f9649330857d",
        "https://git.kernel.org/stable/c/f126ce7305fe88f49cdabc6db4168b9318898ea3",
        "https://lore.kernel.org/linux-cve-announce/2024052947-CVE-2024-36016-d30a@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-36016",
        "https://www.cve.org/CVERecord?id=CVE-2024-36016"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "tty: n_gsm: fix possible out-of-bounds in gsm0_receive()",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T03:30:12.609000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "redhat",
        "redhat$PRODUCT$rhel_eus"
      ],
      "providers": [
        "redhat"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-125",
        "CWE-787"
      ],
      "providers": [
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [
      "cpe:/a:redhat:rhel_eus:9.2",
      "cpe:/a:redhat:rhel_eus:9.2::nfv"
    ],
    "created": "2024-05-29T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\ntty: n_gsm: fix possible out-of-bounds in gsm0_receive()\nAssuming the following:\n- side A configures the n_gsm in basic option mode\n- side B sends the header of a basic option mode frame with data length 1\n- side A switches to advanced option mode\n- side B sends 2 data bytes which exceeds gsm->len\nReason: gsm->len is not used in advanced option mode.\n- side A switches to basic option mode\n- side B keeps sending until gsm0_receive() writes past gsm->buf\nReason: Neither gsm->state nor gsm->len have been reset after\nreconfiguration.\nFix this by changing gsm->count to gsm->len comparison from equal to less\nthan. Also add upper limit checks against the constant MAX_MRU in\ngsm0_receive() and gsm1_receive() to harden against memory corruption of\ngsm->len and gsm->mru.\nAll other checks remain as we still need to limit the data according to the\nuser configuration and actual payload size.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 6.4,
        "vector": "CVSS:3.1/AV:A/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2024/CVE-2024-36016.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024052947-CVE-2024-36016-d30a@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-36016",
      "https://www.cve.org/CVERecord?id=CVE-2024-36016"
    ],
    "title": "kernel: tty: n_gsm: fix possible out-of-bounds in gsm0_receive()",
    "updated": "2024-05-29T00:00:00+00:00",
    "vendors": [
      "redhat",
      "redhat$PRODUCT$rhel_eus"
    ],
    "weaknesses": [
      "CWE-787"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-05-29T18:46:34.778000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\ntty: n_gsm: fix possible out-of-bounds in gsm0_receive()\n\nAssuming the following:\n- side A configures the n_gsm in basic option mode\n- side B sends the header of a basic option mode frame with data length 1\n- side A switches to advanced option mode\n- side B sends 2 data bytes which exceeds gsm->len\n  Reason: gsm->len is not used in advanced option mode.\n- side A switches to basic option mode\n- side B keeps sending until gsm0_receive() writes past gsm->buf\n  Reason: Neither gsm->state nor gsm->len have been reset after\n  reconfiguration.\n\nFix this by changing gsm->count to gsm->len comparison from equal to less\nthan. Also add upper limit checks against the constant MAX_MRU in\ngsm0_receive() and gsm1_receive() to harden against memory corruption of\ngsm->len and gsm->mru.\n\nAll other checks remain as we still need to limit the data according to the\nuser configuration and actual payload size.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/0fb736c9931e02dbc7d9a75044c8e1c039e50f04",
      "https://git.kernel.org/stable/c/46f52c89a7e7d2691b97a9728e4591d071ca8abc",
      "https://git.kernel.org/stable/c/47388e807f85948eefc403a8a5fdc5b406a65d5a",
      "https://git.kernel.org/stable/c/4c267110fc110390704cc065edb9817fdd10ff54",
      "https://git.kernel.org/stable/c/774d83b008eccb1c48c14dc5486e7aa255731350",
      "https://git.kernel.org/stable/c/9513d4148950b05bc99fa7314dc883cc0e1605e5",
      "https://git.kernel.org/stable/c/b229bc6c6ea9fe459fc3fa94fd0a27a2f32aca56",
      "https://git.kernel.org/stable/c/b890d45aaf02b564e6cae2d2a590f9649330857d",
      "https://git.kernel.org/stable/c/f126ce7305fe88f49cdabc6db4168b9318898ea3"
    ],
    "title": "tty: n_gsm: fix possible out-of-bounds in gsm0_receive()",
    "updated": "2024-08-02T03:30:12.609000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2024/36xxx/CVE-2024-36016.json",
    "weaknesses": []
  }
}