{
  "cve": "CVE-2021-32685",
  "mitre": {
    "cpes": [],
    "created": "2021-06-16T00:25:11+00:00",
    "description": "tEnvoy contains the PGP, NaCl, and PBKDF2 in node.js and the browser (hashing, random, encryption, decryption, signatures, conversions), used by TogaTech.org. In versions prior to 7.0.3, the `verifyWithMessage` method of `tEnvoyNaClSigningKey` always returns `true` for any signature that has a SHA-512 hash matching the SHA-512 hash of the message even if the signature was invalid. This issue is patched in version 7.0.3. As a workaround: In `tenvoy.js` under the `verifyWithMessage` method definition within the `tEnvoyNaClSigningKey` class, ensure that the return statement call to `this.verify` ends in `.verified`.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/32xxx/CVE-2021-32685.json",
    "references": [
      "https://github.com/TogaTech/tEnvoy/commit/a121b34a45e289d775c62e58841522891dee686b",
      "https://github.com/TogaTech/tEnvoy/releases/tag/v7.0.3",
      "https://github.com/TogaTech/tEnvoy/security/advisories/GHSA-7r96-8g3x-g36m"
    ],
    "title": "Improper Verification of Cryptographic Signature in tenvoy",
    "updated": "2024-08-03T23:25:31.108000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-347"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:togatech:tenvoy:*:*:*:*:*:node.js:*:*"
    ],
    "created": "2021-06-16T01:15:06.930000+00:00",
    "description": "tEnvoy contains the PGP, NaCl, and PBKDF2 in node.js and the browser (hashing, random, encryption, decryption, signatures, conversions), used by TogaTech.org. In versions prior to 7.0.3, the `verifyWithMessage` method of `tEnvoyNaClSigningKey` always returns `true` for any signature that has a SHA-512 hash matching the SHA-512 hash of the message even if the signature was invalid. This issue is patched in version 7.0.3. As a workaround: In `tenvoy.js` under the `verifyWithMessage` method definition within the `tEnvoyNaClSigningKey` class, ensure that the return statement call to `this.verify` ends in `.verified`.",
    "metrics": {
      "cvssV2_0": {
        "score": 7.5,
        "vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 9.8,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-32685.json",
    "references": [
      "https://github.com/TogaTech/tEnvoy/commit/a121b34a45e289d775c62e58841522891dee686b",
      "https://github.com/TogaTech/tEnvoy/releases/tag/v7.0.3",
      "https://github.com/TogaTech/tEnvoy/security/advisories/GHSA-7r96-8g3x-g36m"
    ],
    "title": null,
    "updated": "2021-06-23T20:09:12.343000+00:00",
    "vendors": [
      "togatech",
      "togatech$PRODUCT$tenvoy"
    ],
    "weaknesses": [
      "CWE-347"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:togatech:tenvoy:*:*:*:*:*:node.js:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2021-06-16T00:25:11+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "tEnvoy contains the PGP, NaCl, and PBKDF2 in node.js and the browser (hashing, random, encryption, decryption, signatures, conversions), used by TogaTech.org. In versions prior to 7.0.3, the `verifyWithMessage` method of `tEnvoyNaClSigningKey` always returns `true` for any signature that has a SHA-512 hash matching the SHA-512 hash of the message even if the signature was invalid. This issue is patched in version 7.0.3. As a workaround: In `tenvoy.js` under the `verifyWithMessage` method definition within the `tEnvoyNaClSigningKey` class, ensure that the return statement call to `this.verify` ends in `.verified`.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 7.5,
          "vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 9.8,
          "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://github.com/TogaTech/tEnvoy/commit/a121b34a45e289d775c62e58841522891dee686b",
        "https://github.com/TogaTech/tEnvoy/releases/tag/v7.0.3",
        "https://github.com/TogaTech/tEnvoy/security/advisories/GHSA-7r96-8g3x-g36m"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "Improper Verification of Cryptographic Signature in tenvoy",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-03T23:25:31.108000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "togatech",
        "togatech$PRODUCT$tenvoy"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-347"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    }
  }
}