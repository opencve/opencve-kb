{
  "cve": "CVE-2021-46974",
  "mitre": {
    "cpes": [],
    "created": "2024-02-27T18:47:08.487000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix masking negation logic upon negative dst register\n\nThe negation logic for the case where the off_reg is sitting in the\ndst register is not correct given then we cannot just invert the add\nto a sub or vice versa. As a fix, perform the final bitwise and-op\nunconditionally into AX from the off_reg, then move the pointer from\nthe src to dst and finally use AX as the source for the original\npointer arithmetic operation such that the inversion yields a correct\nresult. The single non-AX mov in between is possible given constant\nblinding is retaining it as it's not an immediate based operation.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/46xxx/CVE-2021-46974.json",
    "references": [
      "https://git.kernel.org/stable/c/0e2dfdc74a7f4036127356d42ea59388f153f42c",
      "https://git.kernel.org/stable/c/2cfa537674cd1051a3b8111536d77d0558f33d5d",
      "https://git.kernel.org/stable/c/4d542ddb88fb2f39bf7f14caa2902f3e8d06f6ba",
      "https://git.kernel.org/stable/c/53e0db429b37a32b8fc706d0d90eb4583ad13848",
      "https://git.kernel.org/stable/c/6eba92a4d4be8feb4dc33976abac544fa99d6ecc",
      "https://git.kernel.org/stable/c/7cf64d8679ca1cb20cf57d6a88bfee79a0922a66",
      "https://git.kernel.org/stable/c/b9b34ddbe2076ade359cd5ce7537d5ed019e9807"
    ],
    "title": "bpf: Fix masking negation logic upon negative dst register",
    "updated": "2024-08-04T05:17:43.104000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-02-27T19:04:07.500000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix masking negation logic upon negative dst register\n\nThe negation logic for the case where the off_reg is sitting in the\ndst register is not correct given then we cannot just invert the add\nto a sub or vice versa. As a fix, perform the final bitwise and-op\nunconditionally into AX from the off_reg, then move the pointer from\nthe src to dst and finally use AX as the source for the original\npointer arithmetic operation such that the inversion yields a correct\nresult. The single non-AX mov in between is possible given constant\nblinding is retaining it as it's not an immediate based operation.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-46974.json",
    "references": [
      "https://git.kernel.org/stable/c/0e2dfdc74a7f4036127356d42ea59388f153f42c",
      "https://git.kernel.org/stable/c/2cfa537674cd1051a3b8111536d77d0558f33d5d",
      "https://git.kernel.org/stable/c/4d542ddb88fb2f39bf7f14caa2902f3e8d06f6ba",
      "https://git.kernel.org/stable/c/53e0db429b37a32b8fc706d0d90eb4583ad13848",
      "https://git.kernel.org/stable/c/6eba92a4d4be8feb4dc33976abac544fa99d6ecc",
      "https://git.kernel.org/stable/c/7cf64d8679ca1cb20cf57d6a88bfee79a0922a66",
      "https://git.kernel.org/stable/c/b9b34ddbe2076ade359cd5ce7537d5ed019e9807"
    ],
    "title": null,
    "updated": "2024-02-28T14:06:45.783000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-02-27T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix masking negation logic upon negative dst register\n\nThe negation logic for the case where the off_reg is sitting in the\ndst register is not correct given then we cannot just invert the add\nto a sub or vice versa. As a fix, perform the final bitwise and-op\nunconditionally into AX from the off_reg, then move the pointer from\nthe src to dst and finally use AX as the source for the original\npointer arithmetic operation such that the inversion yields a correct\nresult. The single non-AX mov in between is possible given constant\nblinding is retaining it as it's not an immediate based operation.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 2.3,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:L"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Moderate",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/0e2dfdc74a7f4036127356d42ea59388f153f42c",
        "https://git.kernel.org/stable/c/2cfa537674cd1051a3b8111536d77d0558f33d5d",
        "https://git.kernel.org/stable/c/4d542ddb88fb2f39bf7f14caa2902f3e8d06f6ba",
        "https://git.kernel.org/stable/c/53e0db429b37a32b8fc706d0d90eb4583ad13848",
        "https://git.kernel.org/stable/c/6eba92a4d4be8feb4dc33976abac544fa99d6ecc",
        "https://git.kernel.org/stable/c/7cf64d8679ca1cb20cf57d6a88bfee79a0922a66",
        "https://git.kernel.org/stable/c/b9b34ddbe2076ade359cd5ce7537d5ed019e9807",
        "https://lore.kernel.org/linux-cve-announce/2024022721-CVE-2021-46974-0852@gregkh/T/#u",
        "https://nvd.nist.gov/vuln/detail/CVE-2021-46974",
        "https://www.cve.org/CVERecord?id=CVE-2021-46974"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "bpf: Fix masking negation logic upon negative dst register",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-04T05:17:43.104000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-20"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-02-27T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nbpf: Fix masking negation logic upon negative dst register\nThe negation logic for the case where the off_reg is sitting in the\ndst register is not correct given then we cannot just invert the add\nto a sub or vice versa. As a fix, perform the final bitwise and-op\nunconditionally into AX from the off_reg, then move the pointer from\nthe src to dst and finally use AX as the source for the original\npointer arithmetic operation such that the inversion yields a correct\nresult. The single non-AX mov in between is possible given constant\nblinding is retaining it as it's not an immediate based operation.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 2.3,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:L"
      },
      "threat_severity": "Moderate"
    },
    "redhat_repo_path": "2021/CVE-2021-46974.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024022721-CVE-2021-46974-0852@gregkh/T/#u",
      "https://nvd.nist.gov/vuln/detail/CVE-2021-46974",
      "https://www.cve.org/CVERecord?id=CVE-2021-46974"
    ],
    "title": "kernel: bpf: Fix masking negation logic upon negative dst register",
    "updated": "2024-02-27T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-20"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-02-27T18:47:08.487000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix masking negation logic upon negative dst register\n\nThe negation logic for the case where the off_reg is sitting in the\ndst register is not correct given then we cannot just invert the add\nto a sub or vice versa. As a fix, perform the final bitwise and-op\nunconditionally into AX from the off_reg, then move the pointer from\nthe src to dst and finally use AX as the source for the original\npointer arithmetic operation such that the inversion yields a correct\nresult. The single non-AX mov in between is possible given constant\nblinding is retaining it as it's not an immediate based operation.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/0e2dfdc74a7f4036127356d42ea59388f153f42c",
      "https://git.kernel.org/stable/c/2cfa537674cd1051a3b8111536d77d0558f33d5d",
      "https://git.kernel.org/stable/c/4d542ddb88fb2f39bf7f14caa2902f3e8d06f6ba",
      "https://git.kernel.org/stable/c/53e0db429b37a32b8fc706d0d90eb4583ad13848",
      "https://git.kernel.org/stable/c/6eba92a4d4be8feb4dc33976abac544fa99d6ecc",
      "https://git.kernel.org/stable/c/7cf64d8679ca1cb20cf57d6a88bfee79a0922a66",
      "https://git.kernel.org/stable/c/b9b34ddbe2076ade359cd5ce7537d5ed019e9807"
    ],
    "title": "bpf: Fix masking negation logic upon negative dst register",
    "updated": "2024-08-04T05:17:43.104000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2021/46xxx/CVE-2021-46974.json",
    "weaknesses": []
  }
}