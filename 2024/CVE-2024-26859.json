{
  "cve": "CVE-2024-26859",
  "mitre": {
    "cpes": [],
    "created": "2024-04-17T10:27:23.709000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/bnx2x: Prevent access to a freed page in page_pool\n\nFix race condition leading to system crash during EEH error handling\n\nDuring EEH error recovery, the bnx2x driver's transmit timeout logic\ncould cause a race condition when handling reset tasks. The\nbnx2x_tx_timeout() schedules reset tasks via bnx2x_sp_rtnl_task(),\nwhich ultimately leads to bnx2x_nic_unload(). In bnx2x_nic_unload()\nSGEs are freed using bnx2x_free_rx_sge_range(). However, this could\noverlap with the EEH driver's attempt to reset the device using\nbnx2x_io_slot_reset(), which also tries to free SGEs. This race\ncondition can result in system crashes due to accessing freed memory\nlocations in bnx2x_free_rx_sge()\n\n799  static inline void bnx2x_free_rx_sge(struct bnx2x *bp,\n800\t\t\t\tstruct bnx2x_fastpath *fp, u16 index)\n801  {\n802\tstruct sw_rx_page *sw_buf = &fp->rx_page_ring[index];\n803     struct page *page = sw_buf->page;\n....\nwhere sw_buf was set to NULL after the call to dma_unmap_page()\nby the preceding thread.\n\n    EEH: Beginning: 'slot_reset'\n    PCI 0011:01:00.0#10000: EEH: Invoking bnx2x->slot_reset()\n    bnx2x: [bnx2x_io_slot_reset:14228(eth1)]IO slot reset initializing...\n    bnx2x 0011:01:00.0: enabling device (0140 -> 0142)\n    bnx2x: [bnx2x_io_slot_reset:14244(eth1)]IO slot reset --> driver unload\n    Kernel attempted to read user page (0) - exploit attempt? (uid: 0)\n    BUG: Kernel NULL pointer dereference on read at 0x00000000\n    Faulting instruction address: 0xc0080000025065fc\n    Oops: Kernel access of bad area, sig: 11 [#1]\n    .....\n    Call Trace:\n    [c000000003c67a20] [c00800000250658c] bnx2x_io_slot_reset+0x204/0x610 [bnx2x] (unreliable)\n    [c000000003c67af0] [c0000000000518a8] eeh_report_reset+0xb8/0xf0\n    [c000000003c67b60] [c000000000052130] eeh_pe_report+0x180/0x550\n    [c000000003c67c70] [c00000000005318c] eeh_handle_normal_event+0x84c/0xa60\n    [c000000003c67d50] [c000000000053a84] eeh_event_handler+0xf4/0x170\n    [c000000003c67da0] [c000000000194c58] kthread+0x1c8/0x1d0\n    [c000000003c67e10] [c00000000000cf64] ret_from_kernel_thread+0x5c/0x64\n\nTo solve this issue, we need to verify page pool allocations before\nfreeing.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2024/26xxx/CVE-2024-26859.json",
    "references": [
      "https://git.kernel.org/stable/c/3a9f78b297e08ca8e88ae3ecff1f6fe2766dc5eb",
      "https://git.kernel.org/stable/c/44f9f1abb0ecc43023225ab9539167facbabf0ec",
      "https://git.kernel.org/stable/c/4f37d3a7e004bbf560c21441ca9c022168017ec4",
      "https://git.kernel.org/stable/c/7bcc090c81116c66936a7415f2c6b1483a4bcfd9",
      "https://git.kernel.org/stable/c/8eebff95ce9558be66a36aa7cfb43223f3ab4699",
      "https://git.kernel.org/stable/c/8ffcd3ccdbda0c918c4a0f922ef1c17010f1b598",
      "https://git.kernel.org/stable/c/c51f8b6930db3f259b8820b589f2459d2df3fc68",
      "https://git.kernel.org/stable/c/cf7d8cba639ae792a42c2a137b495eac262ac36c",
      "https://git.kernel.org/stable/c/d27e2da94a42655861ca4baea30c8cd65546f25d",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html"
    ],
    "title": "net/bnx2x: Prevent access to a freed page in page_pool",
    "updated": "2024-08-02T00:14:13.698000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-04-17T11:15:08.893000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/bnx2x: Prevent access to a freed page in page_pool\n\nFix race condition leading to system crash during EEH error handling\n\nDuring EEH error recovery, the bnx2x driver's transmit timeout logic\ncould cause a race condition when handling reset tasks. The\nbnx2x_tx_timeout() schedules reset tasks via bnx2x_sp_rtnl_task(),\nwhich ultimately leads to bnx2x_nic_unload(). In bnx2x_nic_unload()\nSGEs are freed using bnx2x_free_rx_sge_range(). However, this could\noverlap with the EEH driver's attempt to reset the device using\nbnx2x_io_slot_reset(), which also tries to free SGEs. This race\ncondition can result in system crashes due to accessing freed memory\nlocations in bnx2x_free_rx_sge()\n\n799  static inline void bnx2x_free_rx_sge(struct bnx2x *bp,\n800\t\t\t\tstruct bnx2x_fastpath *fp, u16 index)\n801  {\n802\tstruct sw_rx_page *sw_buf = &fp->rx_page_ring[index];\n803     struct page *page = sw_buf->page;\n....\nwhere sw_buf was set to NULL after the call to dma_unmap_page()\nby the preceding thread.\n\n    EEH: Beginning: 'slot_reset'\n    PCI 0011:01:00.0#10000: EEH: Invoking bnx2x->slot_reset()\n    bnx2x: [bnx2x_io_slot_reset:14228(eth1)]IO slot reset initializing...\n    bnx2x 0011:01:00.0: enabling device (0140 -> 0142)\n    bnx2x: [bnx2x_io_slot_reset:14244(eth1)]IO slot reset --> driver unload\n    Kernel attempted to read user page (0) - exploit attempt? (uid: 0)\n    BUG: Kernel NULL pointer dereference on read at 0x00000000\n    Faulting instruction address: 0xc0080000025065fc\n    Oops: Kernel access of bad area, sig: 11 [#1]\n    .....\n    Call Trace:\n    [c000000003c67a20] [c00800000250658c] bnx2x_io_slot_reset+0x204/0x610 [bnx2x] (unreliable)\n    [c000000003c67af0] [c0000000000518a8] eeh_report_reset+0xb8/0xf0\n    [c000000003c67b60] [c000000000052130] eeh_pe_report+0x180/0x550\n    [c000000003c67c70] [c00000000005318c] eeh_handle_normal_event+0x84c/0xa60\n    [c000000003c67d50] [c000000000053a84] eeh_event_handler+0xf4/0x170\n    [c000000003c67da0] [c000000000194c58] kthread+0x1c8/0x1d0\n    [c000000003c67e10] [c00000000000cf64] ret_from_kernel_thread+0x5c/0x64\n\nTo solve this issue, we need to verify page pool allocations before\nfreeing.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2024/CVE-2024-26859.json",
    "references": [
      "https://git.kernel.org/stable/c/3a9f78b297e08ca8e88ae3ecff1f6fe2766dc5eb",
      "https://git.kernel.org/stable/c/44f9f1abb0ecc43023225ab9539167facbabf0ec",
      "https://git.kernel.org/stable/c/4f37d3a7e004bbf560c21441ca9c022168017ec4",
      "https://git.kernel.org/stable/c/7bcc090c81116c66936a7415f2c6b1483a4bcfd9",
      "https://git.kernel.org/stable/c/8eebff95ce9558be66a36aa7cfb43223f3ab4699",
      "https://git.kernel.org/stable/c/8ffcd3ccdbda0c918c4a0f922ef1c17010f1b598",
      "https://git.kernel.org/stable/c/c51f8b6930db3f259b8820b589f2459d2df3fc68",
      "https://git.kernel.org/stable/c/cf7d8cba639ae792a42c2a137b495eac262ac36c",
      "https://git.kernel.org/stable/c/d27e2da94a42655861ca4baea30c8cd65546f25d",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html"
    ],
    "title": null,
    "updated": "2024-06-27T12:15:21.563000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:/a:redhat:enterprise_linux:8::nfv",
        "cpe:/o:redhat:enterprise_linux:8"
      ],
      "providers": [
        "redhat"
      ]
    },
    "created": {
      "data": "2024-04-17T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/bnx2x: Prevent access to a freed page in page_pool\n\nFix race condition leading to system crash during EEH error handling\n\nDuring EEH error recovery, the bnx2x driver's transmit timeout logic\ncould cause a race condition when handling reset tasks. The\nbnx2x_tx_timeout() schedules reset tasks via bnx2x_sp_rtnl_task(),\nwhich ultimately leads to bnx2x_nic_unload(). In bnx2x_nic_unload()\nSGEs are freed using bnx2x_free_rx_sge_range(). However, this could\noverlap with the EEH driver's attempt to reset the device using\nbnx2x_io_slot_reset(), which also tries to free SGEs. This race\ncondition can result in system crashes due to accessing freed memory\nlocations in bnx2x_free_rx_sge()\n\n799  static inline void bnx2x_free_rx_sge(struct bnx2x *bp,\n800\t\t\t\tstruct bnx2x_fastpath *fp, u16 index)\n801  {\n802\tstruct sw_rx_page *sw_buf = &fp->rx_page_ring[index];\n803     struct page *page = sw_buf->page;\n....\nwhere sw_buf was set to NULL after the call to dma_unmap_page()\nby the preceding thread.\n\n    EEH: Beginning: 'slot_reset'\n    PCI 0011:01:00.0#10000: EEH: Invoking bnx2x->slot_reset()\n    bnx2x: [bnx2x_io_slot_reset:14228(eth1)]IO slot reset initializing...\n    bnx2x 0011:01:00.0: enabling device (0140 -> 0142)\n    bnx2x: [bnx2x_io_slot_reset:14244(eth1)]IO slot reset --> driver unload\n    Kernel attempted to read user page (0) - exploit attempt? (uid: 0)\n    BUG: Kernel NULL pointer dereference on read at 0x00000000\n    Faulting instruction address: 0xc0080000025065fc\n    Oops: Kernel access of bad area, sig: 11 [#1]\n    .....\n    Call Trace:\n    [c000000003c67a20] [c00800000250658c] bnx2x_io_slot_reset+0x204/0x610 [bnx2x] (unreliable)\n    [c000000003c67af0] [c0000000000518a8] eeh_report_reset+0xb8/0xf0\n    [c000000003c67b60] [c000000000052130] eeh_pe_report+0x180/0x550\n    [c000000003c67c70] [c00000000005318c] eeh_handle_normal_event+0x84c/0xa60\n    [c000000003c67d50] [c000000000053a84] eeh_event_handler+0xf4/0x170\n    [c000000003c67da0] [c000000000194c58] kthread+0x1c8/0x1d0\n    [c000000003c67e10] [c00000000000cf64] ret_from_kernel_thread+0x5c/0x64\n\nTo solve this issue, we need to verify page pool allocations before\nfreeing.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 4.1,
          "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Low",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/3a9f78b297e08ca8e88ae3ecff1f6fe2766dc5eb",
        "https://git.kernel.org/stable/c/44f9f1abb0ecc43023225ab9539167facbabf0ec",
        "https://git.kernel.org/stable/c/4f37d3a7e004bbf560c21441ca9c022168017ec4",
        "https://git.kernel.org/stable/c/7bcc090c81116c66936a7415f2c6b1483a4bcfd9",
        "https://git.kernel.org/stable/c/8eebff95ce9558be66a36aa7cfb43223f3ab4699",
        "https://git.kernel.org/stable/c/8ffcd3ccdbda0c918c4a0f922ef1c17010f1b598",
        "https://git.kernel.org/stable/c/c51f8b6930db3f259b8820b589f2459d2df3fc68",
        "https://git.kernel.org/stable/c/cf7d8cba639ae792a42c2a137b495eac262ac36c",
        "https://git.kernel.org/stable/c/d27e2da94a42655861ca4baea30c8cd65546f25d",
        "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html",
        "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html",
        "https://lore.kernel.org/linux-cve-announce/2024041735-CVE-2024-26859-a906@gregkh/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2024-26859",
        "https://www.cve.org/CVERecord?id=CVE-2024-26859"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "net/bnx2x: Prevent access to a freed page in page_pool",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T00:14:13.698000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "redhat",
        "redhat$PRODUCT$enterprise_linux"
      ],
      "providers": [
        "redhat"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-362"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [
      "cpe:/a:redhat:enterprise_linux:8::nfv",
      "cpe:/o:redhat:enterprise_linux:8"
    ],
    "created": "2024-04-17T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nnet/bnx2x: Prevent access to a freed page in page_pool\nFix race condition leading to system crash during EEH error handling\nDuring EEH error recovery, the bnx2x driver's transmit timeout logic\ncould cause a race condition when handling reset tasks. The\nbnx2x_tx_timeout() schedules reset tasks via bnx2x_sp_rtnl_task(),\nwhich ultimately leads to bnx2x_nic_unload(). In bnx2x_nic_unload()\nSGEs are freed using bnx2x_free_rx_sge_range(). However, this could\noverlap with the EEH driver's attempt to reset the device using\nbnx2x_io_slot_reset(), which also tries to free SGEs. This race\ncondition can result in system crashes due to accessing freed memory\nlocations in bnx2x_free_rx_sge()\n799  static inline void bnx2x_free_rx_sge(struct bnx2x *bp,\n800struct bnx2x_fastpath *fp, u16 index)\n801  {\n802struct sw_rx_page *sw_buf = &fp->rx_page_ring[index];\n803     struct page *page = sw_buf->page;\n....\nwhere sw_buf was set to NULL after the call to dma_unmap_page()\nby the preceding thread.\nEEH: Beginning: 'slot_reset'\nPCI 0011:01:00.0#10000: EEH: Invoking bnx2x->slot_reset()\nbnx2x: [bnx2x_io_slot_reset:14228(eth1)]IO slot reset initializing...\nbnx2x 0011:01:00.0: enabling device (0140 -> 0142)\nbnx2x: [bnx2x_io_slot_reset:14244(eth1)]IO slot reset --> driver unload\nKernel attempted to read user page (0) - exploit attempt? (uid: 0)\nBUG: Kernel NULL pointer dereference on read at 0x00000000\nFaulting instruction address: 0xc0080000025065fc\nOops: Kernel access of bad area, sig: 11 [#1]\n.....\nCall Trace:\n[c000000003c67a20] [c00800000250658c] bnx2x_io_slot_reset+0x204/0x610 [bnx2x] (unreliable)\n[c000000003c67af0] [c0000000000518a8] eeh_report_reset+0xb8/0xf0\n[c000000003c67b60] [c000000000052130] eeh_pe_report+0x180/0x550\n[c000000003c67c70] [c00000000005318c] eeh_handle_normal_event+0x84c/0xa60\n[c000000003c67d50] [c000000000053a84] eeh_event_handler+0xf4/0x170\n[c000000003c67da0] [c000000000194c58] kthread+0x1c8/0x1d0\n[c000000003c67e10] [c00000000000cf64] ret_from_kernel_thread+0x5c/0x64\nTo solve this issue, we need to verify page pool allocations before\nfreeing.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 4.1,
        "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Low"
    },
    "redhat_repo_path": "2024/CVE-2024-26859.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024041735-CVE-2024-26859-a906@gregkh/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2024-26859",
      "https://www.cve.org/CVERecord?id=CVE-2024-26859"
    ],
    "title": "kernel: net/bnx2x: Prevent access to a freed page in page_pool",
    "updated": "2024-04-17T00:00:00+00:00",
    "vendors": [
      "redhat",
      "redhat$PRODUCT$enterprise_linux"
    ],
    "weaknesses": [
      "CWE-362"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-04-17T10:27:23.709000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet/bnx2x: Prevent access to a freed page in page_pool\n\nFix race condition leading to system crash during EEH error handling\n\nDuring EEH error recovery, the bnx2x driver's transmit timeout logic\ncould cause a race condition when handling reset tasks. The\nbnx2x_tx_timeout() schedules reset tasks via bnx2x_sp_rtnl_task(),\nwhich ultimately leads to bnx2x_nic_unload(). In bnx2x_nic_unload()\nSGEs are freed using bnx2x_free_rx_sge_range(). However, this could\noverlap with the EEH driver's attempt to reset the device using\nbnx2x_io_slot_reset(), which also tries to free SGEs. This race\ncondition can result in system crashes due to accessing freed memory\nlocations in bnx2x_free_rx_sge()\n\n799  static inline void bnx2x_free_rx_sge(struct bnx2x *bp,\n800\t\t\t\tstruct bnx2x_fastpath *fp, u16 index)\n801  {\n802\tstruct sw_rx_page *sw_buf = &fp->rx_page_ring[index];\n803     struct page *page = sw_buf->page;\n....\nwhere sw_buf was set to NULL after the call to dma_unmap_page()\nby the preceding thread.\n\n    EEH: Beginning: 'slot_reset'\n    PCI 0011:01:00.0#10000: EEH: Invoking bnx2x->slot_reset()\n    bnx2x: [bnx2x_io_slot_reset:14228(eth1)]IO slot reset initializing...\n    bnx2x 0011:01:00.0: enabling device (0140 -> 0142)\n    bnx2x: [bnx2x_io_slot_reset:14244(eth1)]IO slot reset --> driver unload\n    Kernel attempted to read user page (0) - exploit attempt? (uid: 0)\n    BUG: Kernel NULL pointer dereference on read at 0x00000000\n    Faulting instruction address: 0xc0080000025065fc\n    Oops: Kernel access of bad area, sig: 11 [#1]\n    .....\n    Call Trace:\n    [c000000003c67a20] [c00800000250658c] bnx2x_io_slot_reset+0x204/0x610 [bnx2x] (unreliable)\n    [c000000003c67af0] [c0000000000518a8] eeh_report_reset+0xb8/0xf0\n    [c000000003c67b60] [c000000000052130] eeh_pe_report+0x180/0x550\n    [c000000003c67c70] [c00000000005318c] eeh_handle_normal_event+0x84c/0xa60\n    [c000000003c67d50] [c000000000053a84] eeh_event_handler+0xf4/0x170\n    [c000000003c67da0] [c000000000194c58] kthread+0x1c8/0x1d0\n    [c000000003c67e10] [c00000000000cf64] ret_from_kernel_thread+0x5c/0x64\n\nTo solve this issue, we need to verify page pool allocations before\nfreeing.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/3a9f78b297e08ca8e88ae3ecff1f6fe2766dc5eb",
      "https://git.kernel.org/stable/c/44f9f1abb0ecc43023225ab9539167facbabf0ec",
      "https://git.kernel.org/stable/c/4f37d3a7e004bbf560c21441ca9c022168017ec4",
      "https://git.kernel.org/stable/c/7bcc090c81116c66936a7415f2c6b1483a4bcfd9",
      "https://git.kernel.org/stable/c/8eebff95ce9558be66a36aa7cfb43223f3ab4699",
      "https://git.kernel.org/stable/c/8ffcd3ccdbda0c918c4a0f922ef1c17010f1b598",
      "https://git.kernel.org/stable/c/c51f8b6930db3f259b8820b589f2459d2df3fc68",
      "https://git.kernel.org/stable/c/cf7d8cba639ae792a42c2a137b495eac262ac36c",
      "https://git.kernel.org/stable/c/d27e2da94a42655861ca4baea30c8cd65546f25d",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html"
    ],
    "title": "net/bnx2x: Prevent access to a freed page in page_pool",
    "updated": "2024-08-02T00:14:13.698000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2024/26xxx/CVE-2024-26859.json",
    "weaknesses": []
  }
}