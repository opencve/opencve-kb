{
  "cve": "CVE-2023-52523",
  "mitre": {
    "cpes": [],
    "created": "2024-03-02T21:52:30.351000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets\n\nWith a SOCKMAP/SOCKHASH map and an sk_msg program user can steer messages\nsent from one TCP socket (s1) to actually egress from another TCP\nsocket (s2):\n\ntcp_bpf_sendmsg(s1)\t\t// = sk_prot->sendmsg\n  tcp_bpf_send_verdict(s1)\t// __SK_REDIRECT case\n    tcp_bpf_sendmsg_redir(s2)\n      tcp_bpf_push_locked(s2)\n\ttcp_bpf_push(s2)\n\t  tcp_rate_check_app_limited(s2) // expects tcp_sock\n\t  tcp_sendmsg_locked(s2)\t // ditto\n\nThere is a hard-coded assumption in the call-chain, that the egress\nsocket (s2) is a TCP socket.\n\nHowever in commit 122e6c79efe1 (\"sock_map: Update sock type checks for\nUDP\") we have enabled redirects to non-TCP sockets. This was done for the\nsake of BPF sk_skb programs. There was no indention to support sk_msg\nsend-to-egress use case.\n\nAs a result, attempts to send-to-egress through a non-TCP socket lead to a\ncrash due to invalid downcast from sock to tcp_sock:\n\n BUG: kernel NULL pointer dereference, address: 000000000000002f\n ...\n Call Trace:\n  <TASK>\n  ? show_regs+0x60/0x70\n  ? __die+0x1f/0x70\n  ? page_fault_oops+0x80/0x160\n  ? do_user_addr_fault+0x2d7/0x800\n  ? rcu_is_watching+0x11/0x50\n  ? exc_page_fault+0x70/0x1c0\n  ? asm_exc_page_fault+0x27/0x30\n  ? tcp_tso_segs+0x14/0xa0\n  tcp_write_xmit+0x67/0xce0\n  __tcp_push_pending_frames+0x32/0xf0\n  tcp_push+0x107/0x140\n  tcp_sendmsg_locked+0x99f/0xbb0\n  tcp_bpf_push+0x19d/0x3a0\n  tcp_bpf_sendmsg_redir+0x55/0xd0\n  tcp_bpf_send_verdict+0x407/0x550\n  tcp_bpf_sendmsg+0x1a1/0x390\n  inet_sendmsg+0x6a/0x70\n  sock_sendmsg+0x9d/0xc0\n  ? sockfd_lookup_light+0x12/0x80\n  __sys_sendto+0x10e/0x160\n  ? syscall_enter_from_user_mode+0x20/0x60\n  ? __this_cpu_preempt_check+0x13/0x20\n  ? lockdep_hardirqs_on+0x82/0x110\n  __x64_sys_sendto+0x1f/0x30\n  do_syscall_64+0x38/0x90\n  entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nReject selecting a non-TCP sockets as redirect target from a BPF sk_msg\nprogram to prevent the crash. When attempted, user will receive an EACCES\nerror from send/sendto/sendmsg() syscall.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2023/52xxx/CVE-2023-52523.json",
    "references": [
      "https://git.kernel.org/stable/c/b80e31baa43614e086a9d29dc1151932b1bd7fc5",
      "https://git.kernel.org/stable/c/b8f97e47b6fb84fcf2f5a22e725eefb6cf5070c2",
      "https://git.kernel.org/stable/c/bc8b89b6963803a123f64aa9494155a037b3d728",
      "https://git.kernel.org/stable/c/ded6e448028f0f91b6af35985afca01fa02a9089"
    ],
    "title": "bpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets",
    "updated": "2024-08-02T23:03:20.665000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-03-02T22:15:48.213000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets\n\nWith a SOCKMAP/SOCKHASH map and an sk_msg program user can steer messages\nsent from one TCP socket (s1) to actually egress from another TCP\nsocket (s2):\n\ntcp_bpf_sendmsg(s1)\t\t// = sk_prot->sendmsg\n  tcp_bpf_send_verdict(s1)\t// __SK_REDIRECT case\n    tcp_bpf_sendmsg_redir(s2)\n      tcp_bpf_push_locked(s2)\n\ttcp_bpf_push(s2)\n\t  tcp_rate_check_app_limited(s2) // expects tcp_sock\n\t  tcp_sendmsg_locked(s2)\t // ditto\n\nThere is a hard-coded assumption in the call-chain, that the egress\nsocket (s2) is a TCP socket.\n\nHowever in commit 122e6c79efe1 (\"sock_map: Update sock type checks for\nUDP\") we have enabled redirects to non-TCP sockets. This was done for the\nsake of BPF sk_skb programs. There was no indention to support sk_msg\nsend-to-egress use case.\n\nAs a result, attempts to send-to-egress through a non-TCP socket lead to a\ncrash due to invalid downcast from sock to tcp_sock:\n\n BUG: kernel NULL pointer dereference, address: 000000000000002f\n ...\n Call Trace:\n  <TASK>\n  ? show_regs+0x60/0x70\n  ? __die+0x1f/0x70\n  ? page_fault_oops+0x80/0x160\n  ? do_user_addr_fault+0x2d7/0x800\n  ? rcu_is_watching+0x11/0x50\n  ? exc_page_fault+0x70/0x1c0\n  ? asm_exc_page_fault+0x27/0x30\n  ? tcp_tso_segs+0x14/0xa0\n  tcp_write_xmit+0x67/0xce0\n  __tcp_push_pending_frames+0x32/0xf0\n  tcp_push+0x107/0x140\n  tcp_sendmsg_locked+0x99f/0xbb0\n  tcp_bpf_push+0x19d/0x3a0\n  tcp_bpf_sendmsg_redir+0x55/0xd0\n  tcp_bpf_send_verdict+0x407/0x550\n  tcp_bpf_sendmsg+0x1a1/0x390\n  inet_sendmsg+0x6a/0x70\n  sock_sendmsg+0x9d/0xc0\n  ? sockfd_lookup_light+0x12/0x80\n  __sys_sendto+0x10e/0x160\n  ? syscall_enter_from_user_mode+0x20/0x60\n  ? __this_cpu_preempt_check+0x13/0x20\n  ? lockdep_hardirqs_on+0x82/0x110\n  __x64_sys_sendto+0x1f/0x30\n  do_syscall_64+0x38/0x90\n  entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nReject selecting a non-TCP sockets as redirect target from a BPF sk_msg\nprogram to prevent the crash. When attempted, user will receive an EACCES\nerror from send/sendto/sendmsg() syscall.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2023/CVE-2023-52523.json",
    "references": [
      "https://git.kernel.org/stable/c/b80e31baa43614e086a9d29dc1151932b1bd7fc5",
      "https://git.kernel.org/stable/c/b8f97e47b6fb84fcf2f5a22e725eefb6cf5070c2",
      "https://git.kernel.org/stable/c/bc8b89b6963803a123f64aa9494155a037b3d728",
      "https://git.kernel.org/stable/c/ded6e448028f0f91b6af35985afca01fa02a9089"
    ],
    "title": null,
    "updated": "2024-03-04T13:58:23.447000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-03-02T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets\n\nWith a SOCKMAP/SOCKHASH map and an sk_msg program user can steer messages\nsent from one TCP socket (s1) to actually egress from another TCP\nsocket (s2):\n\ntcp_bpf_sendmsg(s1)\t\t// = sk_prot->sendmsg\n  tcp_bpf_send_verdict(s1)\t// __SK_REDIRECT case\n    tcp_bpf_sendmsg_redir(s2)\n      tcp_bpf_push_locked(s2)\n\ttcp_bpf_push(s2)\n\t  tcp_rate_check_app_limited(s2) // expects tcp_sock\n\t  tcp_sendmsg_locked(s2)\t // ditto\n\nThere is a hard-coded assumption in the call-chain, that the egress\nsocket (s2) is a TCP socket.\n\nHowever in commit 122e6c79efe1 (\"sock_map: Update sock type checks for\nUDP\") we have enabled redirects to non-TCP sockets. This was done for the\nsake of BPF sk_skb programs. There was no indention to support sk_msg\nsend-to-egress use case.\n\nAs a result, attempts to send-to-egress through a non-TCP socket lead to a\ncrash due to invalid downcast from sock to tcp_sock:\n\n BUG: kernel NULL pointer dereference, address: 000000000000002f\n ...\n Call Trace:\n  <TASK>\n  ? show_regs+0x60/0x70\n  ? __die+0x1f/0x70\n  ? page_fault_oops+0x80/0x160\n  ? do_user_addr_fault+0x2d7/0x800\n  ? rcu_is_watching+0x11/0x50\n  ? exc_page_fault+0x70/0x1c0\n  ? asm_exc_page_fault+0x27/0x30\n  ? tcp_tso_segs+0x14/0xa0\n  tcp_write_xmit+0x67/0xce0\n  __tcp_push_pending_frames+0x32/0xf0\n  tcp_push+0x107/0x140\n  tcp_sendmsg_locked+0x99f/0xbb0\n  tcp_bpf_push+0x19d/0x3a0\n  tcp_bpf_sendmsg_redir+0x55/0xd0\n  tcp_bpf_send_verdict+0x407/0x550\n  tcp_bpf_sendmsg+0x1a1/0x390\n  inet_sendmsg+0x6a/0x70\n  sock_sendmsg+0x9d/0xc0\n  ? sockfd_lookup_light+0x12/0x80\n  __sys_sendto+0x10e/0x160\n  ? syscall_enter_from_user_mode+0x20/0x60\n  ? __this_cpu_preempt_check+0x13/0x20\n  ? lockdep_hardirqs_on+0x82/0x110\n  __x64_sys_sendto+0x1f/0x30\n  do_syscall_64+0x38/0x90\n  entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nReject selecting a non-TCP sockets as redirect target from a BPF sk_msg\nprogram to prevent the crash. When attempted, user will receive an EACCES\nerror from send/sendto/sendmsg() syscall.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 5.5,
          "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Low",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/b80e31baa43614e086a9d29dc1151932b1bd7fc5",
        "https://git.kernel.org/stable/c/b8f97e47b6fb84fcf2f5a22e725eefb6cf5070c2",
        "https://git.kernel.org/stable/c/bc8b89b6963803a123f64aa9494155a037b3d728",
        "https://git.kernel.org/stable/c/ded6e448028f0f91b6af35985afca01fa02a9089",
        "https://lore.kernel.org/linux-cve-announce/2024030253-CVE-2023-52523-5ae2@gregkh/T/#u",
        "https://nvd.nist.gov/vuln/detail/CVE-2023-52523",
        "https://www.cve.org/CVERecord?id=CVE-2023-52523"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "bpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T23:03:20.665000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-476"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-03-02T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nbpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets\nWith a SOCKMAP/SOCKHASH map and an sk_msg program user can steer messages\nsent from one TCP socket (s1) to actually egress from another TCP\nsocket (s2):\ntcp_bpf_sendmsg(s1)// = sk_prot->sendmsg\ntcp_bpf_send_verdict(s1)// __SK_REDIRECT case\ntcp_bpf_sendmsg_redir(s2)\ntcp_bpf_push_locked(s2)\ntcp_bpf_push(s2)\ntcp_rate_check_app_limited(s2) // expects tcp_sock\ntcp_sendmsg_locked(s2) // ditto\nThere is a hard-coded assumption in the call-chain, that the egress\nsocket (s2) is a TCP socket.\nHowever in commit 122e6c79efe1 (\"sock_map: Update sock type checks for\nUDP\") we have enabled redirects to non-TCP sockets. This was done for the\nsake of BPF sk_skb programs. There was no indention to support sk_msg\nsend-to-egress use case.\nAs a result, attempts to send-to-egress through a non-TCP socket lead to a\ncrash due to invalid downcast from sock to tcp_sock:\nBUG: kernel NULL pointer dereference, address: 000000000000002f\n...\nCall Trace:\n<TASK>\n? show_regs+0x60/0x70\n? __die+0x1f/0x70\n? page_fault_oops+0x80/0x160\n? do_user_addr_fault+0x2d7/0x800\n? rcu_is_watching+0x11/0x50\n? exc_page_fault+0x70/0x1c0\n? asm_exc_page_fault+0x27/0x30\n? tcp_tso_segs+0x14/0xa0\ntcp_write_xmit+0x67/0xce0\n__tcp_push_pending_frames+0x32/0xf0\ntcp_push+0x107/0x140\ntcp_sendmsg_locked+0x99f/0xbb0\ntcp_bpf_push+0x19d/0x3a0\ntcp_bpf_sendmsg_redir+0x55/0xd0\ntcp_bpf_send_verdict+0x407/0x550\ntcp_bpf_sendmsg+0x1a1/0x390\ninet_sendmsg+0x6a/0x70\nsock_sendmsg+0x9d/0xc0\n? sockfd_lookup_light+0x12/0x80\n__sys_sendto+0x10e/0x160\n? syscall_enter_from_user_mode+0x20/0x60\n? __this_cpu_preempt_check+0x13/0x20\n? lockdep_hardirqs_on+0x82/0x110\n__x64_sys_sendto+0x1f/0x30\ndo_syscall_64+0x38/0x90\nentry_SYSCALL_64_after_hwframe+0x63/0xcd\nReject selecting a non-TCP sockets as redirect target from a BPF sk_msg\nprogram to prevent the crash. When attempted, user will receive an EACCES\nerror from send/sendto/sendmsg() syscall.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.5,
        "vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Low"
    },
    "redhat_repo_path": "2023/CVE-2023-52523.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/2024030253-CVE-2023-52523-5ae2@gregkh/T/#u",
      "https://nvd.nist.gov/vuln/detail/CVE-2023-52523",
      "https://www.cve.org/CVERecord?id=CVE-2023-52523"
    ],
    "title": "kernel: bpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets",
    "updated": "2024-03-02T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-476"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-03-02T21:52:30.351000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets\n\nWith a SOCKMAP/SOCKHASH map and an sk_msg program user can steer messages\nsent from one TCP socket (s1) to actually egress from another TCP\nsocket (s2):\n\ntcp_bpf_sendmsg(s1)\t\t// = sk_prot->sendmsg\n  tcp_bpf_send_verdict(s1)\t// __SK_REDIRECT case\n    tcp_bpf_sendmsg_redir(s2)\n      tcp_bpf_push_locked(s2)\n\ttcp_bpf_push(s2)\n\t  tcp_rate_check_app_limited(s2) // expects tcp_sock\n\t  tcp_sendmsg_locked(s2)\t // ditto\n\nThere is a hard-coded assumption in the call-chain, that the egress\nsocket (s2) is a TCP socket.\n\nHowever in commit 122e6c79efe1 (\"sock_map: Update sock type checks for\nUDP\") we have enabled redirects to non-TCP sockets. This was done for the\nsake of BPF sk_skb programs. There was no indention to support sk_msg\nsend-to-egress use case.\n\nAs a result, attempts to send-to-egress through a non-TCP socket lead to a\ncrash due to invalid downcast from sock to tcp_sock:\n\n BUG: kernel NULL pointer dereference, address: 000000000000002f\n ...\n Call Trace:\n  <TASK>\n  ? show_regs+0x60/0x70\n  ? __die+0x1f/0x70\n  ? page_fault_oops+0x80/0x160\n  ? do_user_addr_fault+0x2d7/0x800\n  ? rcu_is_watching+0x11/0x50\n  ? exc_page_fault+0x70/0x1c0\n  ? asm_exc_page_fault+0x27/0x30\n  ? tcp_tso_segs+0x14/0xa0\n  tcp_write_xmit+0x67/0xce0\n  __tcp_push_pending_frames+0x32/0xf0\n  tcp_push+0x107/0x140\n  tcp_sendmsg_locked+0x99f/0xbb0\n  tcp_bpf_push+0x19d/0x3a0\n  tcp_bpf_sendmsg_redir+0x55/0xd0\n  tcp_bpf_send_verdict+0x407/0x550\n  tcp_bpf_sendmsg+0x1a1/0x390\n  inet_sendmsg+0x6a/0x70\n  sock_sendmsg+0x9d/0xc0\n  ? sockfd_lookup_light+0x12/0x80\n  __sys_sendto+0x10e/0x160\n  ? syscall_enter_from_user_mode+0x20/0x60\n  ? __this_cpu_preempt_check+0x13/0x20\n  ? lockdep_hardirqs_on+0x82/0x110\n  __x64_sys_sendto+0x1f/0x30\n  do_syscall_64+0x38/0x90\n  entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nReject selecting a non-TCP sockets as redirect target from a BPF sk_msg\nprogram to prevent the crash. When attempted, user will receive an EACCES\nerror from send/sendto/sendmsg() syscall.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/b80e31baa43614e086a9d29dc1151932b1bd7fc5",
      "https://git.kernel.org/stable/c/b8f97e47b6fb84fcf2f5a22e725eefb6cf5070c2",
      "https://git.kernel.org/stable/c/bc8b89b6963803a123f64aa9494155a037b3d728",
      "https://git.kernel.org/stable/c/ded6e448028f0f91b6af35985afca01fa02a9089"
    ],
    "title": "bpf, sockmap: Reject sk_msg egress redirects to non-TCP sockets",
    "updated": "2024-08-02T23:03:20.665000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2023/52xxx/CVE-2023-52523.json",
    "weaknesses": []
  }
}