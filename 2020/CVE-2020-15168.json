{
  "cve": "CVE-2020-15168",
  "mitre": {
    "cpes": [],
    "created": "2020-09-10T18:25:13+00:00",
    "description": "node-fetch before versions 2.6.1 and 3.0.0-beta.9 did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure. For most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 2.6,
        "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2020/15xxx/CVE-2020-15168.json",
    "references": [
      "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r",
      "https://www.npmjs.com/package/node-fetch"
    ],
    "title": "File size limit bypass in node-fetch",
    "updated": "2024-08-04T13:08:22.463000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-20",
      "CWE-770"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:node-fetch_project:node-fetch:*:*:*:*:*:node.js:*:*",
      "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta1:*:*:*:node.js:*:*",
      "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta5:*:*:*:node.js:*:*",
      "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta6:*:*:*:node.js:*:*",
      "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta7:*:*:*:node.js:*:*",
      "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta8:*:*:*:node.js:*:*"
    ],
    "created": "2020-09-10T19:15:13.490000+00:00",
    "description": "node-fetch before versions 2.6.1 and 3.0.0-beta.9 did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure. For most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.",
    "metrics": {
      "cvssV2_0": {
        "score": 5.0,
        "vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.3,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2020/CVE-2020-15168.json",
    "references": [
      "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r",
      "https://www.npmjs.com/package/node-fetch"
    ],
    "title": null,
    "updated": "2020-09-17T20:21:19.147000+00:00",
    "vendors": [
      "node-fetch_project",
      "node-fetch_project$PRODUCT$node-fetch"
    ],
    "weaknesses": [
      "CWE-20",
      "CWE-770"
    ]
  },
  "opencve": {
    "changes": [
      {
        "created": "2024-08-19T22:00:00+00:00",
        "data": [
          {
            "details": {
              "added": [],
              "removed": [
                "cpe:/a:redhat:acm:2.2::el7",
                "cpe:/a:redhat:acm:2.2::el8"
              ]
            },
            "type": "cpes"
          },
          {
            "details": {
              "added": [],
              "removed": [
                "redhat",
                "redhat$PRODUCT$acm"
              ]
            },
            "type": "vendors"
          }
        ],
        "id": "013572bc-7920-453a-af84-42c9b0815c09"
      }
    ],
    "cpes": {
      "data": [
        "cpe:2.3:a:node-fetch_project:node-fetch:*:*:*:*:*:node.js:*:*",
        "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta1:*:*:*:node.js:*:*",
        "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta5:*:*:*:node.js:*:*",
        "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta6:*:*:*:node.js:*:*",
        "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta7:*:*:*:node.js:*:*",
        "cpe:2.3:a:node-fetch_project:node-fetch:3.0.0:beta8:*:*:*:node.js:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2020-09-10T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "node-fetch before versions 2.6.1 and 3.0.0-beta.9 did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure. For most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 5.0,
          "vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 2.6,
          "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Low",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://github.com/node-fetch/node-fetch/security/advisories/GHSA-w7rc-rwvf-8q5r",
        "https://nvd.nist.gov/vuln/detail/CVE-2020-15168",
        "https://www.cve.org/CVERecord?id=CVE-2020-15168",
        "https://www.npmjs.com/package/node-fetch"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    },
    "title": {
      "data": "File size limit bypass in node-fetch",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-04T13:08:22.463000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "node-fetch_project",
        "node-fetch_project$PRODUCT$node-fetch"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-20",
        "CWE-400",
        "CWE-770"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2020-09-10T00:00:00+00:00",
    "description": "node-fetch before versions 2.6.1 and 3.0.0-beta.9 did not honor the size option after following a redirect, which means that when a content size was over the limit, a FetchError would never get thrown and the process would end without failure. For most people, this fix will have a little or no impact. However, if you are relying on node-fetch to gate files above a size, the impact could be significant, for example: If you don't double-check the size of the data after fetch() has completed, your JS thread could get tied up doing work on a large file (DoS) and/or cost you money in computing.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 5.3,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L"
      },
      "threat_severity": "Low"
    },
    "redhat_repo_path": "2020/CVE-2020-15168.json",
    "references": [
      "https://nvd.nist.gov/vuln/detail/CVE-2020-15168",
      "https://www.cve.org/CVERecord?id=CVE-2020-15168"
    ],
    "title": "node-fetch: size of data after fetch() JS thread leads to DoS",
    "updated": "2020-09-10T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-400"
    ]
  }
}