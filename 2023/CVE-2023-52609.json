{
  "cve": "CVE-2023-52609",
  "mitre": {
    "cpes": [],
    "created": "2024-03-18T10:07:45.486000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbinder: fix race between mmput() and do_exit()\n\nTask A calls binder_update_page_range() to allocate and insert pages on\na remote address space from Task B. For this, Task A pins the remote mm\nvia mmget_not_zero() first. This can race with Task B do_exit() and the\nfinal mmput() refcount decrement will come from Task A.\n\n  Task A            | Task B\n  ------------------+------------------\n  mmget_not_zero()  |\n                    |  do_exit()\n                    |    exit_mm()\n                    |      mmput()\n  mmput()           |\n    exit_mmap()     |\n      remove_vma()  |\n        fput()      |\n\nIn this case, the work of ____fput() from Task B is queued up in Task A\nas TWA_RESUME. So in theory, Task A returns to userspace and the cleanup\nwork gets executed. However, Task A instead sleep, waiting for a reply\nfrom Task B that never comes (it's dead).\n\nThis means the binder_deferred_release() is blocked until an unrelated\nbinder event forces Task A to go back to userspace. All the associated\ndeath notifications will also be delayed until then.\n\nIn order to fix this use mmput_async() that will schedule the work in\nthe corresponding mm->async_put_work WQ instead of Task A.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2023/52xxx/CVE-2023-52609.json",
    "references": [
      "https://git.kernel.org/stable/c/252a2a5569eb9f8d16428872cc24dea1ac0bb097",
      "https://git.kernel.org/stable/c/6696f76c32ff67fec26823fc2df46498e70d9bf3",
      "https://git.kernel.org/stable/c/67f16bf2cc1698fd50e01ee8a2becc5a8e6d3a3e",
      "https://git.kernel.org/stable/c/77d210e8db4d61d43b2d16df66b1ec46fad2ee01",
      "https://git.kernel.org/stable/c/7e7a0d86542b0ea903006d3f42f33c4f7ead6918",
      "https://git.kernel.org/stable/c/95b1d336b0642198b56836b89908d07b9a0c9608",
      "https://git.kernel.org/stable/c/98fee5bee97ad47b527a997d5786410430d1f0e9",
      "https://git.kernel.org/stable/c/9a9ab0d963621d9d12199df9817e66982582d5a5",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00016.html",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html"
    ],
    "title": "binder: fix race between mmput() and do_exit()",
    "updated": "2024-08-02T23:03:21.321000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "nvd": {
    "cpes": [],
    "created": "2024-03-18T11:15:07.743000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbinder: fix race between mmput() and do_exit()\n\nTask A calls binder_update_page_range() to allocate and insert pages on\na remote address space from Task B. For this, Task A pins the remote mm\nvia mmget_not_zero() first. This can race with Task B do_exit() and the\nfinal mmput() refcount decrement will come from Task A.\n\n  Task A            | Task B\n  ------------------+------------------\n  mmget_not_zero()  |\n                    |  do_exit()\n                    |    exit_mm()\n                    |      mmput()\n  mmput()           |\n    exit_mmap()     |\n      remove_vma()  |\n        fput()      |\n\nIn this case, the work of ____fput() from Task B is queued up in Task A\nas TWA_RESUME. So in theory, Task A returns to userspace and the cleanup\nwork gets executed. However, Task A instead sleep, waiting for a reply\nfrom Task B that never comes (it's dead).\n\nThis means the binder_deferred_release() is blocked until an unrelated\nbinder event forces Task A to go back to userspace. All the associated\ndeath notifications will also be delayed until then.\n\nIn order to fix this use mmput_async() that will schedule the work in\nthe corresponding mm->async_put_work WQ instead of Task A.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2023/CVE-2023-52609.json",
    "references": [
      "https://git.kernel.org/stable/c/252a2a5569eb9f8d16428872cc24dea1ac0bb097",
      "https://git.kernel.org/stable/c/6696f76c32ff67fec26823fc2df46498e70d9bf3",
      "https://git.kernel.org/stable/c/67f16bf2cc1698fd50e01ee8a2becc5a8e6d3a3e",
      "https://git.kernel.org/stable/c/77d210e8db4d61d43b2d16df66b1ec46fad2ee01",
      "https://git.kernel.org/stable/c/7e7a0d86542b0ea903006d3f42f33c4f7ead6918",
      "https://git.kernel.org/stable/c/95b1d336b0642198b56836b89908d07b9a0c9608",
      "https://git.kernel.org/stable/c/98fee5bee97ad47b527a997d5786410430d1f0e9",
      "https://git.kernel.org/stable/c/9a9ab0d963621d9d12199df9817e66982582d5a5",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00016.html",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html"
    ],
    "title": null,
    "updated": "2024-06-27T12:15:15.430000+00:00",
    "vendors": [],
    "weaknesses": []
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [],
      "providers": []
    },
    "created": {
      "data": "2024-03-18T00:00:00+00:00",
      "provider": "redhat"
    },
    "description": {
      "data": "In the Linux kernel, the following vulnerability has been resolved:\n\nbinder: fix race between mmput() and do_exit()\n\nTask A calls binder_update_page_range() to allocate and insert pages on\na remote address space from Task B. For this, Task A pins the remote mm\nvia mmget_not_zero() first. This can race with Task B do_exit() and the\nfinal mmput() refcount decrement will come from Task A.\n\n  Task A            | Task B\n  ------------------+------------------\n  mmget_not_zero()  |\n                    |  do_exit()\n                    |    exit_mm()\n                    |      mmput()\n  mmput()           |\n    exit_mmap()     |\n      remove_vma()  |\n        fput()      |\n\nIn this case, the work of ____fput() from Task B is queued up in Task A\nas TWA_RESUME. So in theory, Task A returns to userspace and the cleanup\nwork gets executed. However, Task A instead sleep, waiting for a reply\nfrom Task B that never comes (it's dead).\n\nThis means the binder_deferred_release() is blocked until an unrelated\nbinder event forces Task A to go back to userspace. All the associated\ndeath notifications will also be delayed until then.\n\nIn order to fix this use mmput_async() that will schedule the work in\nthe corresponding mm->async_put_work WQ instead of Task A.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 4.1,
          "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H"
        },
        "provider": "redhat"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": "Low",
        "provider": "redhat"
      }
    },
    "references": {
      "data": [
        "https://git.kernel.org/stable/c/252a2a5569eb9f8d16428872cc24dea1ac0bb097",
        "https://git.kernel.org/stable/c/6696f76c32ff67fec26823fc2df46498e70d9bf3",
        "https://git.kernel.org/stable/c/67f16bf2cc1698fd50e01ee8a2becc5a8e6d3a3e",
        "https://git.kernel.org/stable/c/77d210e8db4d61d43b2d16df66b1ec46fad2ee01",
        "https://git.kernel.org/stable/c/7e7a0d86542b0ea903006d3f42f33c4f7ead6918",
        "https://git.kernel.org/stable/c/95b1d336b0642198b56836b89908d07b9a0c9608",
        "https://git.kernel.org/stable/c/98fee5bee97ad47b527a997d5786410430d1f0e9",
        "https://git.kernel.org/stable/c/9a9ab0d963621d9d12199df9817e66982582d5a5",
        "https://lists.debian.org/debian-lts-announce/2024/06/msg00016.html",
        "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html",
        "https://lore.kernel.org/linux-cve-announce/20240318100758.2828621-9-lee@kernel.org/T",
        "https://nvd.nist.gov/vuln/detail/CVE-2023-52609",
        "https://www.cve.org/CVERecord?id=CVE-2023-52609"
      ],
      "providers": [
        "mitre",
        "nvd",
        "redhat",
        "vulnrichment"
      ]
    },
    "title": {
      "data": "binder: fix race between mmput() and do_exit()",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-02T23:03:21.321000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [],
      "providers": []
    },
    "weaknesses": {
      "data": [
        "CWE-362"
      ],
      "providers": [
        "redhat"
      ]
    }
  },
  "redhat": {
    "cpes": [],
    "created": "2024-03-18T00:00:00+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\nbinder: fix race between mmput() and do_exit()\nTask A calls binder_update_page_range() to allocate and insert pages on\na remote address space from Task B. For this, Task A pins the remote mm\nvia mmget_not_zero() first. This can race with Task B do_exit() and the\nfinal mmput() refcount decrement will come from Task A.\nTask A            | Task B\n------------------+------------------\nmmget_not_zero()  |\n|  do_exit()\n|    exit_mm()\n|      mmput()\nmmput()           |\nexit_mmap()     |\nremove_vma()  |\nfput()      |\nIn this case, the work of ____fput() from Task B is queued up in Task A\nas TWA_RESUME. So in theory, Task A returns to userspace and the cleanup\nwork gets executed. However, Task A instead sleep, waiting for a reply\nfrom Task B that never comes (it's dead).\nThis means the binder_deferred_release() is blocked until an unrelated\nbinder event forces Task A to go back to userspace. All the associated\ndeath notifications will also be delayed until then.\nIn order to fix this use mmput_async() that will schedule the work in\nthe corresponding mm->async_put_work WQ instead of Task A.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 4.1,
        "vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H"
      },
      "threat_severity": "Low"
    },
    "redhat_repo_path": "2023/CVE-2023-52609.json",
    "references": [
      "https://lore.kernel.org/linux-cve-announce/20240318100758.2828621-9-lee@kernel.org/T",
      "https://nvd.nist.gov/vuln/detail/CVE-2023-52609",
      "https://www.cve.org/CVERecord?id=CVE-2023-52609"
    ],
    "title": "kernel: binder: fix race between mmput() and do_exit()",
    "updated": "2024-03-18T00:00:00+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-362"
    ]
  },
  "vulnrichment": {
    "cpes": [],
    "created": "2024-03-18T10:07:45.486000+00:00",
    "description": "In the Linux kernel, the following vulnerability has been resolved:\n\nbinder: fix race between mmput() and do_exit()\n\nTask A calls binder_update_page_range() to allocate and insert pages on\na remote address space from Task B. For this, Task A pins the remote mm\nvia mmget_not_zero() first. This can race with Task B do_exit() and the\nfinal mmput() refcount decrement will come from Task A.\n\n  Task A            | Task B\n  ------------------+------------------\n  mmget_not_zero()  |\n                    |  do_exit()\n                    |    exit_mm()\n                    |      mmput()\n  mmput()           |\n    exit_mmap()     |\n      remove_vma()  |\n        fput()      |\n\nIn this case, the work of ____fput() from Task B is queued up in Task A\nas TWA_RESUME. So in theory, Task A returns to userspace and the cleanup\nwork gets executed. However, Task A instead sleep, waiting for a reply\nfrom Task B that never comes (it's dead).\n\nThis means the binder_deferred_release() is blocked until an unrelated\nbinder event forces Task A to go back to userspace. All the associated\ndeath notifications will also be delayed until then.\n\nIn order to fix this use mmput_async() that will schedule the work in\nthe corresponding mm->async_put_work WQ instead of Task A.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {},
      "cvssV4_0": {},
      "kev": {},
      "ssvc": {}
    },
    "references": [
      "https://git.kernel.org/stable/c/252a2a5569eb9f8d16428872cc24dea1ac0bb097",
      "https://git.kernel.org/stable/c/6696f76c32ff67fec26823fc2df46498e70d9bf3",
      "https://git.kernel.org/stable/c/67f16bf2cc1698fd50e01ee8a2becc5a8e6d3a3e",
      "https://git.kernel.org/stable/c/77d210e8db4d61d43b2d16df66b1ec46fad2ee01",
      "https://git.kernel.org/stable/c/7e7a0d86542b0ea903006d3f42f33c4f7ead6918",
      "https://git.kernel.org/stable/c/95b1d336b0642198b56836b89908d07b9a0c9608",
      "https://git.kernel.org/stable/c/98fee5bee97ad47b527a997d5786410430d1f0e9",
      "https://git.kernel.org/stable/c/9a9ab0d963621d9d12199df9817e66982582d5a5",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00016.html",
      "https://lists.debian.org/debian-lts-announce/2024/06/msg00020.html"
    ],
    "title": "binder: fix race between mmput() and do_exit()",
    "updated": "2024-08-02T23:03:21.321000+00:00",
    "vendors": [],
    "vulnrichment_repo_path": "2023/52xxx/CVE-2023-52609.json",
    "weaknesses": []
  }
}