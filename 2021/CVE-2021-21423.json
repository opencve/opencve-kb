{
  "cve": "CVE-2021-21423",
  "mitre": {
    "cpes": [],
    "created": "2021-04-06T18:35:14+00:00",
    "description": "`projen` is a project generation tool that synthesizes project configuration files such as `package.json`, `tsconfig.json`, `.gitignore`, GitHub Workflows, `eslint`, `jest`, and more, from a well-typed definition written in JavaScript. Users of projen's `NodeProject` project type (including any project type derived from it) include a `.github/workflows/rebuild-bot.yml` workflow that may allow any GitHub user to trigger execution of un-trusted code in the context of the \"main\" repository (as opposed to that of a fork). In some situations, such untrusted code may potentially be able to commit to the \"main\" repository. The rebuild-bot workflow is triggered by comments including `@projen rebuild` on pull-request to trigger a re-build of the projen project, and updating the pull request with the updated files. This workflow is triggered by an `issue_comment` event, and thus always executes with a `GITHUB_TOKEN` belonging to the repository into which the pull-request is made (this is in contrast with workflows triggered by `pull_request` events, which always execute with a `GITHUB_TOKEN` belonging to the repository from which the pull-request is made). Repositories that do not have branch protection configured on their default branch (typically `main` or `master`) could possibly allow an untrusted user to gain access to secrets configured on the repository (such as NPM tokens, etc). Branch protection prohibits this escalation, as the managed `GITHUB_TOKEN` would not be able to modify the contents of a protected branch and affected workflows must be defined on the default branch.",
    "metrics": {
      "cvssV2_0": {},
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 6.8,
        "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N"
      },
      "cvssV4_0": {}
    },
    "mitre_repo_path": "cves/2021/21xxx/CVE-2021-21423.json",
    "references": [
      "https://github.com/projen/projen/commit/36030c6a4b1acd0054673322612e7c70e9446643",
      "https://github.com/projen/projen/security/advisories/GHSA-gg2g-m5wc-vccq",
      "https://www.npmjs.com/package/projen"
    ],
    "title": "Exposure of Version-Control Repository to an Unauthorized Control Sphere in projen",
    "updated": "2024-08-03T18:09:16.091000+00:00",
    "vendors": [],
    "weaknesses": [
      "CWE-527"
    ]
  },
  "nvd": {
    "cpes": [
      "cpe:2.3:a:projen_project:projen:*:*:*:*:*:node.js:*:*"
    ],
    "created": "2021-04-06T19:15:14.787000+00:00",
    "description": "`projen` is a project generation tool that synthesizes project configuration files such as `package.json`, `tsconfig.json`, `.gitignore`, GitHub Workflows, `eslint`, `jest`, and more, from a well-typed definition written in JavaScript. Users of projen's `NodeProject` project type (including any project type derived from it) include a `.github/workflows/rebuild-bot.yml` workflow that may allow any GitHub user to trigger execution of un-trusted code in the context of the \"main\" repository (as opposed to that of a fork). In some situations, such untrusted code may potentially be able to commit to the \"main\" repository. The rebuild-bot workflow is triggered by comments including `@projen rebuild` on pull-request to trigger a re-build of the projen project, and updating the pull request with the updated files. This workflow is triggered by an `issue_comment` event, and thus always executes with a `GITHUB_TOKEN` belonging to the repository into which the pull-request is made (this is in contrast with workflows triggered by `pull_request` events, which always execute with a `GITHUB_TOKEN` belonging to the repository from which the pull-request is made). Repositories that do not have branch protection configured on their default branch (typically `main` or `master`) could possibly allow an untrusted user to gain access to secrets configured on the repository (such as NPM tokens, etc). Branch protection prohibits this escalation, as the managed `GITHUB_TOKEN` would not be able to modify the contents of a protected branch and affected workflows must be defined on the default branch.",
    "metrics": {
      "cvssV2_0": {
        "score": 5.5,
        "vector": "AV:N/AC:L/Au:S/C:P/I:P/A:N"
      },
      "cvssV3_0": {},
      "cvssV3_1": {
        "score": 8.1,
        "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N"
      },
      "cvssV4_0": {}
    },
    "nvd_repo_path": "2021/CVE-2021-21423.json",
    "references": [
      "https://github.com/projen/projen/commit/36030c6a4b1acd0054673322612e7c70e9446643",
      "https://github.com/projen/projen/security/advisories/GHSA-gg2g-m5wc-vccq",
      "https://www.npmjs.com/package/projen"
    ],
    "title": null,
    "updated": "2021-04-15T14:37:24.367000+00:00",
    "vendors": [
      "projen_project",
      "projen_project$PRODUCT$projen"
    ],
    "weaknesses": [
      "CWE-527"
    ]
  },
  "opencve": {
    "changes": [],
    "cpes": {
      "data": [
        "cpe:2.3:a:projen_project:projen:*:*:*:*:*:node.js:*:*"
      ],
      "providers": [
        "nvd"
      ]
    },
    "created": {
      "data": "2021-04-06T18:35:14+00:00",
      "provider": "mitre"
    },
    "description": {
      "data": "`projen` is a project generation tool that synthesizes project configuration files such as `package.json`, `tsconfig.json`, `.gitignore`, GitHub Workflows, `eslint`, `jest`, and more, from a well-typed definition written in JavaScript. Users of projen's `NodeProject` project type (including any project type derived from it) include a `.github/workflows/rebuild-bot.yml` workflow that may allow any GitHub user to trigger execution of un-trusted code in the context of the \"main\" repository (as opposed to that of a fork). In some situations, such untrusted code may potentially be able to commit to the \"main\" repository. The rebuild-bot workflow is triggered by comments including `@projen rebuild` on pull-request to trigger a re-build of the projen project, and updating the pull request with the updated files. This workflow is triggered by an `issue_comment` event, and thus always executes with a `GITHUB_TOKEN` belonging to the repository into which the pull-request is made (this is in contrast with workflows triggered by `pull_request` events, which always execute with a `GITHUB_TOKEN` belonging to the repository from which the pull-request is made). Repositories that do not have branch protection configured on their default branch (typically `main` or `master`) could possibly allow an untrusted user to gain access to secrets configured on the repository (such as NPM tokens, etc). Branch protection prohibits this escalation, as the managed `GITHUB_TOKEN` would not be able to modify the contents of a protected branch and affected workflows must be defined on the default branch.",
      "provider": "mitre"
    },
    "metrics": {
      "cvssV2_0": {
        "data": {
          "score": 5.5,
          "vector": "AV:N/AC:L/Au:S/C:P/I:P/A:N"
        },
        "provider": "nvd"
      },
      "cvssV3_0": {
        "data": {},
        "provider": null
      },
      "cvssV3_1": {
        "data": {
          "score": 6.8,
          "vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N"
        },
        "provider": "mitre"
      },
      "cvssV4_0": {
        "data": {},
        "provider": null
      },
      "kev": {
        "data": {},
        "provider": null
      },
      "ssvc": {
        "data": {},
        "provider": null
      },
      "threat_severity": {
        "data": null,
        "provider": null
      }
    },
    "references": {
      "data": [
        "https://github.com/projen/projen/commit/36030c6a4b1acd0054673322612e7c70e9446643",
        "https://github.com/projen/projen/security/advisories/GHSA-gg2g-m5wc-vccq",
        "https://www.npmjs.com/package/projen"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    },
    "title": {
      "data": "Exposure of Version-Control Repository to an Unauthorized Control Sphere in projen",
      "provider": "mitre"
    },
    "updated": {
      "data": "2024-08-03T18:09:16.091000+00:00",
      "provider": "mitre"
    },
    "vendors": {
      "data": [
        "projen_project",
        "projen_project$PRODUCT$projen"
      ],
      "providers": [
        "nvd"
      ]
    },
    "weaknesses": {
      "data": [
        "CWE-527"
      ],
      "providers": [
        "mitre",
        "nvd"
      ]
    }
  }
}